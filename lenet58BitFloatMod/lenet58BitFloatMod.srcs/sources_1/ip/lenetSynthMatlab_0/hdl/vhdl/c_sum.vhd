-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity c_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of c_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_29_fu_144_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_29_reg_366 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_174_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_371 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_13_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_13_reg_379 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_176_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_30_fu_216_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_30_reg_397 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_cast_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_402 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_14_fu_264_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_14_reg_410 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_177_fu_294_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_177_reg_415 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_420 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_k_2_fu_323_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_k_2_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_addr_5_reg_438 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_load_5_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_load_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_182_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_reg_79 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_reg_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_1_reg_101 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_1_reg_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_k_reg_123 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_179_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_181_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_shl_fu_150_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl9_fu_162_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_158_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_cast_fu_170_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_k_cast7_fu_180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_175_fu_196_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_181_cast_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_183_fu_222_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl10_fu_226_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_184_fu_238_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl10_cast_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl11_cast_fu_244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_fu_270_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl13_fu_282_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl12_cast_fu_278_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_fu_290_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_183_cast_fu_300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_k_cast3_fu_313_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_329_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_cast_fu_335_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_178_fu_339_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_k_cast4_fu_309_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_180_fu_349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_187_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component lenetSynthMatlab_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenetSynthMatlab_bkb_U5 : component lenetSynthMatlab_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_load_reg_448,
        din1 => x_load_5_reg_443,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b_k_1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_317_p2 = ap_const_lv1_1))) then 
                b_k_1_reg_112 <= b_k_14_reg_410;
            elsif (((exitcond2_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                b_k_1_reg_112 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_k_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_k_reg_90 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_k_reg_90 <= b_k_13_reg_379;
            end if; 
        end if;
    end process;

    c_k_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_k_reg_123 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                c_k_reg_123 <= c_k_2_reg_428;
            end if; 
        end if;
    end process;

    k_1_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_101 <= ap_const_lv3_0;
            elsif (((exitcond1_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_1_reg_101 <= k_30_reg_397;
            end if; 
        end if;
    end process;

    k_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_79 <= k_29_reg_366;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_79 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                b_k_13_reg_379 <= b_k_13_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                b_k_14_reg_410 <= b_k_14_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_k_2_reg_428 <= c_k_2_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_29_reg_366 <= k_29_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_30_reg_397 <= k_30_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp1_reg_420(8 downto 1) <= tmp1_fu_304_p2(8 downto 1);
                    tmp_177_reg_415(6 downto 1) <= tmp_177_fu_294_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_176_reg_384(31 downto 0) <= tmp_176_fu_205_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_182_reg_453 <= grp_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_cast_reg_402(8 downto 1) <= tmp_cast_fu_254_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_371(6 downto 1) <= tmp_fu_174_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                x_load_5_reg_443 <= x_q0;
                y_load_reg_448 <= y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                y_addr_5_reg_438 <= tmp_181_fu_358_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_371(0) <= '0';
    tmp_176_reg_384(63 downto 32) <= "00000000000000000000000000000000";
    tmp_cast_reg_402(0) <= '0';
    tmp_177_reg_415(0) <= '0';
    tmp1_reg_420(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_138_p2, ap_CS_fsm_state3, exitcond3_fu_184_p2, ap_CS_fsm_state5, exitcond2_fu_210_p2, ap_CS_fsm_state6, exitcond1_fu_258_p2, ap_CS_fsm_state7, exitcond_fu_317_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond1_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond2_fu_210_p2)
    begin
        if ((((exitcond2_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_210_p2)
    begin
        if (((exitcond2_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_k_13_fu_190_p2 <= std_logic_vector(unsigned(b_k_reg_90) + unsigned(ap_const_lv3_1));
    b_k_14_fu_264_p2 <= std_logic_vector(unsigned(b_k_1_reg_112) + unsigned(ap_const_lv3_1));
    b_k_cast7_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_reg_90),7));
    c_k_2_fu_323_p2 <= std_logic_vector(unsigned(c_k_reg_123) + unsigned(ap_const_lv3_1));
    c_k_cast3_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_k_reg_123),6));
    c_k_cast4_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_k_reg_123),7));
    exitcond1_fu_258_p2 <= "1" when (b_k_1_reg_112 = ap_const_lv3_5) else "0";
    exitcond2_fu_210_p2 <= "1" when (k_1_reg_101 = ap_const_lv3_4) else "0";
    exitcond3_fu_184_p2 <= "1" when (b_k_reg_90 = ap_const_lv3_6) else "0";
    exitcond4_fu_138_p2 <= "1" when (k_reg_79 = ap_const_lv3_5) else "0";
    exitcond_fu_317_p2 <= "1" when (c_k_reg_123 = ap_const_lv3_6) else "0";
    k_29_fu_144_p2 <= std_logic_vector(unsigned(k_reg_79) + unsigned(ap_const_lv3_1));
    k_30_fu_216_p2 <= std_logic_vector(unsigned(k_1_reg_101) + unsigned(ap_const_lv3_1));
    p_shl10_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_226_p3),8));
    p_shl10_fu_226_p3 <= (tmp_183_fu_222_p1 & ap_const_lv5_0);
    p_shl11_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_184_fu_238_p2),8));
    p_shl12_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl12_fu_270_p3),7));
    p_shl12_fu_270_p3 <= (b_k_1_reg_112 & ap_const_lv3_0);
    p_shl13_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_fu_282_p3),7));
    p_shl13_fu_282_p3 <= (b_k_1_reg_112 & ap_const_lv1_0);
    p_shl9_cast_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_162_p3),7));
    p_shl9_fu_162_p3 <= (k_reg_79 & ap_const_lv1_0);
    p_shl_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_150_p3),7));
    p_shl_fu_150_p3 <= (k_reg_79 & ap_const_lv3_0);
    tmp1_fu_304_p2 <= std_logic_vector(signed(tmp_183_cast_fu_300_p1) + signed(tmp_cast_reg_402));
    tmp2_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_329_p2),9));
    tmp2_fu_329_p2 <= std_logic_vector(unsigned(c_k_cast3_fu_313_p1) + unsigned(ap_const_lv6_1E));
    tmp_175_fu_196_p2 <= std_logic_vector(unsigned(tmp_reg_371) + unsigned(b_k_cast7_fu_180_p1));
    tmp_176_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_181_cast_fu_201_p1),64));
    tmp_177_fu_294_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_278_p1) - unsigned(p_shl13_cast_fu_290_p1));
    tmp_178_fu_339_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_335_p1) + unsigned(tmp1_reg_420));
    tmp_179_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_178_fu_339_p2),64));
    tmp_180_fu_349_p2 <= std_logic_vector(signed(tmp_177_reg_415) + signed(c_k_cast4_fu_309_p1));
        tmp_181_cast_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_175_fu_196_p2),32));

    tmp_181_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_187_cast_fu_354_p1),64));
        tmp_183_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_177_fu_294_p2),9));

    tmp_183_fu_222_p1 <= k_1_reg_101(2 - 1 downto 0);
    tmp_184_fu_238_p2 <= std_logic_vector(shift_left(unsigned(k_1_reg_101),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
        tmp_187_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_180_fu_349_p2),32));

        tmp_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_248_p2),9));

    tmp_fu_174_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_158_p1) - unsigned(p_shl9_cast_fu_170_p1));
    tmp_s_fu_248_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_234_p1) - unsigned(p_shl11_cast_fu_244_p1));

    x_address0_assign_proc : process(ap_CS_fsm_state3, tmp_176_fu_205_p1, ap_CS_fsm_state7, tmp_179_fu_344_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_address0 <= tmp_179_fu_344_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address0 <= tmp_176_fu_205_p1(8 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_address0_assign_proc : process(tmp_176_reg_384, ap_CS_fsm_state7, y_addr_5_reg_438, ap_CS_fsm_state4, ap_CS_fsm_state14, tmp_181_fu_358_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            y_address0 <= y_addr_5_reg_438;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_address0 <= tmp_181_fu_358_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_address0 <= tmp_176_reg_384(5 - 1 downto 0);
        else 
            y_address0 <= "XXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_d0_assign_proc : process(x_q0, tmp_182_reg_453, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            y_d0 <= tmp_182_reg_453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_d0 <= x_q0;
        else 
            y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
