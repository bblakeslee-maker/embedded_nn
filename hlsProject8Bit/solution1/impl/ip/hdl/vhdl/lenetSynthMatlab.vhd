-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenetSynthMatlab is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImg_ce0 : OUT STD_LOGIC;
    inputImg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    netScores_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    netScores_ce0 : OUT STD_LOGIC;
    netScores_we0 : OUT STD_LOGIC;
    netScores_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lenetSynthMatlab is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenetSynthMatlab,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.261400,HLS_SYN_LAT=7683724,HLS_SYN_TPT=none,HLS_SYN_MEM=98,HLS_SYN_DSP=21,HLS_SYN_FF=6758,HLS_SYN_LUT=10952,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (175 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (175 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (175 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (175 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (175 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (175 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (175 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (175 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state174 : STD_LOGIC_VECTOR (175 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state175 : STD_LOGIC_VECTOR (175 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state176 : STD_LOGIC_VECTOR (175 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_A8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010101000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_497 : STD_LOGIC_VECTOR (10 downto 0) := "10010010111";
    constant ap_const_lv8_AC : STD_LOGIC_VECTOR (7 downto 0) := "10101100";
    constant ap_const_lv13_150 : STD_LOGIC_VECTOR (12 downto 0) := "0000101010000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_A8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010101000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv12_54 : STD_LOGIC_VECTOR (11 downto 0) := "000001010100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_18F : STD_LOGIC_VECTOR (8 downto 0) := "110001111";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal ap_CS_fsm_state171 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state171 : signal is "none";
    signal reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state158 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state158 : signal is "none";
    signal ap_CS_fsm_state175 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state175 : signal is "none";
    signal reg_1296 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal reg_1300 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal grp_fu_1243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal ap_CS_fsm_state166 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state166 : signal is "none";
    signal f_cast_fu_1322_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_cast_reg_3576 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal f_5_fu_1332_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_5_reg_3584 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_cast_fu_1338_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul_cast_reg_3589 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal next_mul_fu_1342_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_3594 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_4_fu_1354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_4_reg_3602 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_cast1_fu_1360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_cast1_reg_3607 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_4_fu_1370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_4_reg_3615 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_cast_fu_1376_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_cast_reg_3620 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_9_fu_1386_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_9_reg_3628 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_fu_1392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_3633 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond30_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl6_fu_1398_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_reg_3638 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_2_fu_1416_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_2_reg_3646 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond29_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1446_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_reg_3656 : STD_LOGIC_VECTOR (4 downto 0);
    signal inputImg_load_reg_3661 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_3671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal fv11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal k_10_fu_1465_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_10_reg_3684 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond_i_fu_1459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1515_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_reg_3694 : STD_LOGIC_VECTOR (13 downto 0);
    signal fv11_load_reg_3699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal phi_mul2_cast_fu_1528_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul2_cast_reg_3704 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal next_mul3_fu_1532_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul3_reg_3709 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_fu_1544_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_3717 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_fu_1556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_reg_3725 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_4_fu_1586_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_3730 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond27_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_4_fu_1602_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_4_reg_3738 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_8_fu_1626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_3743 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond26_fu_1596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_reg_3753 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal rowOutIdx_1_fu_1672_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_1_reg_3760 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal indvarinc_fu_1679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal f_1_cast_fu_1696_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_1_cast_reg_3785 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_6_fu_1710_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_6_reg_3793 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_cast_fu_1722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_reg_3798 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond25_fu_1704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul4_cast_fu_1726_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul4_cast_reg_3808 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal next_mul5_fu_1730_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul5_reg_3813 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_5_fu_1742_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_5_reg_3821 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_1766_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_reg_3826 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond24_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_1772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_reg_3831 : STD_LOGIC_VECTOR (63 downto 0);
    signal colOutIdx_15_fu_1782_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_15_reg_3841 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal b_k_5_cast_fu_1796_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_k_5_cast_reg_3846 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond23_fu_1776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1800_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_3851 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal j_2_fu_1810_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_3860 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_46_fu_1859_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_reg_3865 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond22_fu_1804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1864_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_50_reg_3871 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_1881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_reg_3877 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_3882 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_2001_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_3887 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal relu1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_reg_3903 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal relu1ActivationMap_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_1_reg_3909 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_6_fu_2107_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_maxval_6_reg_3915 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal p_Val2_6_fu_2150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_3925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_3930 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_2156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_reg_3935 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_2_cast_fu_2271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_2_cast_reg_3940 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal f_7_fu_2281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_7_reg_3948 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_6_fu_2293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_6_reg_3956 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal tmp9_fu_2319_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_reg_3961 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond20_fu_2287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_5_fu_2331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_5_reg_3969 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal k_14_fu_2347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_14_reg_3977 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_70_fu_2363_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_70_reg_3982 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond18_fu_2341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_2393_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_74_reg_3987 : STD_LOGIC_VECTOR (8 downto 0);
    signal colOutIdx_10_fu_2409_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_10_reg_3995 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal tmp_86_fu_2445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_reg_4000 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond17_fu_2403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_2475_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_87_reg_4005 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_k_8_fu_2495_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_8_reg_4013 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal exitcond16_fu_2489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_2533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_104_reg_4023 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal pool1ActivationMap_l_reg_4028 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal fv14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal k_20_fu_2552_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_20_reg_4041 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal exitcond_i1_fu_2546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_2580_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_75_reg_4051 : STD_LOGIC_VECTOR (10 downto 0);
    signal fv14_load_reg_4056 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal k_11_fu_2595_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_11_reg_4064 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp6_fu_2621_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_4069 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond15_fu_2589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_5_fu_2633_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_5_reg_4077 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal tmp_29_fu_2639_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_4082 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond14_fu_2627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_6_fu_2657_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_6_reg_4090 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal tmp_52_fu_2677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_reg_4095 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond13_fu_2651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_5_reg_4105 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal rowOutIdx_2_fu_2723_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_2_reg_4112 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal indvarinc1_fu_2730_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal f_3_cast_fu_2757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_3_cast_reg_4139 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal f_8_fu_2767_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_8_reg_4147 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_2773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_4152 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond12_fu_2761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_7_fu_2785_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_7_reg_4165 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal p_shl22_cast_fu_2807_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl22_cast_reg_4170 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond11_fu_2779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl23_cast_fu_2825_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl23_cast_reg_4175 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl24_cast_fu_2837_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl24_cast_reg_4180 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_37_fu_2841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_37_reg_4185 : STD_LOGIC_VECTOR (63 downto 0);
    signal colOutIdx_16_fu_2851_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_16_reg_4195 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal j_3_fu_2863_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_4203 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_150_fu_2869_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_reg_4208 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_fu_2857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_2900_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_119_reg_4214 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_121_fu_2910_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_121_reg_4220 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_137_reg_4226 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_3042_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_reg_4231 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_fu_3050_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_reg_4237 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal relu2ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_3_reg_4252 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal relu2ActivationMap_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_4_reg_4258 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_7_fu_3148_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_maxval_7_reg_4264 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tmp_132_reg_4286 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_fu_3215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_reg_4291 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_9_fu_3319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_9_reg_4299 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal k_13_fu_3331_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_13_reg_4307 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal tmp19_fu_3357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp19_reg_4312 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_3325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_9_fu_3369_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_9_reg_4320 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal tmp_84_fu_3375_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_reg_4325 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond6_fu_3363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_7_fu_3393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_7_reg_4333 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal tmp_107_fu_3413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_reg_4338 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_3387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool2ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal pool2ActivationMap_l_reg_4348 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal fv16_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal k_15_fu_3424_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_15_reg_4361 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal exitcond_i2_fu_3418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fv16_load_reg_4371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal k_21_fu_3446_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_21_reg_4379 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal tmp_35_fu_3452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_reg_4384 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_3440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_6_reg_4394 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal rowOutIdx_4_fu_3498_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_4_reg_4401 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal k_22_fu_3511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_22_reg_4409 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal tmp_81_fu_3517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_reg_4414 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_3505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_13_fu_3527_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal colOutIdx_13_reg_4422 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal exitcond2_fu_3521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal relu3ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal relu3ActivationMap_l_reg_4432 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal k_16_fu_3544_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_16_reg_4440 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal tmp_82_fu_3550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_reg_4445 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_3538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_14_fu_3560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal colOutIdx_14_reg_4453 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal exitcond_fu_3554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_relu3ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_relu3ActivationMap_3_reg_4463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal pool1ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool1ActivationMap_ce0 : STD_LOGIC;
    signal pool1ActivationMap_we0 : STD_LOGIC;
    signal pool1ActivationMap_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1ActivationMap_ce0 : STD_LOGIC;
    signal conv1ActivationMap_we0 : STD_LOGIC;
    signal relu1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal relu1ActivationMap_ce0 : STD_LOGIC;
    signal relu1ActivationMap_we0 : STD_LOGIC;
    signal relu1ActivationMap_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal relu1ActivationMap_ce1 : STD_LOGIC;
    signal fv10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv10_ce0 : STD_LOGIC;
    signal fv10_we0 : STD_LOGIC;
    signal fv10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fv11_ce0 : STD_LOGIC;
    signal fv11_we0 : STD_LOGIC;
    signal pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool2ActivationMap_ce0 : STD_LOGIC;
    signal pool2ActivationMap_we0 : STD_LOGIC;
    signal pool2ActivationMap_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2ActivationMap_ce0 : STD_LOGIC;
    signal conv2ActivationMap_we0 : STD_LOGIC;
    signal relu2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal relu2ActivationMap_ce0 : STD_LOGIC;
    signal relu2ActivationMap_we0 : STD_LOGIC;
    signal relu2ActivationMap_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal relu2ActivationMap_ce1 : STD_LOGIC;
    signal fv12_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fv12_ce0 : STD_LOGIC;
    signal fv12_we0 : STD_LOGIC;
    signal fv12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv13_ce0 : STD_LOGIC;
    signal fv13_we0 : STD_LOGIC;
    signal fv13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fv14_ce0 : STD_LOGIC;
    signal fv14_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_pool2ActivationMap_ce0 : STD_LOGIC;
    signal b_pool2ActivationMap_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fv15_ce0 : STD_LOGIC;
    signal fv15_we0 : STD_LOGIC;
    signal fv15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1ActivationMap_ce0 : STD_LOGIC;
    signal fc1ActivationMap_we0 : STD_LOGIC;
    signal fv16_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fv16_ce0 : STD_LOGIC;
    signal fv16_we0 : STD_LOGIC;
    signal relu3ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal relu3ActivationMap_ce0 : STD_LOGIC;
    signal relu3ActivationMap_we0 : STD_LOGIC;
    signal d_relu3ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_relu3ActivationMap_ce0 : STD_LOGIC;
    signal d_relu3ActivationMap_we0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_start : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_done : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_idle : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_ready : STD_LOGIC;
    signal grp_c_sum_fu_1189_x_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_c_sum_fu_1189_x_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_y_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_c_sum_fu_1189_y_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_y_we0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_f_sum_fu_1195_ap_start : STD_LOGIC;
    signal grp_f_sum_fu_1195_ap_done : STD_LOGIC;
    signal grp_f_sum_fu_1195_ap_idle : STD_LOGIC;
    signal grp_f_sum_fu_1195_ap_ready : STD_LOGIC;
    signal grp_f_sum_fu_1195_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_f_sum_fu_1195_x_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_1195_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_f_sum_fu_1195_y_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_1195_y_we0 : STD_LOGIC;
    signal grp_f_sum_fu_1195_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_d_sum_fu_1201_ap_start : STD_LOGIC;
    signal grp_d_sum_fu_1201_ap_done : STD_LOGIC;
    signal grp_d_sum_fu_1201_ap_idle : STD_LOGIC;
    signal grp_d_sum_fu_1201_ap_ready : STD_LOGIC;
    signal grp_d_sum_fu_1201_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_d_sum_fu_1201_x_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_1201_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_d_sum_fu_1201_y_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_1201_y_we0 : STD_LOGIC;
    signal grp_d_sum_fu_1201_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_g_sum_fu_1207_ap_start : STD_LOGIC;
    signal grp_g_sum_fu_1207_ap_done : STD_LOGIC;
    signal grp_g_sum_fu_1207_ap_idle : STD_LOGIC;
    signal grp_g_sum_fu_1207_ap_ready : STD_LOGIC;
    signal grp_g_sum_fu_1207_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_g_sum_fu_1207_x_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_1207_y_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_g_sum_fu_1207_y_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_1207_y_we0 : STD_LOGIC;
    signal grp_g_sum_fu_1207_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sum_fu_1213_ap_start : STD_LOGIC;
    signal grp_sum_fu_1213_ap_done : STD_LOGIC;
    signal grp_sum_fu_1213_ap_idle : STD_LOGIC;
    signal grp_sum_fu_1213_ap_ready : STD_LOGIC;
    signal grp_sum_fu_1213_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_fu_1213_x_ce0 : STD_LOGIC;
    signal grp_sum_fu_1213_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sum_fu_1213_y_ce0 : STD_LOGIC;
    signal grp_sum_fu_1213_y_we0 : STD_LOGIC;
    signal grp_sum_fu_1213_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_641 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond32_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_652 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond31_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond33_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_664 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_reg_675 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal k4_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx1_reg_698 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_phi_mux_y5_i_phi_fu_712_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y5_i_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_719 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul2_reg_741 : STD_LOGIC_VECTOR (12 downto 0);
    signal colOutIdx_1_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond28_fu_1538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_reg_763 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal invdar_reg_774 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_1690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_reg_785 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_796 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_1_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul4_reg_819 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_1_reg_830 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal j_reg_842 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal f_2_reg_853 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_2_reg_864 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond19_fu_2325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond21_fu_2275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_reg_876 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal k_2_reg_888 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_3_reg_899 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_1_reg_910 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_phi_mux_y3_i_phi_fu_924_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y3_i_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i1_reg_931 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_3_reg_942 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_4_reg_953 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_k_2_reg_964 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal invdar1_reg_975 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_2741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_3_reg_986 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_assign_5_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_3_reg_1009 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_3_reg_1021 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal j_1_reg_1033 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal exitcond10_fu_2845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_4_reg_1044 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal k_4_reg_1056 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_fu_3313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_6_reg_1067 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_3_reg_1078 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_phi_mux_y1_i_phi_fu_1092_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_i_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i2_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_5_reg_1110 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal k_6_reg_1121 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal ap_phi_mux_tmp_83_phi_fu_1136_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_7_reg_1144 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_7_reg_1155 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state176 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state176 : signal is "none";
    signal ap_phi_mux_tmp_89_phi_fu_1170_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_8_reg_1178 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_c_sum_fu_1189_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_f_sum_fu_1195_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal grp_d_sum_fu_1201_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_g_sum_fu_1207_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal grp_sum_fu_1213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_22_fu_1436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_1455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_1471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_2012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_2020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_6_cast_fu_2116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_2257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_fu_2519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_fu_2541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_2558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_2585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_2736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_fu_3055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_fu_3059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_7_cast_fu_3155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_3302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_3430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_3435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_fu_3533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_3566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_fu_282 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_2_fu_2128_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_3_fu_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_1_fu_2121_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_6_fu_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_5_fu_3166_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_7_fu_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_4_fu_3159_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_1246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_3_maxval_0_3_fu_2262_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal maxval_1_8_maxval_0_8_fu_3306_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal grp_fu_1219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal ap_CS_fsm_state167 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state167 : signal is "none";
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal ap_CS_fsm_state163 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state163 : signal is "none";
    signal grp_fu_1240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1243_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1252_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1259_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1422_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1431_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal colOutIdx1_cast_fu_1406_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_1441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_1476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_1488_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_1484_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_1496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_1500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_cast_fu_1506_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_1510_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_cast_fu_1520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_1562_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_1574_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_1570_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_1582_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_k_cast_fu_1592_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_1608_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_fu_1613_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_fu_1617_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_fu_1622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowOutIdx_to_int_fu_1631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_1634_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_1644_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_cast1_fu_1700_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_1716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_8_fu_1748_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_1756_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_1766_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_5_fu_1788_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl13_fu_1816_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl14_fu_1830_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl13_cast_fu_1826_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_1840_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_1844_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_fu_1850_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_cast_fu_1855_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl15_fu_1869_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl15_cast_fu_1877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_1902_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i_fu_1905_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_fu_1893_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast_fu_1919_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1923_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_140_i_i_i_fu_1937_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_57_fu_1929_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_i_i_i_cast_fu_1943_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_1947_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_1955_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_141_i_i_i_cast_fu_1963_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_1915_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_141_i_i_i_fu_1959_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_142_i_i_i_fu_1967_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_59_fu_1979_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_i_i_i_fu_1973_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_64_fu_1987_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_1991_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_cast_fu_2009_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_cast_fu_2017_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_maxval_to_int_fu_2025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_1_to_int_fu_2042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_2028_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_2038_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_2065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_2059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_2045_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_85_fu_2055_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs4_fu_2083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_2077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_2071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_2089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_2101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_maxval_6_cast6_fu_2113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i_fu_2145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_0_3_to_int_fu_2161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_3_to_int_fu_2179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_2165_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_2175_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_2203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_2197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_2183_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_2193_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_2221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_2215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_2209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_2227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_2233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_cast_fu_2244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_2247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_2252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_2239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl8_fu_2307_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_2315_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_2299_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_2_cast_fu_2337_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_69_fu_2353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_70_fu_2363_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl11_fu_2369_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_fu_2381_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl11_cast_fu_2377_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl12_cast_fu_2389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colOutIdx_3_cast_fu_2399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_80_fu_2415_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl17_fu_2421_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl18_fu_2433_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_cast_fu_2429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl18_cast_fu_2441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl19_fu_2451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl20_fu_2463_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl19_cast_fu_2459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl20_cast_fu_2471_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_k_1_cast1_fu_2485_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_2501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_cast_fu_2506_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_101_fu_2510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_101_cast_fu_2515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_k_1_cast_fu_2481_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_fu_2524_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_cast_fu_2529_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_104_cast_fu_2538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_2563_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_fu_2571_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_cast_fu_2576_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_2609_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_2617_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_2601_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_k_2_cast_fu_2647_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_fu_2663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_cast_fu_2668_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_51_fu_2672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rowOutIdx_7_to_int_fu_2682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_fu_2685_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_110_fu_2695_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs5_fu_2705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_2699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_2711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_2717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl16_fu_2799_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_12_fu_2791_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_78_fu_2811_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl21_fu_2817_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl22_fu_2829_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_fu_2873_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_fu_2883_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_2892_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_118_cast_fu_2888_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp14_fu_2905_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_124_fu_2915_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_138_fu_2943_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i2_fu_2946_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_2_fu_2934_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i2_cast_fu_2960_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_fu_2964_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_140_i_i_i2_fu_2978_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_140_fu_2970_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_i_i_i2_cast_fu_2984_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_fu_2988_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_cast_fu_2996_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_141_i_i_i2_cast_fu_3004_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i2_cast_fu_2956_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_141_i_i_i2_fu_3000_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_142_i_i_i2_fu_3008_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_142_fu_3020_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_i_i_i2_fu_3014_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_135_fu_3028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_136_fu_3032_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_cast_fu_2923_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_maxval_3_to_int_fu_3066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_4_to_int_fu_3083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_139_fu_3069_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_151_fu_3079_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs9_fu_3106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_3100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_141_fu_3086_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_152_fu_3096_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs10_fu_3124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs10_fu_3118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_fu_3112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_fu_3130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_fu_3136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_3142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_cast_cast_fu_3063_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_6_i_i_i2_fu_3183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_3188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_148_fu_3194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_149_fu_3200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_cast_fu_3212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_3206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_0_8_to_int_fu_3221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_8_to_int_fu_3238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_fu_3224_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_126_fu_3234_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs7_fu_3261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_3255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_3241_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_134_fu_3251_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs8_fu_3279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_3273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_3267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_130_fu_3285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_131_fu_3291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_fu_3297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl10_fu_3345_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl10_cast_fu_3353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_fu_3337_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_k_3_cast_fu_3383_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_fu_3399_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_cast_fu_3404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_106_fu_3408_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rowOutIdx_8_to_int_fu_3457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_fu_3460_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_123_fu_3470_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs6_fu_3480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_3474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_3486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_fu_3492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_20_fu_1766_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_70_fu_2363_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component c_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component f_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component d_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component g_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_xdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_yd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenetSynthMatlab_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pool1ActivationMap_U : component lenetSynthMatlab_cud
    generic map (
        DataWidth => 64,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool1ActivationMap_address0,
        ce0 => pool1ActivationMap_ce0,
        we0 => pool1ActivationMap_we0,
        d0 => pool1ActivationMap_d0,
        q0 => pool1ActivationMap_q0);

    conv1ActivationMap_U : component lenetSynthMatlab_dEe
    generic map (
        DataWidth => 64,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1ActivationMap_address0,
        ce0 => conv1ActivationMap_ce0,
        we0 => conv1ActivationMap_we0,
        d0 => grp_fu_1246_p1,
        q0 => conv1ActivationMap_q0);

    relu1ActivationMap_U : component lenetSynthMatlab_eOg
    generic map (
        DataWidth => 64,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu1ActivationMap_address0,
        ce0 => relu1ActivationMap_ce0,
        we0 => relu1ActivationMap_we0,
        d0 => rowOutIdx_1_reg_3760,
        q0 => relu1ActivationMap_q0,
        address1 => relu1ActivationMap_address1,
        ce1 => relu1ActivationMap_ce1,
        q1 => relu1ActivationMap_q1);

    fv10_U : component lenetSynthMatlab_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv10_address0,
        ce0 => fv10_ce0,
        we0 => fv10_we0,
        d0 => grp_fu_1234_p2,
        q0 => fv10_q0);

    fv11_U : component lenetSynthMatlab_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv11_address0,
        ce0 => fv11_ce0,
        we0 => fv11_we0,
        d0 => grp_sum_fu_1213_y_d0,
        q0 => fv11_q0);

    pool2ActivationMap_U : component lenetSynthMatlab_hbi
    generic map (
        DataWidth => 64,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool2ActivationMap_address0,
        ce0 => pool2ActivationMap_ce0,
        we0 => pool2ActivationMap_we0,
        d0 => pool2ActivationMap_d0,
        q0 => pool2ActivationMap_q0);

    conv2ActivationMap_U : component lenetSynthMatlab_ibs
    generic map (
        DataWidth => 64,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2ActivationMap_address0,
        ce0 => conv2ActivationMap_ce0,
        we0 => conv2ActivationMap_we0,
        d0 => grp_fu_1246_p1,
        q0 => conv2ActivationMap_q0);

    relu2ActivationMap_U : component lenetSynthMatlab_jbC
    generic map (
        DataWidth => 64,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu2ActivationMap_address0,
        ce0 => relu2ActivationMap_ce0,
        we0 => relu2ActivationMap_we0,
        d0 => rowOutIdx_2_reg_4112,
        q0 => relu2ActivationMap_q0,
        address1 => relu2ActivationMap_address1,
        ce1 => relu2ActivationMap_ce1,
        q1 => relu2ActivationMap_q1);

    fv12_U : component lenetSynthMatlab_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv12_address0,
        ce0 => fv12_ce0,
        we0 => fv12_we0,
        d0 => reg_1315,
        q0 => fv12_q0);

    fv13_U : component lenetSynthMatlab_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv13_address0,
        ce0 => fv13_ce0,
        we0 => fv13_we0,
        d0 => grp_c_sum_fu_1189_y_d0,
        q0 => fv13_q0);

    fv14_U : component lenetSynthMatlab_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv14_address0,
        ce0 => fv14_ce0,
        we0 => fv14_we0,
        d0 => grp_d_sum_fu_1201_y_d0,
        q0 => fv14_q0);

    b_pool2ActivationMap_U : component lenetSynthMatlab_ncg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_pool2ActivationMap_address0,
        ce0 => b_pool2ActivationMap_ce0,
        we0 => b_pool2ActivationMap_we0,
        d0 => reg_1315,
        q0 => b_pool2ActivationMap_q0);

    fv15_U : component lenetSynthMatlab_ocq
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv15_address0,
        ce0 => fv15_ce0,
        we0 => fv15_we0,
        d0 => grp_f_sum_fu_1195_y_d0,
        q0 => fv15_q0);

    fc1ActivationMap_U : component lenetSynthMatlab_pcA
    generic map (
        DataWidth => 64,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1ActivationMap_address0,
        ce0 => fc1ActivationMap_ce0,
        we0 => fc1ActivationMap_we0,
        d0 => grp_fu_1246_p1,
        q0 => fc1ActivationMap_q0);

    fv16_U : component lenetSynthMatlab_qcK
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv16_address0,
        ce0 => fv16_ce0,
        we0 => fv16_we0,
        d0 => grp_g_sum_fu_1207_y_d0,
        q0 => fv16_q0);

    relu3ActivationMap_U : component lenetSynthMatlab_pcA
    generic map (
        DataWidth => 64,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu3ActivationMap_address0,
        ce0 => relu3ActivationMap_ce0,
        we0 => relu3ActivationMap_we0,
        d0 => rowOutIdx_4_reg_4401,
        q0 => relu3ActivationMap_q0);

    d_relu3ActivationMap_U : component lenetSynthMatlab_sc4
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_relu3ActivationMap_address0,
        ce0 => d_relu3ActivationMap_ce0,
        we0 => d_relu3ActivationMap_we0,
        d0 => reg_1289,
        q0 => d_relu3ActivationMap_q0);

    grp_c_sum_fu_1189 : component c_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_c_sum_fu_1189_ap_start,
        ap_done => grp_c_sum_fu_1189_ap_done,
        ap_idle => grp_c_sum_fu_1189_ap_idle,
        ap_ready => grp_c_sum_fu_1189_ap_ready,
        x_address0 => grp_c_sum_fu_1189_x_address0,
        x_ce0 => grp_c_sum_fu_1189_x_ce0,
        x_q0 => fv12_q0,
        y_address0 => grp_c_sum_fu_1189_y_address0,
        y_ce0 => grp_c_sum_fu_1189_y_ce0,
        y_we0 => grp_c_sum_fu_1189_y_we0,
        y_d0 => grp_c_sum_fu_1189_y_d0,
        y_q0 => fv13_q0);

    grp_f_sum_fu_1195 : component f_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_f_sum_fu_1195_ap_start,
        ap_done => grp_f_sum_fu_1195_ap_done,
        ap_idle => grp_f_sum_fu_1195_ap_idle,
        ap_ready => grp_f_sum_fu_1195_ap_ready,
        x_address0 => grp_f_sum_fu_1195_x_address0,
        x_ce0 => grp_f_sum_fu_1195_x_ce0,
        x_q0 => b_pool2ActivationMap_q0,
        y_address0 => grp_f_sum_fu_1195_y_address0,
        y_ce0 => grp_f_sum_fu_1195_y_ce0,
        y_we0 => grp_f_sum_fu_1195_y_we0,
        y_d0 => grp_f_sum_fu_1195_y_d0,
        y_q0 => fv15_q0);

    grp_d_sum_fu_1201 : component d_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_d_sum_fu_1201_ap_start,
        ap_done => grp_d_sum_fu_1201_ap_done,
        ap_idle => grp_d_sum_fu_1201_ap_idle,
        ap_ready => grp_d_sum_fu_1201_ap_ready,
        x_address0 => grp_d_sum_fu_1201_x_address0,
        x_ce0 => grp_d_sum_fu_1201_x_ce0,
        x_q0 => fv13_q0,
        y_address0 => grp_d_sum_fu_1201_y_address0,
        y_ce0 => grp_d_sum_fu_1201_y_ce0,
        y_we0 => grp_d_sum_fu_1201_y_we0,
        y_d0 => grp_d_sum_fu_1201_y_d0,
        y_q0 => fv14_q0);

    grp_g_sum_fu_1207 : component g_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_g_sum_fu_1207_ap_start,
        ap_done => grp_g_sum_fu_1207_ap_done,
        ap_idle => grp_g_sum_fu_1207_ap_idle,
        ap_ready => grp_g_sum_fu_1207_ap_ready,
        x_address0 => grp_g_sum_fu_1207_x_address0,
        x_ce0 => grp_g_sum_fu_1207_x_ce0,
        x_q0 => fv15_q0,
        y_address0 => grp_g_sum_fu_1207_y_address0,
        y_ce0 => grp_g_sum_fu_1207_y_ce0,
        y_we0 => grp_g_sum_fu_1207_y_we0,
        y_d0 => grp_g_sum_fu_1207_y_d0,
        y_q0 => fv16_q0);

    grp_sum_fu_1213 : component sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sum_fu_1213_ap_start,
        ap_done => grp_sum_fu_1213_ap_done,
        ap_idle => grp_sum_fu_1213_ap_idle,
        ap_ready => grp_sum_fu_1213_ap_ready,
        x_address0 => grp_sum_fu_1213_x_address0,
        x_ce0 => grp_sum_fu_1213_x_ce0,
        x_q0 => fv10_q0,
        y_address0 => grp_sum_fu_1213_y_address0,
        y_ce0 => grp_sum_fu_1213_y_ce0,
        y_we0 => grp_sum_fu_1213_y_we0,
        y_d0 => grp_sum_fu_1213_y_d0,
        y_q0 => fv11_q0);

    lenetSynthMatlab_bkb_U17 : component lenetSynthMatlab_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1219_p0,
        din1 => grp_fu_1219_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1219_p2);

    lenetSynthMatlab_tde_U18 : component lenetSynthMatlab_tde
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1234_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p2);

    lenetSynthMatlab_udo_U19 : component lenetSynthMatlab_udo
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1240_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1240_p1);

    lenetSynthMatlab_vdy_U20 : component lenetSynthMatlab_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1243_p0,
        dout => grp_fu_1243_p1);

    lenetSynthMatlab_wdI_U21 : component lenetSynthMatlab_wdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_1289,
        dout => grp_fu_1246_p1);

    lenetSynthMatlab_xdS_U22 : component lenetSynthMatlab_xdS
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1252_p0,
        din1 => ap_const_lv64_3FF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_1252_p2);

    lenetSynthMatlab_yd2_U23 : component lenetSynthMatlab_yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_1259_p0,
        din1 => grp_fu_1259_p1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1259_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_c_sum_fu_1189_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_c_sum_fu_1189_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond18_fu_2341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                    grp_c_sum_fu_1189_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_c_sum_fu_1189_ap_ready = ap_const_logic_1)) then 
                    grp_c_sum_fu_1189_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_d_sum_fu_1201_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_d_sum_fu_1201_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                    grp_d_sum_fu_1201_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_d_sum_fu_1201_ap_ready = ap_const_logic_1)) then 
                    grp_d_sum_fu_1201_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_f_sum_fu_1195_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_f_sum_fu_1195_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond7_fu_3325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                    grp_f_sum_fu_1195_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_f_sum_fu_1195_ap_ready = ap_const_logic_1)) then 
                    grp_f_sum_fu_1195_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_g_sum_fu_1207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_g_sum_fu_1207_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
                    grp_g_sum_fu_1207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_g_sum_fu_1207_ap_ready = ap_const_logic_1)) then 
                    grp_g_sum_fu_1207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sum_fu_1213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sum_fu_1213_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond30_fu_1380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_sum_fu_1213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sum_fu_1213_ap_ready = ap_const_logic_1)) then 
                    grp_sum_fu_1213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_k_1_reg_910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_fu_2403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                b_k_1_reg_910 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                b_k_1_reg_910 <= b_k_8_reg_4013;
            end if; 
        end if;
    end process;

    b_k_2_reg_964_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_fu_2627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                b_k_2_reg_964 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                b_k_2_reg_964 <= b_k_6_reg_4090;
            end if; 
        end if;
    end process;

    b_k_3_reg_1078_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_3363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                b_k_3_reg_1078 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
                b_k_3_reg_1078 <= b_k_7_reg_4333;
            end if; 
        end if;
    end process;

    b_k_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond27_fu_1550_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                b_k_reg_763 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                b_k_reg_763 <= b_k_4_reg_3738;
            end if; 
        end if;
    end process;

    c_1_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                c_1_reg_830 <= colOutIdx_15_reg_3841;
            elsif (((exitcond24_fu_1736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                c_1_reg_830 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_2_reg_876_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                c_2_reg_876 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                c_2_reg_876 <= c_5_reg_3969;
            end if; 
        end if;
    end process;

    c_3_reg_1021_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                c_3_reg_1021 <= colOutIdx_16_reg_4195;
            elsif (((exitcond11_fu_2779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                c_3_reg_1021 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_reg_675_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond32_fu_1348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_reg_675 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                c_reg_675 <= c_4_reg_3615;
            end if; 
        end if;
    end process;

    colOutIdx1_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond30_fu_1380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                colOutIdx1_reg_698 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                colOutIdx1_reg_698 <= colOutIdx_2_reg_3646;
            end if; 
        end if;
    end process;

    colOutIdx_1_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond28_fu_1538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                colOutIdx_1_reg_752 <= ap_const_lv5_0;
            elsif (((exitcond26_fu_1596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                colOutIdx_1_reg_752 <= colOutIdx_reg_3725;
            end if; 
        end if;
    end process;

    colOutIdx_3_reg_899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16_fu_2489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                colOutIdx_3_reg_899 <= colOutIdx_10_reg_3995;
            elsif (((exitcond18_fu_2341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                colOutIdx_3_reg_899 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    colOutIdx_4_reg_953_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_fu_2651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                colOutIdx_4_reg_953 <= colOutIdx_5_reg_4077;
            elsif (((exitcond15_fu_2589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                colOutIdx_4_reg_953 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    colOutIdx_6_reg_1067_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_3387_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                colOutIdx_6_reg_1067 <= colOutIdx_9_reg_4320;
            elsif (((exitcond7_fu_3325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                colOutIdx_6_reg_1067 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    colOutIdx_7_reg_1144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                colOutIdx_7_reg_1144 <= colOutIdx_13_reg_4422;
            elsif (((exitcond3_fu_3505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state142))) then 
                colOutIdx_7_reg_1144 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    colOutIdx_8_reg_1178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state171)) then 
                colOutIdx_8_reg_1178 <= colOutIdx_14_reg_4453;
            elsif (((exitcond1_fu_3538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state160))) then 
                colOutIdx_8_reg_1178 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    f_1_reg_785_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond24_fu_1736_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                f_1_reg_785 <= f_6_reg_3793;
            elsif (((tmp_3_fu_1690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                f_1_reg_785 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_2_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                f_2_reg_853 <= f_7_reg_3948;
            elsif (((exitcond25_fu_1704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                f_2_reg_853 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_3_reg_986_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_2779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                f_3_reg_986 <= f_8_reg_4147;
            elsif (((tmp_17_fu_2741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                f_3_reg_986 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_4_reg_1044_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_fu_2761_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                f_4_reg_1044 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
                f_4_reg_1044 <= f_9_reg_4299;
            end if; 
        end if;
    end process;

    f_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond32_fu_1348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_reg_641 <= f_5_reg_3584;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_reg_641 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar1_reg_975_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond15_fu_2589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                invdar1_reg_975 <= ap_const_lv9_0;
            elsif (((tmp_17_fu_2741_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                invdar1_reg_975 <= indvarinc1_fu_2730_p2;
            end if; 
        end if;
    end process;

    invdar_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond28_fu_1538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                invdar_reg_774 <= ap_const_lv11_0;
            elsif (((tmp_3_fu_1690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                invdar_reg_774 <= indvarinc_fu_1679_p2;
            end if; 
        end if;
    end process;

    j_1_reg_1033_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_fu_2845_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                j_1_reg_1033 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                j_1_reg_1033 <= j_3_reg_4203;
            end if; 
        end if;
    end process;

    j_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                j_reg_842 <= j_2_reg_3860;
            elsif (((exitcond23_fu_1776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                j_reg_842 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k4_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond31_fu_1364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k4_reg_687 <= ap_const_lv3_0;
            elsif (((exitcond29_fu_1410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k4_reg_687 <= k_9_reg_3628;
            end if; 
        end if;
    end process;

    k_1_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_730 <= ap_const_lv5_0;
            elsif (((exitcond27_fu_1550_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                k_1_reg_730 <= k_reg_3717;
            end if; 
        end if;
    end process;

    k_2_reg_888_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19_fu_2325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                k_2_reg_888 <= ap_const_lv3_0;
            elsif (((exitcond17_fu_2403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                k_2_reg_888 <= k_14_reg_3977;
            end if; 
        end if;
    end process;

    k_3_reg_942_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond21_fu_2275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                k_3_reg_942 <= ap_const_lv4_0;
            elsif (((exitcond14_fu_2627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                k_3_reg_942 <= k_11_reg_4064;
            end if; 
        end if;
    end process;

    k_4_reg_1056_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_3313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                k_4_reg_1056 <= ap_const_lv3_0;
            elsif (((exitcond6_fu_3363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then 
                k_4_reg_1056 <= k_13_reg_4307;
            end if; 
        end if;
    end process;

    k_5_reg_1110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_3313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                k_5_reg_1110 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
                k_5_reg_1110 <= k_21_reg_4379;
            end if; 
        end if;
    end process;

    k_6_reg_1121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138))) then 
                k_6_reg_1121 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
                k_6_reg_1121 <= k_22_reg_4409;
            end if; 
        end if;
    end process;

    k_7_reg_1155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_3505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142))) then 
                k_7_reg_1155 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state176)) then 
                k_7_reg_1155 <= k_16_reg_4440;
            end if; 
        end if;
    end process;

    k_i1_reg_931_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                k_i1_reg_931 <= k_20_reg_4041;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                k_i1_reg_931 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_i2_reg_1099_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                k_i2_reg_1099 <= k_15_reg_4361;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                k_i2_reg_1099 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                k_i_reg_719 <= k_10_reg_3684;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                k_i_reg_719 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    maxval_1_6_fu_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                maxval_1_6_fu_290 <= maxval_1_5_fu_3166_p3;
            elsif (((tmp_17_fu_2741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                maxval_1_6_fu_290 <= reg_1296;
            end if; 
        end if;
    end process;

    maxval_1_7_fu_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                maxval_1_7_fu_294 <= maxval_1_4_fu_3159_p3;
            elsif (((tmp_17_fu_2741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                maxval_1_7_fu_294 <= reg_1300;
            end if; 
        end if;
    end process;

    phi_mul2_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul2_reg_741 <= ap_const_lv13_0;
            elsif (((exitcond27_fu_1550_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                phi_mul2_reg_741 <= next_mul3_reg_3709;
            end if; 
        end if;
    end process;

    phi_mul4_reg_819_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                phi_mul4_reg_819 <= next_mul5_reg_3813;
            elsif (((exitcond25_fu_1704_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                phi_mul4_reg_819 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_664_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_664 <= ap_const_lv13_0;
            elsif (((exitcond31_fu_1364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_664 <= next_mul_reg_3594;
            end if; 
        end if;
    end process;

    r_1_reg_808_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                r_1_reg_808 <= r_5_reg_3821;
            elsif (((exitcond25_fu_1704_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                r_1_reg_808 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_2_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond21_fu_2275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                r_2_reg_864 <= ap_const_lv4_0;
            elsif (((exitcond19_fu_2325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                r_2_reg_864 <= r_6_reg_3956;
            end if; 
        end if;
    end process;

    r_3_reg_1009_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                r_3_reg_1009 <= r_7_reg_4165;
            elsif (((exitcond12_fu_2761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                r_3_reg_1009 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_reg_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_reg_652 <= ap_const_lv5_0;
            elsif (((exitcond31_fu_1364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_reg_652 <= r_4_reg_3602;
            end if; 
        end if;
    end process;

    tmp_83_reg_1132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
                tmp_83_reg_1132 <= grp_fu_1219_p2;
            elsif (((exitcond3_fu_3505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state142))) then 
                tmp_83_reg_1132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_89_reg_1166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state171)) then 
                tmp_89_reg_1166 <= grp_fu_1219_p2;
            elsif (((exitcond1_fu_3538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state160))) then 
                tmp_89_reg_1166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_assign_5_reg_997_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                x_assign_5_reg_997 <= grp_fu_1252_p2;
            elsif (((exitcond12_fu_2761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                x_assign_5_reg_997 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    x_assign_reg_796_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                x_assign_reg_796 <= grp_fu_1252_p2;
            elsif (((exitcond25_fu_1704_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                x_assign_reg_796 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    y1_i_reg_1089_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                y1_i_reg_1089 <= grp_fu_1219_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                y1_i_reg_1089 <= fv16_q0;
            end if; 
        end if;
    end process;

    y3_i_reg_921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                y3_i_reg_921 <= grp_fu_1219_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                y3_i_reg_921 <= fv14_q0;
            end if; 
        end if;
    end process;

    y5_i_reg_709_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                y5_i_reg_709 <= grp_fu_1219_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                y5_i_reg_709 <= fv11_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                b_k_4_reg_3738 <= b_k_4_fu_1602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond23_fu_1776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    b_k_5_cast_reg_3846(4 downto 1) <= b_k_5_cast_fu_1796_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                b_k_6_reg_4090 <= b_k_6_fu_2657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                b_k_7_reg_4333 <= b_k_7_fu_3393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                b_k_8_reg_4013 <= b_k_8_fu_2495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                b_maxval_1_reg_3909 <= relu1ActivationMap_q1;
                b_maxval_reg_3903 <= relu1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                b_maxval_3_reg_4252 <= relu2ActivationMap_q0;
                b_maxval_4_reg_4258 <= relu2ActivationMap_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                b_maxval_6_reg_3915 <= b_maxval_6_fu_2107_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                b_maxval_7_reg_4264 <= b_maxval_7_fu_3148_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_4_reg_3615 <= c_4_fu_1370_p2;
                    c_cast1_reg_3607(4 downto 0) <= c_cast1_fu_1360_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                c_5_reg_3969 <= c_5_fu_2331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                colOutIdx_10_reg_3995 <= colOutIdx_10_fu_2409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state143)) then
                colOutIdx_13_reg_4422 <= colOutIdx_13_fu_3527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state161)) then
                colOutIdx_14_reg_4453 <= colOutIdx_14_fu_3560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                colOutIdx_15_reg_3841 <= colOutIdx_15_fu_1782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                colOutIdx_16_reg_4195 <= colOutIdx_16_fu_2851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                colOutIdx_2_reg_3646 <= colOutIdx_2_fu_1416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                colOutIdx_5_reg_4077 <= colOutIdx_5_fu_2633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                colOutIdx_9_reg_4320 <= colOutIdx_9_fu_3369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                colOutIdx_reg_3725 <= colOutIdx_fu_1556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state162)) then
                d_relu3ActivationMap_3_reg_4463 <= d_relu3ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                    f_1_cast_reg_3785(2 downto 0) <= f_1_cast_fu_1696_p1(2 downto 0);
                f_6_reg_3793 <= f_6_fu_1710_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                    f_2_cast_reg_3940(4 downto 0) <= f_2_cast_fu_2271_p1(4 downto 0);
                f_7_reg_3948 <= f_7_fu_2281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                    f_3_cast_reg_4139(4 downto 0) <= f_3_cast_fu_2757_p1(4 downto 0);
                f_8_reg_4147 <= f_8_fu_2767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_5_reg_3584 <= f_5_fu_1332_p2;
                    f_cast_reg_3576(2 downto 0) <= f_cast_fu_1322_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                f_9_reg_4299 <= f_9_fu_3319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                fv11_load_reg_3699 <= fv11_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                fv14_load_reg_4056 <= fv14_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then
                fv16_load_reg_4371 <= fv16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                inputImg_load_reg_3661 <= inputImg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                j_2_reg_3860 <= j_2_fu_1810_p2;
                tmp_28_reg_3851 <= tmp_28_fu_1800_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                j_3_reg_4203 <= j_3_fu_2863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    k4_cast_reg_3620(2 downto 0) <= k4_cast_fu_1376_p1(2 downto 0);
                k_9_reg_3628 <= k_9_fu_1386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                k_10_reg_3684 <= k_10_fu_1465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                k_11_reg_4064 <= k_11_fu_2595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                k_13_reg_4307 <= k_13_fu_3331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                k_14_reg_3977 <= k_14_fu_2347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then
                k_15_reg_4361 <= k_15_fu_3424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state160)) then
                k_16_reg_4440 <= k_16_fu_3544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                k_20_reg_4041 <= k_20_fu_2552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state138)) then
                k_21_reg_4379 <= k_21_fu_3446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state142)) then
                k_22_reg_4409 <= k_22_fu_3511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                k_reg_3717 <= k_fu_1544_p2;
                next_mul3_reg_3709 <= next_mul3_fu_1532_p2;
                    phi_mul2_cast_reg_3704(12 downto 0) <= phi_mul2_cast_fu_1528_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                maxval_1_3_fu_286 <= maxval_1_1_fu_2121_p3;
                maxval_1_fu_282 <= maxval_1_2_fu_2128_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                next_mul5_reg_3813 <= next_mul5_fu_1730_p2;
                    phi_mul4_cast_reg_3808(12 downto 0) <= phi_mul4_cast_fu_1726_p1(12 downto 0);
                r_5_reg_3821 <= r_5_fu_1742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                next_mul_reg_3594 <= next_mul_fu_1342_p2;
                    phi_mul_cast_reg_3589(12 downto 0) <= phi_mul_cast_fu_1338_p1(12 downto 0);
                r_4_reg_3602 <= r_4_fu_1354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond22_fu_1804_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                p_Val2_2_reg_3887 <= p_Val2_2_fu_2001_p3;
                    tmp_44_reg_3877(7 downto 1) <= tmp_44_fu_1881_p2(7 downto 1);
                tmp_49_reg_3882 <= p_Val2_s_reg_3831(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                p_Val2_6_reg_3925 <= p_Val2_6_fu_2150_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_2857_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                p_Val2_9_reg_4231 <= p_Val2_9_fu_3042_p3;
                tmp16_reg_4237 <= tmp16_fu_3050_p2;
                tmp_137_reg_4226 <= p_Val2_s_37_reg_4185(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_2779_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                p_Val2_s_37_reg_4185 <= p_Val2_s_37_fu_2841_p1;
                    p_shl22_cast_reg_4170(8 downto 6) <= p_shl22_cast_fu_2807_p1(8 downto 6);
                    p_shl23_cast_reg_4175(10 downto 8) <= p_shl23_cast_fu_2825_p1(10 downto 8);
                    p_shl24_cast_reg_4180(8 downto 6) <= p_shl24_cast_fu_2837_p1(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond24_fu_1736_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                p_Val2_s_reg_3831 <= p_Val2_s_fu_1772_p1;
                    tmp_20_reg_3826(13 downto 3) <= tmp_20_fu_1766_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond30_fu_1380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    p_shl6_reg_3638(4 downto 2) <= p_shl6_fu_1398_p3(4 downto 2);
                tmp_18_reg_3633 <= tmp_18_fu_1392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                pool1ActivationMap_l_reg_4028 <= pool1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state114)) then
                pool2ActivationMap_l_reg_4348 <= pool2ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                r_6_reg_3956 <= r_6_fu_2293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                r_7_reg_4165 <= r_7_fu_2785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state175) or (ap_const_logic_1 = ap_CS_fsm_state158) or (ap_const_logic_1 = ap_CS_fsm_state136) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_1289 <= grp_fu_1219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
                reg_1296 <= maxval_1_fu_282;
                reg_1300 <= maxval_1_3_fu_286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state64))) then
                reg_1310 <= grp_fu_1243_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state166) or (ap_const_logic_1 = ap_CS_fsm_state149) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state68))) then
                reg_1315 <= grp_fu_1234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state144)) then
                relu3ActivationMap_l_reg_4432 <= relu3ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                rowOutIdx_1_reg_3760 <= rowOutIdx_1_fu_1672_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                rowOutIdx_2_reg_4112 <= rowOutIdx_2_fu_2723_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state140)) then
                rowOutIdx_4_reg_4401 <= rowOutIdx_4_fu_3498_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                rowOutIdx_5_reg_4105 <= conv2ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state139)) then
                rowOutIdx_6_reg_4394 <= fc1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                rowOutIdx_reg_3753 <= conv1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_3325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    tmp19_reg_4312(8 downto 4) <= tmp19_fu_3357_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond15_fu_2589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    tmp6_reg_4069(10 downto 5) <= tmp6_fu_2621_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    tmp9_reg_3961(10 downto 5) <= tmp9_fu_2319_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16_fu_2489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                tmp_104_reg_4023 <= tmp_104_fu_2533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_3387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    tmp_107_reg_4338(8 downto 0) <= tmp_107_fu_3413_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_2857_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                tmp_119_reg_4214 <= tmp_119_fu_2900_p2;
                tmp_121_reg_4220 <= tmp_121_fu_2910_p2;
                tmp_150_reg_4208 <= tmp_150_fu_2869_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                tmp_127_reg_4291 <= tmp_127_fu_3215_p2;
                tmp_132_reg_4286 <= grp_fu_1259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_1459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                tmp_15_reg_3694 <= tmp_15_fu_1515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond29_fu_1410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_23_reg_3656 <= tmp_23_fu_1446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_26_reg_3671 <= grp_fu_1240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_fu_2627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    tmp_29_reg_4082(7 downto 4) <= tmp_29_fu_2639_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_fu_2761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                tmp_33_reg_4152 <= tmp_33_fu_2773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state138))) then
                    tmp_35_reg_4384(6 downto 0) <= tmp_35_fu_3452_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                tmp_39_reg_3930 <= grp_fu_1259_p2;
                tmp_60_reg_3935 <= tmp_60_fu_2156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond22_fu_1804_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                tmp_46_reg_3865 <= tmp_46_fu_1859_p2;
                tmp_50_reg_3871 <= tmp_50_fu_1864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond27_fu_1550_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    tmp_4_reg_3730(8 downto 1) <= tmp_4_fu_1586_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_fu_2651_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    tmp_52_reg_4095(10 downto 0) <= tmp_52_fu_2677_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond25_fu_1704_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                tmp_5_cast_reg_3798 <= tmp_5_cast_fu_1722_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18_fu_2341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    tmp_70_reg_3982(11 downto 2) <= tmp_70_fu_2363_p2(11 downto 2);
                    tmp_74_reg_3987(8 downto 1) <= tmp_74_fu_2393_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_2546_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                tmp_75_reg_4051 <= tmp_75_fu_2580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_3505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state142))) then
                    tmp_81_reg_4414(6 downto 0) <= tmp_81_fu_3517_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_3538_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state160))) then
                    tmp_82_reg_4445(3 downto 0) <= tmp_82_fu_3550_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_3363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    tmp_84_reg_4325(6 downto 4) <= tmp_84_fu_3375_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_fu_2403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    tmp_86_reg_4000(7 downto 1) <= tmp_86_fu_2445_p2(7 downto 1);
                    tmp_87_reg_4005(6 downto 1) <= tmp_87_fu_2475_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond26_fu_1596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    tmp_8_reg_3743(31 downto 0) <= tmp_8_fu_1626_p1(31 downto 0);
            end if;
        end if;
    end process;
    f_cast_reg_3576(13 downto 3) <= "00000000000";
    phi_mul_cast_reg_3589(13) <= '0';
    c_cast1_reg_3607(9 downto 5) <= "00000";
    k4_cast_reg_3620(4 downto 3) <= "00";
    p_shl6_reg_3638(1 downto 0) <= "00";
    phi_mul2_cast_reg_3704(13) <= '0';
    tmp_4_reg_3730(0) <= '0';
    tmp_8_reg_3743(63 downto 32) <= "00000000000000000000000000000000";
    f_1_cast_reg_3785(8 downto 3) <= "000000";
    phi_mul4_cast_reg_3808(13) <= '0';
    tmp_20_reg_3826(2 downto 0) <= "000";
    b_k_5_cast_reg_3846(0) <= '0';
    b_k_5_cast_reg_3846(7 downto 5) <= "000";
    tmp_44_reg_3877(0) <= '0';
    f_2_cast_reg_3940(7 downto 5) <= "000";
    tmp9_reg_3961(4 downto 0) <= "00000";
    tmp_70_reg_3982(1 downto 0) <= "00";
    tmp_74_reg_3987(0) <= '0';
    tmp_86_reg_4000(0) <= '0';
    tmp_87_reg_4005(0) <= '0';
    tmp6_reg_4069(4 downto 0) <= "00000";
    tmp_29_reg_4082(3 downto 0) <= "0000";
    tmp_52_reg_4095(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    f_3_cast_reg_4139(7 downto 5) <= "000";
    p_shl22_cast_reg_4170(5 downto 0) <= "000000";
    p_shl22_cast_reg_4170(10 downto 9) <= "00";
    p_shl23_cast_reg_4175(7 downto 0) <= "10000000";
    p_shl23_cast_reg_4175(11) <= '0';
    p_shl24_cast_reg_4180(5 downto 0) <= "100000";
    p_shl24_cast_reg_4180(11 downto 9) <= "000";
    tmp19_reg_4312(3 downto 0) <= "0000";
    tmp_84_reg_4325(3 downto 0) <= "0000";
    tmp_107_reg_4338(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_35_reg_4384(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_81_reg_4414(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_82_reg_4445(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state40, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond30_fu_1380_p2, ap_CS_fsm_state6, exitcond29_fu_1410_p2, ap_CS_fsm_state21, exitcond_i_fu_1459_p2, ap_CS_fsm_state33, ap_CS_fsm_state34, exitcond27_fu_1550_p2, ap_CS_fsm_state35, exitcond26_fu_1596_p2, ap_CS_fsm_state39, exitcond25_fu_1704_p2, ap_CS_fsm_state41, exitcond24_fu_1736_p2, ap_CS_fsm_state42, exitcond23_fu_1776_p2, ap_CS_fsm_state43, exitcond22_fu_1804_p2, ap_CS_fsm_state57, ap_CS_fsm_state58, exitcond20_fu_2287_p2, ap_CS_fsm_state59, ap_CS_fsm_state60, exitcond18_fu_2341_p2, ap_CS_fsm_state61, exitcond17_fu_2403_p2, ap_CS_fsm_state62, exitcond16_fu_2489_p2, ap_CS_fsm_state75, exitcond_i1_fu_2546_p2, ap_CS_fsm_state87, exitcond15_fu_2589_p2, ap_CS_fsm_state88, exitcond14_fu_2627_p2, ap_CS_fsm_state89, exitcond13_fu_2651_p2, ap_CS_fsm_state93, ap_CS_fsm_state94, exitcond12_fu_2761_p2, ap_CS_fsm_state95, exitcond11_fu_2779_p2, ap_CS_fsm_state96, ap_CS_fsm_state97, exitcond9_fu_2857_p2, ap_CS_fsm_state110, ap_CS_fsm_state111, exitcond7_fu_3325_p2, ap_CS_fsm_state112, exitcond6_fu_3363_p2, ap_CS_fsm_state113, exitcond5_fu_3387_p2, ap_CS_fsm_state126, exitcond_i2_fu_3418_p2, ap_CS_fsm_state138, exitcond4_fu_3440_p2, ap_CS_fsm_state142, exitcond3_fu_3505_p2, ap_CS_fsm_state143, exitcond2_fu_3521_p2, ap_CS_fsm_state160, exitcond1_fu_3538_p2, ap_CS_fsm_state161, exitcond_fu_3554_p2, grp_c_sum_fu_1189_ap_done, grp_f_sum_fu_1195_ap_done, grp_d_sum_fu_1201_ap_done, grp_g_sum_fu_1207_ap_done, grp_sum_fu_1213_ap_done, exitcond32_fu_1348_p2, exitcond31_fu_1364_p2, exitcond33_fu_1326_p2, exitcond28_fu_1538_p2, tmp_3_fu_1690_p2, exitcond19_fu_2325_p2, exitcond21_fu_2275_p2, tmp_17_fu_2741_p2, exitcond10_fu_2845_p2, exitcond8_fu_3313_p2, ap_CS_fsm_state70, ap_CS_fsm_state121, ap_CS_fsm_state72, ap_CS_fsm_state123, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond33_fu_1326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond32_fu_1348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond31_fu_1364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond30_fu_1380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond29_fu_1410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_sum_fu_1213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((exitcond_i_fu_1459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state33 => 
                if (((exitcond28_fu_1538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((exitcond27_fu_1550_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((exitcond26_fu_1596_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state39 => 
                if (((tmp_3_fu_1690_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((exitcond25_fu_1704_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((exitcond24_fu_1736_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((exitcond23_fu_1776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state43 => 
                if (((exitcond22_fu_1804_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state57 => 
                if (((exitcond21_fu_2275_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state58 => 
                if (((exitcond20_fu_2287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                if (((exitcond19_fu_2325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                if (((exitcond18_fu_2341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state61 => 
                if (((exitcond17_fu_2403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                if (((exitcond16_fu_2489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_c_sum_fu_1189_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_d_sum_fu_1201_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((exitcond_i1_fu_2546_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state87 => 
                if (((exitcond15_fu_2589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state88 => 
                if (((exitcond14_fu_2627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                if (((exitcond13_fu_2651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state93 => 
                if (((tmp_17_fu_2741_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                if (((exitcond12_fu_2761_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                if (((exitcond11_fu_2779_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                if (((exitcond10_fu_2845_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state97 => 
                if (((exitcond9_fu_2857_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state110 => 
                if (((exitcond8_fu_3313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state138;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state111 => 
                if (((exitcond7_fu_3325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state112 => 
                if (((exitcond6_fu_3363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state112))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state113 => 
                if (((exitcond5_fu_3387_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state113))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state121 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state121) and (grp_f_sum_fu_1195_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state123) and (grp_g_sum_fu_1207_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state124;
                else
                    ap_NS_fsm <= ap_ST_fsm_state123;
                end if;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                if (((exitcond_i2_fu_3418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state126))) then
                    ap_NS_fsm <= ap_ST_fsm_state133;
                else
                    ap_NS_fsm <= ap_ST_fsm_state127;
                end if;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state138 => 
                if (((exitcond4_fu_3440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state138))) then
                    ap_NS_fsm <= ap_ST_fsm_state142;
                else
                    ap_NS_fsm <= ap_ST_fsm_state139;
                end if;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state142 => 
                if (((exitcond3_fu_3505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state142))) then
                    ap_NS_fsm <= ap_ST_fsm_state160;
                else
                    ap_NS_fsm <= ap_ST_fsm_state143;
                end if;
            when ap_ST_fsm_state143 => 
                if (((exitcond2_fu_3521_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state143))) then
                    ap_NS_fsm <= ap_ST_fsm_state155;
                else
                    ap_NS_fsm <= ap_ST_fsm_state144;
                end if;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state160 => 
                if (((exitcond1_fu_3538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state160))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state161;
                end if;
            when ap_ST_fsm_state161 => 
                if (((exitcond_fu_3554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state161))) then
                    ap_NS_fsm <= ap_ST_fsm_state172;
                else
                    ap_NS_fsm <= ap_ST_fsm_state162;
                end if;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                ap_NS_fsm <= ap_ST_fsm_state174;
            when ap_ST_fsm_state174 => 
                ap_NS_fsm <= ap_ST_fsm_state175;
            when ap_ST_fsm_state175 => 
                ap_NS_fsm <= ap_ST_fsm_state176;
            when ap_ST_fsm_state176 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state154 <= ap_CS_fsm(153);
    ap_CS_fsm_state158 <= ap_CS_fsm(157);
    ap_CS_fsm_state159 <= ap_CS_fsm(158);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state162 <= ap_CS_fsm(161);
    ap_CS_fsm_state163 <= ap_CS_fsm(162);
    ap_CS_fsm_state166 <= ap_CS_fsm(165);
    ap_CS_fsm_state167 <= ap_CS_fsm(166);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state171 <= ap_CS_fsm(170);
    ap_CS_fsm_state175 <= ap_CS_fsm(174);
    ap_CS_fsm_state176 <= ap_CS_fsm(175);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_CS_fsm_state160, exitcond1_fu_3538_p2)
    begin
        if (((exitcond1_fu_3538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state160))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_tmp_83_phi_fu_1136_p4 <= tmp_83_reg_1132;
    ap_phi_mux_tmp_89_phi_fu_1170_p4 <= tmp_89_reg_1166;
    ap_phi_mux_y1_i_phi_fu_1092_p4 <= y1_i_reg_1089;
    ap_phi_mux_y3_i_phi_fu_924_p4 <= y3_i_reg_921;
    ap_phi_mux_y5_i_phi_fu_712_p4 <= y5_i_reg_709;

    ap_ready_assign_proc : process(ap_CS_fsm_state160, exitcond1_fu_3538_p2)
    begin
        if (((exitcond1_fu_3538_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state160))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_k_1_cast1_fu_2485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_1_reg_910),8));
    b_k_1_cast_fu_2481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_1_reg_910),7));
    b_k_2_cast_fu_2647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_2_reg_964),8));
    b_k_3_cast_fu_3383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_3_reg_1078),7));
    b_k_4_fu_1602_p2 <= std_logic_vector(unsigned(b_k_reg_763) + unsigned(ap_const_lv3_1));
    b_k_5_cast_fu_1796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_5_fu_1788_p3),8));
    b_k_5_fu_1788_p3 <= (c_1_reg_830 & ap_const_lv1_0);
    b_k_6_fu_2657_p2 <= std_logic_vector(unsigned(b_k_2_reg_964) + unsigned(ap_const_lv5_1));
    b_k_7_fu_3393_p2 <= std_logic_vector(unsigned(b_k_3_reg_1078) + unsigned(ap_const_lv5_1));
    b_k_8_fu_2495_p2 <= std_logic_vector(unsigned(b_k_1_reg_910) + unsigned(ap_const_lv3_1));
    b_k_cast_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_reg_763),9));
    b_maxval_1_to_int_fu_2042_p1 <= b_maxval_1_reg_3909;
    b_maxval_3_to_int_fu_3066_p1 <= b_maxval_3_reg_4252;
    b_maxval_4_to_int_fu_3083_p1 <= b_maxval_4_reg_4258;
        b_maxval_6_cast6_fu_2113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_maxval_6_reg_3915),32));

    b_maxval_6_cast_fu_2116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_maxval_6_cast6_fu_2113_p1),64));
    b_maxval_6_fu_2107_p3 <= 
        tmp_50_reg_3871 when (tmp_77_fu_2101_p2(0) = '1') else 
        tmp_46_reg_3865;
    b_maxval_7_cast_fu_3155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_maxval_7_reg_4264),64));
    b_maxval_7_fu_3148_p3 <= 
        tmp_121_reg_4220 when (tmp_147_fu_3142_p2(0) = '1') else 
        tmp_120_cast_cast_fu_3063_p1;
    b_maxval_to_int_fu_2025_p1 <= b_maxval_reg_3903;

    b_pool2ActivationMap_address0_assign_proc : process(tmp_107_reg_4338, grp_f_sum_fu_1195_x_address0, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            b_pool2ActivationMap_address0 <= tmp_107_reg_4338(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            b_pool2ActivationMap_address0 <= grp_f_sum_fu_1195_x_address0;
        else 
            b_pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_pool2ActivationMap_ce0_assign_proc : process(grp_f_sum_fu_1195_x_ce0, ap_CS_fsm_state120, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            b_pool2ActivationMap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            b_pool2ActivationMap_ce0 <= grp_f_sum_fu_1195_x_ce0;
        else 
            b_pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            b_pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            b_pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_4_fu_1370_p2 <= std_logic_vector(unsigned(c_reg_675) + unsigned(ap_const_lv5_1));
    c_5_fu_2331_p2 <= std_logic_vector(unsigned(c_2_reg_876) + unsigned(ap_const_lv4_1));
    c_cast1_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_675),10));
    colOutIdx1_cast_fu_1406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx1_reg_698),5));
    colOutIdx_10_fu_2409_p2 <= std_logic_vector(unsigned(colOutIdx_3_reg_899) + unsigned(ap_const_lv3_1));
    colOutIdx_13_fu_3527_p2 <= std_logic_vector(unsigned(colOutIdx_7_reg_1144) + unsigned(ap_const_lv7_1));
    colOutIdx_14_fu_3560_p2 <= std_logic_vector(unsigned(colOutIdx_8_reg_1178) + unsigned(ap_const_lv7_1));
    colOutIdx_15_fu_1782_p2 <= std_logic_vector(unsigned(c_1_reg_830) + unsigned(ap_const_lv4_1));
    colOutIdx_16_fu_2851_p2 <= std_logic_vector(unsigned(c_3_reg_1021) + unsigned(ap_const_lv3_1));
    colOutIdx_2_fu_1416_p2 <= std_logic_vector(unsigned(colOutIdx1_reg_698) + unsigned(ap_const_lv3_1));
    colOutIdx_3_cast_fu_2399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_3_reg_899),4));
    colOutIdx_5_fu_2633_p2 <= std_logic_vector(unsigned(colOutIdx_4_reg_953) + unsigned(ap_const_lv4_1));
    colOutIdx_9_fu_3369_p2 <= std_logic_vector(unsigned(colOutIdx_6_reg_1067) + unsigned(ap_const_lv3_1));
    colOutIdx_fu_1556_p2 <= std_logic_vector(unsigned(colOutIdx_1_reg_752) + unsigned(ap_const_lv5_1));

    conv1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state35, tmp_8_fu_1626_p1, ap_CS_fsm_state32, tmp_16_fu_1523_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            conv1ActivationMap_address0 <= tmp_8_fu_1626_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            conv1ActivationMap_address0 <= tmp_16_fu_1523_p1(13 - 1 downto 0);
        else 
            conv1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            conv1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            conv1ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state89, tmp_52_fu_2677_p1, ap_CS_fsm_state86, tmp_76_fu_2585_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            conv2ActivationMap_address0 <= tmp_52_fu_2677_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            conv2ActivationMap_address0 <= tmp_76_fu_2585_p1(11 - 1 downto 0);
        else 
            conv2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            conv2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            conv2ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_relu3ActivationMap_address0_assign_proc : process(tmp_81_reg_4414, ap_CS_fsm_state161, ap_CS_fsm_state159, tmp_96_fu_3566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            d_relu3ActivationMap_address0 <= tmp_96_fu_3566_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
            d_relu3ActivationMap_address0 <= tmp_81_reg_4414(7 - 1 downto 0);
        else 
            d_relu3ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    d_relu3ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state161, ap_CS_fsm_state159)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state159) or (ap_const_logic_1 = ap_CS_fsm_state161))) then 
            d_relu3ActivationMap_ce0 <= ap_const_logic_1;
        else 
            d_relu3ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_relu3ActivationMap_we0_assign_proc : process(ap_CS_fsm_state159)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
            d_relu3ActivationMap_we0 <= ap_const_logic_1;
        else 
            d_relu3ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_2845_p2 <= "1" when (c_3_reg_1021 = ap_const_lv3_5) else "0";
    exitcond11_fu_2779_p2 <= "1" when (r_3_reg_1009 = ap_const_lv3_5) else "0";
    exitcond12_fu_2761_p2 <= "1" when (f_3_reg_986 = ap_const_lv5_10) else "0";
    exitcond13_fu_2651_p2 <= "1" when (b_k_2_reg_964 = ap_const_lv5_10) else "0";
    exitcond14_fu_2627_p2 <= "1" when (colOutIdx_4_reg_953 = ap_const_lv4_A) else "0";
    exitcond15_fu_2589_p2 <= "1" when (k_3_reg_942 = ap_const_lv4_A) else "0";
    exitcond16_fu_2489_p2 <= "1" when (b_k_1_reg_910 = ap_const_lv3_6) else "0";
    exitcond17_fu_2403_p2 <= "1" when (colOutIdx_3_reg_899 = ap_const_lv3_5) else "0";
    exitcond18_fu_2341_p2 <= "1" when (k_2_reg_888 = ap_const_lv3_5) else "0";
    exitcond19_fu_2325_p2 <= "1" when (c_2_reg_876 = ap_const_lv4_A) else "0";
    exitcond1_fu_3538_p2 <= "1" when (k_7_reg_1155 = ap_const_lv4_A) else "0";
    exitcond20_fu_2287_p2 <= "1" when (r_2_reg_864 = ap_const_lv4_A) else "0";
    exitcond21_fu_2275_p2 <= "1" when (f_2_reg_853 = ap_const_lv5_10) else "0";
    exitcond22_fu_1804_p2 <= "1" when (j_reg_842 = ap_const_lv2_2) else "0";
    exitcond23_fu_1776_p2 <= "1" when (c_1_reg_830 = ap_const_lv4_E) else "0";
    exitcond24_fu_1736_p2 <= "1" when (r_1_reg_808 = ap_const_lv4_E) else "0";
    exitcond25_fu_1704_p2 <= "1" when (f_1_reg_785 = ap_const_lv3_6) else "0";
    exitcond26_fu_1596_p2 <= "1" when (b_k_reg_763 = ap_const_lv3_6) else "0";
    exitcond27_fu_1550_p2 <= "1" when (colOutIdx_1_reg_752 = ap_const_lv5_1C) else "0";
    exitcond28_fu_1538_p2 <= "1" when (k_1_reg_730 = ap_const_lv5_1C) else "0";
    exitcond29_fu_1410_p2 <= "1" when (colOutIdx1_reg_698 = ap_const_lv3_5) else "0";
    exitcond2_fu_3521_p2 <= "1" when (colOutIdx_7_reg_1144 = ap_const_lv7_78) else "0";
    exitcond30_fu_1380_p2 <= "1" when (k4_reg_687 = ap_const_lv3_5) else "0";
    exitcond31_fu_1364_p2 <= "1" when (c_reg_675 = ap_const_lv5_1C) else "0";
    exitcond32_fu_1348_p2 <= "1" when (r_reg_652 = ap_const_lv5_1C) else "0";
    exitcond33_fu_1326_p2 <= "1" when (f_reg_641 = ap_const_lv3_6) else "0";
    exitcond3_fu_3505_p2 <= "1" when (k_6_reg_1121 = ap_const_lv7_54) else "0";
    exitcond4_fu_3440_p2 <= "1" when (k_5_reg_1110 = ap_const_lv7_78) else "0";
    exitcond5_fu_3387_p2 <= "1" when (b_k_3_reg_1078 = ap_const_lv5_10) else "0";
    exitcond6_fu_3363_p2 <= "1" when (colOutIdx_6_reg_1067 = ap_const_lv3_5) else "0";
    exitcond7_fu_3325_p2 <= "1" when (k_4_reg_1056 = ap_const_lv3_5) else "0";
    exitcond8_fu_3313_p2 <= "1" when (f_4_reg_1044 = ap_const_lv7_78) else "0";
    exitcond9_fu_2857_p2 <= "1" when (j_1_reg_1033 = ap_const_lv2_2) else "0";
    exitcond_fu_3554_p2 <= "1" when (colOutIdx_8_reg_1178 = ap_const_lv7_54) else "0";
    exitcond_i1_fu_2546_p2 <= "1" when (k_i1_reg_931 = ap_const_lv3_5) else "0";
    exitcond_i2_fu_3418_p2 <= "1" when (k_i2_reg_1099 = ap_const_lv4_F) else "0";
    exitcond_i_fu_1459_p2 <= "1" when (k_i_reg_719 = ap_const_lv3_4) else "0";
    f_1_cast1_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_1_reg_785),8));
    f_1_cast_fu_1696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_1_reg_785),9));
    f_2_cast_fu_2271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_2_reg_853),8));
    f_3_cast_fu_2757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_3_reg_986),8));
    f_5_fu_1332_p2 <= std_logic_vector(unsigned(f_reg_641) + unsigned(ap_const_lv3_1));
    f_6_fu_1710_p2 <= std_logic_vector(unsigned(f_1_reg_785) + unsigned(ap_const_lv3_1));
    f_7_fu_2281_p2 <= std_logic_vector(unsigned(f_2_reg_853) + unsigned(ap_const_lv5_1));
    f_8_fu_2767_p2 <= std_logic_vector(unsigned(f_3_reg_986) + unsigned(ap_const_lv5_1));
    f_9_fu_3319_p2 <= std_logic_vector(unsigned(f_4_reg_1044) + unsigned(ap_const_lv7_1));
    f_cast_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_641),14));

    fc1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state138, tmp_35_fu_3452_p1, ap_CS_fsm_state137, tmp_42_fu_3435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            fc1ActivationMap_address0 <= tmp_35_fu_3452_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            fc1ActivationMap_address0 <= tmp_42_fu_3435_p1(7 - 1 downto 0);
        else 
            fc1ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state138, ap_CS_fsm_state137)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state137))) then 
            fc1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            fc1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state137)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            fc1ActivationMap_we0 <= ap_const_logic_1;
        else 
            fc1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv10_address0_assign_proc : process(grp_sum_fu_1213_x_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, tmp_24_fu_1455_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fv10_address0 <= tmp_24_fu_1455_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fv10_address0 <= grp_sum_fu_1213_x_address0;
        else 
            fv10_address0 <= "XXXXX";
        end if; 
    end process;


    fv10_ce0_assign_proc : process(grp_sum_fu_1213_x_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fv10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fv10_ce0 <= grp_sum_fu_1213_x_ce0;
        else 
            fv10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv10_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fv10_we0 <= ap_const_logic_1;
        else 
            fv10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv11_address0_assign_proc : process(ap_CS_fsm_state21, grp_sum_fu_1213_y_address0, ap_CS_fsm_state18, tmp_i_fu_1471_p1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fv11_address0 <= tmp_i_fu_1471_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fv11_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fv11_address0 <= grp_sum_fu_1213_y_address0;
        else 
            fv11_address0 <= "XXX";
        end if; 
    end process;


    fv11_ce0_assign_proc : process(ap_CS_fsm_state21, grp_sum_fu_1213_y_ce0, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            fv11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fv11_ce0 <= grp_sum_fu_1213_y_ce0;
        else 
            fv11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv11_we0_assign_proc : process(grp_sum_fu_1213_y_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            fv11_we0 <= grp_sum_fu_1213_y_we0;
        else 
            fv11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv12_address0_assign_proc : process(grp_c_sum_fu_1189_x_address0, ap_CS_fsm_state69, ap_CS_fsm_state70, tmp_105_fu_2541_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fv12_address0 <= tmp_105_fu_2541_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fv12_address0 <= grp_c_sum_fu_1189_x_address0;
        else 
            fv12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    fv12_ce0_assign_proc : process(grp_c_sum_fu_1189_x_ce0, ap_CS_fsm_state69, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fv12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fv12_ce0 <= grp_c_sum_fu_1189_x_ce0;
        else 
            fv12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv12_we0_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fv12_we0 <= ap_const_logic_1;
        else 
            fv12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv13_address0_assign_proc : process(grp_c_sum_fu_1189_y_address0, grp_d_sum_fu_1201_x_address0, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fv13_address0 <= grp_d_sum_fu_1201_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fv13_address0 <= grp_c_sum_fu_1189_y_address0;
        else 
            fv13_address0 <= "XXXXX";
        end if; 
    end process;


    fv13_ce0_assign_proc : process(grp_c_sum_fu_1189_y_ce0, grp_d_sum_fu_1201_x_ce0, ap_CS_fsm_state70, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fv13_ce0 <= grp_d_sum_fu_1201_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fv13_ce0 <= grp_c_sum_fu_1189_y_ce0;
        else 
            fv13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv13_we0_assign_proc : process(grp_c_sum_fu_1189_y_we0, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            fv13_we0 <= grp_c_sum_fu_1189_y_we0;
        else 
            fv13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv14_address0_assign_proc : process(ap_CS_fsm_state75, grp_d_sum_fu_1201_y_address0, ap_CS_fsm_state72, tmp_i1_fu_2558_p1, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            fv14_address0 <= tmp_i1_fu_2558_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            fv14_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fv14_address0 <= grp_d_sum_fu_1201_y_address0;
        else 
            fv14_address0 <= "XXX";
        end if; 
    end process;


    fv14_ce0_assign_proc : process(ap_CS_fsm_state75, grp_d_sum_fu_1201_y_ce0, ap_CS_fsm_state72, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            fv14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fv14_ce0 <= grp_d_sum_fu_1201_y_ce0;
        else 
            fv14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv14_we0_assign_proc : process(grp_d_sum_fu_1201_y_we0, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            fv14_we0 <= grp_d_sum_fu_1201_y_we0;
        else 
            fv14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv15_address0_assign_proc : process(grp_f_sum_fu_1195_y_address0, grp_g_sum_fu_1207_x_address0, ap_CS_fsm_state121, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            fv15_address0 <= grp_g_sum_fu_1207_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            fv15_address0 <= grp_f_sum_fu_1195_y_address0;
        else 
            fv15_address0 <= "XXXXXXX";
        end if; 
    end process;


    fv15_ce0_assign_proc : process(grp_f_sum_fu_1195_y_ce0, grp_g_sum_fu_1207_x_ce0, ap_CS_fsm_state121, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            fv15_ce0 <= grp_g_sum_fu_1207_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            fv15_ce0 <= grp_f_sum_fu_1195_y_ce0;
        else 
            fv15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv15_we0_assign_proc : process(grp_f_sum_fu_1195_y_we0, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            fv15_we0 <= grp_f_sum_fu_1195_y_we0;
        else 
            fv15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv16_address0_assign_proc : process(ap_CS_fsm_state126, grp_g_sum_fu_1207_y_address0, ap_CS_fsm_state123, tmp_i2_fu_3430_p1, ap_CS_fsm_state124)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            fv16_address0 <= tmp_i2_fu_3430_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            fv16_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            fv16_address0 <= grp_g_sum_fu_1207_y_address0;
        else 
            fv16_address0 <= "XXXX";
        end if; 
    end process;


    fv16_ce0_assign_proc : process(ap_CS_fsm_state126, grp_g_sum_fu_1207_y_ce0, ap_CS_fsm_state123, ap_CS_fsm_state124)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            fv16_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            fv16_ce0 <= grp_g_sum_fu_1207_y_ce0;
        else 
            fv16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv16_we0_assign_proc : process(grp_g_sum_fu_1207_y_we0, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            fv16_we0 <= grp_g_sum_fu_1207_y_we0;
        else 
            fv16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_c_sum_fu_1189_ap_start <= grp_c_sum_fu_1189_ap_start_reg;
    grp_d_sum_fu_1201_ap_start <= grp_d_sum_fu_1201_ap_start_reg;
    grp_f_sum_fu_1195_ap_start <= grp_f_sum_fu_1195_ap_start_reg;

    grp_fu_1219_p0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state75, ap_CS_fsm_state126, ap_CS_fsm_state143, ap_CS_fsm_state161, ap_phi_mux_y5_i_phi_fu_712_p4, y5_i_reg_709, ap_phi_mux_y3_i_phi_fu_924_p4, y3_i_reg_921, ap_phi_mux_y1_i_phi_fu_1092_p4, y1_i_reg_1089, ap_phi_mux_tmp_83_phi_fu_1136_p4, tmp_83_reg_1132, ap_phi_mux_tmp_89_phi_fu_1170_p4, tmp_89_reg_1166, ap_CS_fsm_state23, ap_CS_fsm_state77, ap_CS_fsm_state128, ap_CS_fsm_state150, ap_CS_fsm_state167)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state167)) then 
            grp_fu_1219_p0 <= tmp_89_reg_1166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            grp_fu_1219_p0 <= ap_phi_mux_tmp_89_phi_fu_1170_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state150)) then 
            grp_fu_1219_p0 <= tmp_83_reg_1132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_fu_1219_p0 <= ap_phi_mux_tmp_83_phi_fu_1136_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            grp_fu_1219_p0 <= y1_i_reg_1089;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_1219_p0 <= ap_phi_mux_y1_i_phi_fu_1092_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_1219_p0 <= y3_i_reg_921;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_1219_p0 <= ap_phi_mux_y3_i_phi_fu_924_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1219_p0 <= y5_i_reg_709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1219_p0 <= ap_phi_mux_y5_i_phi_fu_712_p4;
        else 
            grp_fu_1219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1219_p1_assign_proc : process(reg_1315, ap_CS_fsm_state21, fv11_load_reg_3699, ap_CS_fsm_state75, fv14_load_reg_4056, ap_CS_fsm_state126, fv16_load_reg_4371, ap_CS_fsm_state143, ap_CS_fsm_state161, ap_CS_fsm_state23, ap_CS_fsm_state77, ap_CS_fsm_state128, ap_CS_fsm_state150, ap_CS_fsm_state167)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state167) or (ap_const_logic_1 = ap_CS_fsm_state150))) then 
            grp_fu_1219_p1 <= reg_1315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            grp_fu_1219_p1 <= fv16_load_reg_4371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_1219_p1 <= fv14_load_reg_4056;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1219_p1 <= fv11_load_reg_3699;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state143))) then 
            grp_fu_1219_p1 <= ap_const_lv32_0;
        else 
            grp_fu_1219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1234_p0_assign_proc : process(reg_1310, tmp_26_reg_3671, d_relu3ActivationMap_3_reg_4463, ap_CS_fsm_state14, ap_CS_fsm_state65, ap_CS_fsm_state116, ap_CS_fsm_state146, ap_CS_fsm_state163)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state163)) then 
            grp_fu_1234_p0 <= d_relu3ActivationMap_3_reg_4463;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            grp_fu_1234_p0 <= reg_1310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_1234_p0 <= tmp_26_reg_3671;
        else 
            grp_fu_1234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1240_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputImg_load_reg_3661),32));

    grp_fu_1243_p0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state115, ap_CS_fsm_state145, pool1ActivationMap_l_reg_4028, pool2ActivationMap_l_reg_4348, relu3ActivationMap_l_reg_4432)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            grp_fu_1243_p0 <= relu3ActivationMap_l_reg_4432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            grp_fu_1243_p0 <= pool2ActivationMap_l_reg_4348;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_1243_p0 <= pool1ActivationMap_l_reg_4028;
        else 
            grp_fu_1243_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1252_p0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state96, x_assign_reg_796, x_assign_5_reg_997)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_1252_p0 <= x_assign_5_reg_997;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1252_p0 <= x_assign_reg_796;
        else 
            grp_fu_1252_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1259_p0_assign_proc : process(ap_CS_fsm_state50, rowOutIdx_reg_3753, ap_CS_fsm_state37, b_maxval_reg_3903, ap_CS_fsm_state46, rowOutIdx_5_reg_4105, ap_CS_fsm_state91, b_maxval_3_reg_4252, ap_CS_fsm_state100, ap_CS_fsm_state103, rowOutIdx_6_reg_4394, ap_CS_fsm_state140, maxval_1_fu_282, maxval_1_6_fu_290)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_fu_1259_p0 <= rowOutIdx_6_reg_4394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_1259_p0 <= maxval_1_6_fu_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_1259_p0 <= b_maxval_3_reg_4252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_fu_1259_p0 <= rowOutIdx_5_reg_4105;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1259_p0 <= maxval_1_fu_282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_1259_p0 <= b_maxval_reg_3903;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_1259_p0 <= rowOutIdx_reg_3753;
        else 
            grp_fu_1259_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1259_p1_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state37, b_maxval_1_reg_3909, ap_CS_fsm_state46, ap_CS_fsm_state91, b_maxval_4_reg_4258, ap_CS_fsm_state100, ap_CS_fsm_state103, ap_CS_fsm_state140, maxval_1_3_fu_286, maxval_1_7_fu_294)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_1259_p1 <= maxval_1_7_fu_294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_1259_p1 <= b_maxval_4_reg_4258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1259_p1 <= maxval_1_3_fu_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_1259_p1 <= b_maxval_1_reg_3909;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            grp_fu_1259_p1 <= ap_const_lv64_0;
        else 
            grp_fu_1259_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_g_sum_fu_1207_ap_start <= grp_g_sum_fu_1207_ap_start_reg;
    grp_sum_fu_1213_ap_start <= grp_sum_fu_1213_ap_start_reg;
    indvarinc1_fu_2730_p2 <= std_logic_vector(unsigned(invdar1_reg_975) + unsigned(ap_const_lv9_1));
    indvarinc_fu_1679_p2 <= std_logic_vector(unsigned(invdar_reg_774) + unsigned(ap_const_lv11_1));
    inputImg_address0 <= tmp_22_fu_1436_p1(10 - 1 downto 0);

    inputImg_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inputImg_ce0 <= ap_const_logic_1;
        else 
            inputImg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_1810_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_reg_842));
    j_3_fu_2863_p2 <= std_logic_vector(unsigned(j_1_reg_1033) + unsigned(ap_const_lv2_1));
    k4_cast_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_reg_687),5));
    k_10_fu_1465_p2 <= std_logic_vector(unsigned(k_i_reg_719) + unsigned(ap_const_lv3_1));
    k_11_fu_2595_p2 <= std_logic_vector(unsigned(k_3_reg_942) + unsigned(ap_const_lv4_1));
    k_12_fu_2791_p3 <= (r_3_reg_1009 & ap_const_lv1_0);
    k_13_fu_3331_p2 <= std_logic_vector(unsigned(k_4_reg_1056) + unsigned(ap_const_lv3_1));
    k_14_fu_2347_p2 <= std_logic_vector(unsigned(k_2_reg_888) + unsigned(ap_const_lv3_1));
    k_15_fu_3424_p2 <= std_logic_vector(unsigned(k_i2_reg_1099) + unsigned(ap_const_lv4_1));
    k_16_fu_3544_p2 <= std_logic_vector(unsigned(k_7_reg_1155) + unsigned(ap_const_lv4_1));
    k_20_fu_2552_p2 <= std_logic_vector(unsigned(k_i1_reg_931) + unsigned(ap_const_lv3_1));
    k_21_fu_3446_p2 <= std_logic_vector(unsigned(k_5_reg_1110) + unsigned(ap_const_lv7_1));
    k_22_fu_3511_p2 <= std_logic_vector(unsigned(k_6_reg_1121) + unsigned(ap_const_lv7_1));
    k_2_cast_fu_2337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_888),4));
    k_8_fu_1748_p3 <= (r_1_reg_808 & ap_const_lv1_0);
    k_9_fu_1386_p2 <= std_logic_vector(unsigned(k4_reg_687) + unsigned(ap_const_lv3_1));
    k_fu_1544_p2 <= std_logic_vector(unsigned(k_1_reg_730) + unsigned(ap_const_lv5_1));
    loc_V_2_fu_2934_p4 <= p_Val2_s_37_reg_4185(62 downto 52);
    loc_V_fu_1893_p4 <= p_Val2_s_reg_3831(62 downto 52);
    maxval_0_3_to_int_fu_2161_p1 <= reg_1296;
    maxval_0_8_to_int_fu_3221_p1 <= maxval_1_6_fu_290;
    maxval_1_1_fu_2121_p3 <= 
        relu1ActivationMap_q1 when (tmp_28_reg_3851(0) = '1') else 
        maxval_1_3_fu_286;
    maxval_1_2_fu_2128_p3 <= 
        maxval_1_fu_282 when (tmp_28_reg_3851(0) = '1') else 
        relu1ActivationMap_q1;
    maxval_1_3_maxval_0_3_fu_2262_p3 <= 
        reg_1300 when (tmp_40_fu_2239_p2(0) = '1') else 
        reg_1296;
    maxval_1_3_to_int_fu_2179_p1 <= reg_1300;
    maxval_1_4_fu_3159_p3 <= 
        relu2ActivationMap_q1 when (tmp_150_reg_4208(0) = '1') else 
        maxval_1_7_fu_294;
    maxval_1_5_fu_3166_p3 <= 
        maxval_1_6_fu_290 when (tmp_150_reg_4208(0) = '1') else 
        relu2ActivationMap_q1;
    maxval_1_8_maxval_0_8_fu_3306_p3 <= 
        maxval_1_7_fu_294 when (tmp_133_fu_3297_p2(0) = '1') else 
        maxval_1_6_fu_290;
    maxval_1_8_to_int_fu_3238_p1 <= maxval_1_7_fu_294;
    netScores_address0 <= tmp_82_reg_4445(4 - 1 downto 0);

    netScores_ce0_assign_proc : process(ap_CS_fsm_state176)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state176)) then 
            netScores_ce0 <= ap_const_logic_1;
        else 
            netScores_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    netScores_d0 <= reg_1289;

    netScores_we0_assign_proc : process(ap_CS_fsm_state176)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state176)) then 
            netScores_we0 <= ap_const_logic_1;
        else 
            netScores_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_1532_p2 <= std_logic_vector(unsigned(phi_mul2_reg_741) + unsigned(ap_const_lv13_A8));
    next_mul5_fu_1730_p2 <= std_logic_vector(unsigned(phi_mul4_reg_819) + unsigned(ap_const_lv13_150));
    next_mul_fu_1342_p2 <= std_logic_vector(unsigned(phi_mul_reg_664) + unsigned(ap_const_lv13_A8));
    notlhs10_fu_3118_p2 <= "0" when (tmp_141_fu_3086_p4 = ap_const_lv11_7FF) else "1";
    notlhs1_fu_2197_p2 <= "0" when (tmp_30_fu_2165_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_2215_p2 <= "0" when (tmp_32_fu_2183_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_2059_p2 <= "0" when (tmp_54_fu_2028_p4 = ap_const_lv11_7FF) else "1";
    notlhs4_fu_2077_p2 <= "0" when (tmp_56_fu_2045_p4 = ap_const_lv11_7FF) else "1";
    notlhs5_fu_2699_p2 <= "0" when (tmp_79_fu_2685_p4 = ap_const_lv11_7FF) else "1";
    notlhs6_fu_3474_p2 <= "0" when (tmp_103_fu_3460_p4 = ap_const_lv11_7FF) else "1";
    notlhs7_fu_3255_p2 <= "0" when (tmp_116_fu_3224_p4 = ap_const_lv11_7FF) else "1";
    notlhs8_fu_3273_p2 <= "0" when (tmp_125_fu_3241_p4 = ap_const_lv11_7FF) else "1";
    notlhs9_fu_3100_p2 <= "0" when (tmp_139_fu_3069_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_1648_p2 <= "0" when (tmp_6_fu_1634_p4 = ap_const_lv11_7FF) else "1";
    notrhs10_fu_3124_p2 <= "1" when (tmp_152_fu_3096_p1 = ap_const_lv52_0) else "0";
    notrhs1_fu_2203_p2 <= "1" when (tmp_31_fu_2175_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_2221_p2 <= "1" when (tmp_34_fu_2193_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_2065_p2 <= "1" when (tmp_67_fu_2038_p1 = ap_const_lv52_0) else "0";
    notrhs4_fu_2083_p2 <= "1" when (tmp_85_fu_2055_p1 = ap_const_lv52_0) else "0";
    notrhs5_fu_2705_p2 <= "1" when (tmp_110_fu_2695_p1 = ap_const_lv52_0) else "0";
    notrhs6_fu_3480_p2 <= "1" when (tmp_123_fu_3470_p1 = ap_const_lv52_0) else "0";
    notrhs7_fu_3261_p2 <= "1" when (tmp_126_fu_3234_p1 = ap_const_lv52_0) else "0";
    notrhs8_fu_3279_p2 <= "1" when (tmp_134_fu_3251_p1 = ap_const_lv52_0) else "0";
    notrhs9_fu_3106_p2 <= "1" when (tmp_151_fu_3079_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_1654_p2 <= "1" when (tmp_9_fu_1644_p1 = ap_const_lv52_0) else "0";
    p_Val2_1_fu_3188_p3 <= 
        p_Val2_6_i_i_i2_fu_3183_p2 when (tmp_137_reg_4226(0) = '1') else 
        p_Val2_9_reg_4231;
    p_Val2_2_fu_2001_p3 <= 
        tmp_64_fu_1987_p1 when (tmp_57_fu_1929_p3(0) = '1') else 
        tmp_65_fu_1991_p4;
    p_Val2_6_fu_2150_p3 <= 
        p_Val2_6_i_i_i_fu_2145_p2 when (tmp_49_reg_3882(0) = '1') else 
        p_Val2_2_reg_3887;
    p_Val2_6_i_i_i2_fu_3183_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_reg_4231));
    p_Val2_6_i_i_i_fu_2145_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_reg_3887));
    p_Val2_9_fu_3042_p3 <= 
        tmp_135_fu_3028_p1 when (tmp_140_fu_2970_p3(0) = '1') else 
        tmp_136_fu_3032_p4;
    p_Val2_s_37_fu_2841_p1 <= x_assign_5_reg_997;
    p_Val2_s_fu_1772_p1 <= x_assign_reg_796;
    p_shl10_cast_fu_3353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_3345_p3),9));
    p_shl10_fu_3345_p3 <= (k_4_reg_1056 & ap_const_lv4_0);
    p_shl11_cast_fu_2377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl11_fu_2369_p3),9));
    p_shl11_fu_2369_p3 <= (k_2_reg_888 & ap_const_lv5_0);
    p_shl12_cast_fu_2389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl12_fu_2381_p3),9));
    p_shl12_fu_2381_p3 <= (k_2_reg_888 & ap_const_lv1_0);
    p_shl13_cast_fu_1826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_fu_1816_p4),9));
    p_shl13_fu_1816_p4 <= ((c_1_reg_830 & tmp_28_fu_1800_p1) & ap_const_lv3_0);
    p_shl14_cast_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_fu_1830_p4),9));
    p_shl14_fu_1830_p4 <= ((c_1_reg_830 & tmp_28_fu_1800_p1) & ap_const_lv1_0);
    p_shl15_cast_fu_1877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl15_fu_1869_p3),8));
    p_shl15_fu_1869_p3 <= (c_1_reg_830 & ap_const_lv3_0);
    p_shl16_fu_2799_p3 <= (r_3_reg_1009 & ap_const_lv6_0);
    p_shl17_cast_fu_2429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_fu_2421_p3),8));
    p_shl17_fu_2421_p3 <= (tmp_80_fu_2415_p2 & ap_const_lv3_0);
    p_shl18_cast_fu_2441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_fu_2433_p3),8));
    p_shl18_fu_2433_p3 <= (tmp_80_fu_2415_p2 & ap_const_lv1_0);
    p_shl19_cast_fu_2459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_fu_2451_p3),7));
    p_shl19_fu_2451_p3 <= (colOutIdx_3_reg_899 & ap_const_lv3_0);
    p_shl1_cast_fu_1582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_1574_p3),9));
    p_shl1_fu_1574_p3 <= (colOutIdx_1_reg_752 & ap_const_lv1_0);
    p_shl20_cast_fu_2471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_fu_2463_p3),7));
    p_shl20_fu_2463_p3 <= (colOutIdx_3_reg_899 & ap_const_lv1_0);
    p_shl21_fu_2817_p3 <= (tmp_78_fu_2811_p2 & ap_const_lv7_0);
    p_shl22_cast_fu_2807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_fu_2799_p3),11));
    p_shl22_fu_2829_p3 <= (tmp_78_fu_2811_p2 & ap_const_lv5_0);
    p_shl23_cast_fu_2825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl21_fu_2817_p3),12));
    p_shl24_cast_fu_2837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl22_fu_2829_p3),12));
    p_shl2_fu_2601_p3 <= (k_3_reg_942 & ap_const_lv7_0);
    p_shl3_cast_fu_2617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_2609_p3),11));
    p_shl3_fu_2609_p3 <= (k_3_reg_942 & ap_const_lv5_0);
    p_shl4_cast_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_1476_p3),9));
    p_shl4_fu_1476_p3 <= (c_reg_675 & ap_const_lv3_0);
    p_shl5_cast_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_1488_p3),9));
    p_shl5_fu_1488_p3 <= (c_reg_675 & ap_const_lv1_0);
    p_shl6_fu_1398_p3 <= (k4_reg_687 & ap_const_lv2_0);
    p_shl7_fu_2299_p3 <= (r_2_reg_864 & ap_const_lv7_0);
    p_shl8_cast_fu_2315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_2307_p3),11));
    p_shl8_fu_2307_p3 <= (r_2_reg_864 & ap_const_lv5_0);
    p_shl9_fu_3337_p3 <= (k_4_reg_1056 & ap_const_lv6_0);
    p_shl_cast_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_1562_p3),9));
    p_shl_fu_1562_p3 <= (colOutIdx_1_reg_752 & ap_const_lv3_0);
    phi_mul2_cast_fu_1528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul2_reg_741),14));
    phi_mul4_cast_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul4_reg_819),14));
    phi_mul_cast_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_664),14));

    pool1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state62, ap_CS_fsm_state51, tmp_2_fu_1685_p1, tmp_63_fu_2257_p1, tmp_102_fu_2519_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            pool1ActivationMap_address0 <= tmp_102_fu_2519_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            pool1ActivationMap_address0 <= tmp_63_fu_2257_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            pool1ActivationMap_address0 <= tmp_2_fu_1685_p1(11 - 1 downto 0);
        else 
            pool1ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state62, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pool1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            pool1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool1ActivationMap_d0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state51, maxval_1_3_maxval_0_3_fu_2262_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            pool1ActivationMap_d0 <= maxval_1_3_maxval_0_3_fu_2262_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            pool1ActivationMap_d0 <= ap_const_lv64_0;
        else 
            pool1ActivationMap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            pool1ActivationMap_we0 <= ap_const_logic_1;
        else 
            pool1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state113, tmp_107_fu_3413_p1, ap_CS_fsm_state104, tmp_10_fu_2736_p1, tmp_128_fu_3302_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            pool2ActivationMap_address0 <= tmp_107_fu_3413_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            pool2ActivationMap_address0 <= tmp_128_fu_3302_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            pool2ActivationMap_address0 <= tmp_10_fu_2736_p1(9 - 1 downto 0);
        else 
            pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pool2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state113, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            pool2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2ActivationMap_d0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state104, maxval_1_8_maxval_0_8_fu_3306_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            pool2ActivationMap_d0 <= maxval_1_8_maxval_0_8_fu_3306_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            pool2ActivationMap_d0 <= ap_const_lv64_0;
        else 
            pool2ActivationMap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state93, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_4_fu_1354_p2 <= std_logic_vector(unsigned(r_reg_652) + unsigned(ap_const_lv5_1));
    r_5_fu_1742_p2 <= std_logic_vector(unsigned(r_1_reg_808) + unsigned(ap_const_lv4_1));
    r_6_fu_2293_p2 <= std_logic_vector(unsigned(r_2_reg_864) + unsigned(ap_const_lv4_1));
    r_7_fu_2785_p2 <= std_logic_vector(unsigned(r_3_reg_1009) + unsigned(ap_const_lv3_1));

    relu1ActivationMap_address0_assign_proc : process(tmp_8_reg_3743, ap_CS_fsm_state44, ap_CS_fsm_state38, tmp_47_fu_2012_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            relu1ActivationMap_address0 <= tmp_47_fu_2012_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            relu1ActivationMap_address0 <= tmp_8_reg_3743(13 - 1 downto 0);
        else 
            relu1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    relu1ActivationMap_address1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state47, tmp_53_fu_2020_p1, b_maxval_6_cast_fu_2116_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            relu1ActivationMap_address1 <= b_maxval_6_cast_fu_2116_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            relu1ActivationMap_address1 <= tmp_53_fu_2020_p1(13 - 1 downto 0);
        else 
            relu1ActivationMap_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    relu1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            relu1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu1ActivationMap_ce1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            relu1ActivationMap_ce1 <= ap_const_logic_1;
        else 
            relu1ActivationMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    relu1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            relu1ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_address0_assign_proc : process(tmp_52_reg_4095, ap_CS_fsm_state98, ap_CS_fsm_state92, tmp_120_fu_3055_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            relu2ActivationMap_address0 <= tmp_120_fu_3055_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            relu2ActivationMap_address0 <= tmp_52_reg_4095(11 - 1 downto 0);
        else 
            relu2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    relu2ActivationMap_address1_assign_proc : process(ap_CS_fsm_state98, ap_CS_fsm_state101, tmp_122_fu_3059_p1, b_maxval_7_cast_fu_3155_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            relu2ActivationMap_address1 <= b_maxval_7_cast_fu_3155_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            relu2ActivationMap_address1 <= tmp_122_fu_3059_p1(11 - 1 downto 0);
        else 
            relu2ActivationMap_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    relu2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state98, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            relu2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_ce1_assign_proc : process(ap_CS_fsm_state98, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            relu2ActivationMap_ce1 <= ap_const_logic_1;
        else 
            relu2ActivationMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            relu2ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu3ActivationMap_address0_assign_proc : process(tmp_35_reg_4384, ap_CS_fsm_state143, ap_CS_fsm_state141, tmp_91_fu_3533_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            relu3ActivationMap_address0 <= tmp_91_fu_3533_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            relu3ActivationMap_address0 <= tmp_35_reg_4384(7 - 1 downto 0);
        else 
            relu3ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    relu3ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state143, ap_CS_fsm_state141)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state143))) then 
            relu3ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu3ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu3ActivationMap_we0_assign_proc : process(ap_CS_fsm_state141)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            relu3ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu3ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rowOutIdx_1_fu_1672_p3 <= 
        ap_const_lv64_0 when (tmp_14_fu_1666_p2(0) = '1') else 
        rowOutIdx_reg_3753;
    rowOutIdx_2_fu_2723_p3 <= 
        ap_const_lv64_0 when (tmp_100_fu_2717_p2(0) = '1') else 
        rowOutIdx_5_reg_4105;
    rowOutIdx_4_fu_3498_p3 <= 
        ap_const_lv64_0 when (tmp_115_fu_3492_p2(0) = '1') else 
        rowOutIdx_6_reg_4394;
    rowOutIdx_7_to_int_fu_2682_p1 <= rowOutIdx_5_reg_4105;
    rowOutIdx_8_to_int_fu_3457_p1 <= rowOutIdx_6_reg_4394;
    rowOutIdx_to_int_fu_1631_p1 <= rowOutIdx_reg_3753;
        sh_assign_1_cast_fu_1955_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_1947_p3),32));

    sh_assign_1_fu_1947_p3 <= 
        tmp_140_i_i_i_cast_fu_1943_p1 when (tmp_57_fu_1929_p3(0) = '1') else 
        sh_assign_fu_1923_p2;
    sh_assign_4_fu_2964_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i2_cast_fu_2960_p1));
        sh_assign_5_cast_fu_2996_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_2988_p3),32));

    sh_assign_5_fu_2988_p3 <= 
        tmp_140_i_i_i2_cast_fu_2984_p1 when (tmp_140_fu_2970_p3(0) = '1') else 
        sh_assign_4_fu_2964_p2;
    sh_assign_fu_1923_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast_fu_1919_p1));
    tmp10_cast_fu_2576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_fu_2571_p2),11));
    tmp10_fu_2571_p2 <= std_logic_vector(unsigned(tmp_73_fu_2563_p3) + unsigned(f_2_cast_reg_3940));
    tmp12_cast_fu_2668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_fu_2663_p2),11));
    tmp12_fu_2663_p2 <= std_logic_vector(unsigned(tmp_29_reg_4082) + unsigned(b_k_2_cast_fu_2647_p1));
    tmp13_fu_2892_p3 <= (r_3_reg_1009 & tmp_118_fu_2883_p2);
    tmp14_fu_2905_p2 <= std_logic_vector(unsigned(tmp_118_cast_fu_2888_p1) + unsigned(p_shl23_cast_reg_4175));
    tmp15_fu_3206_p2 <= std_logic_vector(unsigned(tmp_148_fu_3194_p2) + unsigned(tmp_149_fu_3200_p2));
        tmp16_cast_fu_3212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp16_reg_4237),32));

    tmp16_fu_3050_p2 <= std_logic_vector(unsigned(tmp_124_cast_fu_2923_p1) + unsigned(tmp_33_reg_4152));
    tmp19_fu_3357_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_3353_p1) + unsigned(p_shl9_fu_3337_p3));
    tmp20_cast_fu_3404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp20_fu_3399_p2),9));
    tmp20_fu_3399_p2 <= std_logic_vector(unsigned(tmp_84_reg_4325) + unsigned(b_k_3_cast_fu_3383_p1));
    tmp2_fu_1441_p2 <= std_logic_vector(unsigned(p_shl6_reg_3638) + unsigned(colOutIdx1_cast_fu_1406_p1));
    tmp3_fu_1510_p2 <= std_logic_vector(signed(tmp_13_cast_fu_1506_p1) + signed(phi_mul_cast_reg_3589));
        tmp4_cast_fu_1613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_1608_p2),14));

    tmp4_fu_1608_p2 <= std_logic_vector(unsigned(tmp_4_reg_3730) + unsigned(b_k_cast_fu_1592_p1));
    tmp5_fu_2247_p2 <= std_logic_vector(signed(tmp_59_cast_fu_2244_p1) + signed(tmp_60_reg_3935));
    tmp6_fu_2621_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_2617_p1) + unsigned(p_shl2_fu_2601_p3));
        tmp7_cast_fu_2506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_2501_p2),12));

    tmp7_fu_2501_p2 <= std_logic_vector(unsigned(tmp_86_reg_4000) + unsigned(b_k_1_cast1_fu_2485_p1));
        tmp8_cast_fu_2529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_fu_2524_p2),9));

    tmp8_fu_2524_p2 <= std_logic_vector(unsigned(tmp_87_reg_4005) + unsigned(b_k_1_cast_fu_2481_p1));
    tmp9_fu_2319_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_2315_p1) + unsigned(p_shl7_fu_2299_p3));
    tmp_100_fu_2717_p2 <= (tmp_88_fu_2711_p2 and grp_fu_1259_p2);
        tmp_101_cast_fu_2515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_101_fu_2510_p2),32));

    tmp_101_fu_2510_p2 <= std_logic_vector(signed(tmp7_cast_fu_2506_p1) + signed(tmp_70_reg_3982));
    tmp_102_fu_2519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_cast_fu_2515_p1),64));
    tmp_103_fu_3460_p4 <= rowOutIdx_8_to_int_fu_3457_p1(62 downto 52);
        tmp_104_cast_fu_2538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_104_reg_4023),32));

    tmp_104_fu_2533_p2 <= std_logic_vector(signed(tmp8_cast_fu_2529_p1) + signed(tmp_74_reg_3987));
    tmp_105_fu_2541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_cast_fu_2538_p1),64));
    tmp_106_fu_3408_p2 <= std_logic_vector(unsigned(tmp20_cast_fu_3404_p1) + unsigned(tmp19_reg_4312));
    tmp_107_fu_3413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_3408_p2),64));
    tmp_10_fu_2736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_975),64));
    tmp_110_fu_2695_p1 <= rowOutIdx_7_to_int_fu_2682_p1(52 - 1 downto 0);
    tmp_113_fu_3486_p2 <= (notrhs6_fu_3480_p2 or notlhs6_fu_3474_p2);
    tmp_115_fu_3492_p2 <= (tmp_113_fu_3486_p2 and grp_fu_1259_p2);
    tmp_116_fu_3224_p4 <= maxval_0_8_to_int_fu_3221_p1(62 downto 52);
    tmp_117_fu_2873_p4 <= ((c_3_reg_1021 & tmp_150_fu_2869_p1) & ap_const_lv4_0);
    tmp_118_cast_fu_2888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_2883_p2),12));
    tmp_118_fu_2883_p2 <= std_logic_vector(unsigned(tmp_117_fu_2873_p4) + unsigned(f_3_cast_reg_4139));
    tmp_119_fu_2900_p2 <= std_logic_vector(unsigned(p_shl22_cast_reg_4170) + unsigned(tmp13_fu_2892_p3));
    tmp_120_cast_cast_fu_3063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_reg_4214),12));
    tmp_120_fu_3055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_reg_4214),64));
    tmp_121_fu_2910_p2 <= std_logic_vector(unsigned(p_shl24_cast_reg_4180) + unsigned(tmp14_fu_2905_p2));
    tmp_122_fu_3059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_reg_4220),64));
    tmp_123_fu_3470_p1 <= rowOutIdx_8_to_int_fu_3457_p1(52 - 1 downto 0);
    tmp_124_cast_fu_2923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_2915_p3),8));
    tmp_124_fu_2915_p3 <= (c_3_reg_1021 & ap_const_lv4_0);
    tmp_125_fu_3241_p4 <= maxval_1_8_to_int_fu_3238_p1(62 downto 52);
    tmp_126_fu_3234_p1 <= maxval_0_8_to_int_fu_3221_p1(52 - 1 downto 0);
    tmp_127_fu_3215_p2 <= std_logic_vector(signed(tmp16_cast_fu_3212_p1) + signed(tmp15_fu_3206_p2));
        tmp_128_fu_3302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_127_reg_4291),64));

    tmp_129_fu_3267_p2 <= (notrhs7_fu_3261_p2 or notlhs7_fu_3255_p2);
    tmp_130_fu_3285_p2 <= (notrhs8_fu_3279_p2 or notlhs8_fu_3273_p2);
    tmp_131_fu_3291_p2 <= (tmp_130_fu_3285_p2 and tmp_129_fu_3267_p2);
    tmp_133_fu_3297_p2 <= (tmp_132_reg_4286 and tmp_131_fu_3291_p2);
    tmp_134_fu_3251_p1 <= maxval_1_8_to_int_fu_3238_p1(52 - 1 downto 0);
    tmp_135_fu_3028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_3020_p3),32));
    tmp_136_fu_3032_p4 <= tmp_143_i_i_i2_fu_3014_p2(84 downto 53);
    tmp_138_fu_2943_p1 <= p_Val2_s_37_reg_4185(52 - 1 downto 0);
    tmp_139_fu_3069_p4 <= b_maxval_3_to_int_fu_3066_p1(62 downto 52);
        tmp_13_cast_fu_1506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_1500_p2),14));

    tmp_13_fu_1500_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1484_p1) - unsigned(p_shl5_cast_fu_1496_p1));
    tmp_140_fu_2970_p3 <= sh_assign_4_fu_2964_p2(11 downto 11);
        tmp_140_i_i_i2_cast_fu_2984_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_140_i_i_i2_fu_2978_p2),12));

    tmp_140_i_i_i2_fu_2978_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_fu_2934_p4));
        tmp_140_i_i_i_cast_fu_1943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_140_i_i_i_fu_1937_p2),12));

    tmp_140_i_i_i_fu_1937_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_1893_p4));
    tmp_141_fu_3086_p4 <= b_maxval_4_to_int_fu_3083_p1(62 downto 52);
    tmp_141_i_i_i2_cast_fu_3004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_2996_p1),54));
    tmp_141_i_i_i2_fu_3000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_2996_p1),137));
    tmp_141_i_i_i_cast_fu_1963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1955_p1),54));
    tmp_141_i_i_i_fu_1959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1955_p1),137));
    tmp_142_fu_3020_p3 <= tmp_142_i_i_i2_fu_3008_p2(53 downto 53);
    tmp_142_i_i_i2_fu_3008_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i2_fu_2946_p4),to_integer(unsigned('0' & tmp_141_i_i_i2_cast_fu_3004_p1(31-1 downto 0)))));
    tmp_142_i_i_i_fu_1967_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_1905_p4),to_integer(unsigned('0' & tmp_141_i_i_i_cast_fu_1963_p1(31-1 downto 0)))));
    tmp_143_fu_3112_p2 <= (notrhs9_fu_3106_p2 or notlhs9_fu_3100_p2);
    tmp_143_i_i_i2_fu_3014_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i2_cast_fu_2956_p1),to_integer(unsigned('0' & tmp_141_i_i_i2_fu_3000_p1(31-1 downto 0)))));
    tmp_143_i_i_i_fu_1973_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_1915_p1),to_integer(unsigned('0' & tmp_141_i_i_i_fu_1959_p1(31-1 downto 0)))));
    tmp_144_fu_3130_p2 <= (notrhs10_fu_3124_p2 or notlhs10_fu_3118_p2);
    tmp_145_fu_3136_p2 <= (tmp_144_fu_3130_p2 and tmp_143_fu_3112_p2);
    tmp_147_fu_3142_p2 <= (tmp_145_fu_3136_p2 and grp_fu_1259_p2);
    tmp_148_fu_3194_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_1_fu_3188_p3),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_149_fu_3200_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_1_fu_3188_p3),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_14_fu_1666_p2 <= (tmp_s_fu_1660_p2 and grp_fu_1259_p2);
    tmp_150_fu_2869_p1 <= j_1_reg_1033(1 - 1 downto 0);
    tmp_151_fu_3079_p1 <= b_maxval_3_to_int_fu_3066_p1(52 - 1 downto 0);
    tmp_152_fu_3096_p1 <= b_maxval_4_to_int_fu_3083_p1(52 - 1 downto 0);
        tmp_15_cast_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_3694),32));

    tmp_15_fu_1515_p2 <= std_logic_vector(unsigned(f_cast_reg_3576) + unsigned(tmp3_fu_1510_p2));
    tmp_16_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_cast_fu_1520_p1),64));
    tmp_17_fu_2741_p2 <= "1" when (invdar1_reg_975 = ap_const_lv9_18F) else "0";
    tmp_18_fu_1392_p2 <= std_logic_vector(unsigned(k4_cast_fu_1376_p1) + unsigned(r_reg_652));
    tmp_19_fu_1756_p2 <= (k_8_fu_1748_p3 or ap_const_lv5_1);
    tmp_20_fu_1766_p0 <= tmp_20_fu_1766_p00(5 - 1 downto 0);
    tmp_20_fu_1766_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1756_p2),14));
    tmp_20_fu_1766_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1766_p0) * unsigned(ap_const_lv14_A8), 14));
    tmp_21_fu_1431_p2 <= std_logic_vector(unsigned(tmp_fu_1422_p4) + unsigned(c_cast1_reg_3607));
    tmp_22_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1431_p2),64));
    tmp_23_fu_1446_p2 <= std_logic_vector(unsigned(tmp2_fu_1441_p2) + unsigned(k4_cast_reg_3620));
    tmp_24_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_3656),64));
    tmp_28_fu_1800_p1 <= j_reg_842(1 - 1 downto 0);
    tmp_29_fu_2639_p3 <= (colOutIdx_4_reg_953 & ap_const_lv4_0);
    tmp_2_fu_1685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_774),64));
    tmp_30_fu_2165_p4 <= maxval_0_3_to_int_fu_2161_p1(62 downto 52);
    tmp_31_fu_2175_p1 <= maxval_0_3_to_int_fu_2161_p1(52 - 1 downto 0);
    tmp_32_fu_2183_p4 <= maxval_1_3_to_int_fu_2179_p1(62 downto 52);
    tmp_33_fu_2773_p2 <= std_logic_vector(unsigned(f_3_cast_fu_2757_p1) + unsigned(ap_const_lv8_B0));
    tmp_34_fu_2193_p1 <= maxval_1_3_to_int_fu_2179_p1(52 - 1 downto 0);
    tmp_35_fu_3452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_5_reg_1110),64));
    tmp_36_fu_2209_p2 <= (notrhs1_fu_2203_p2 or notlhs1_fu_2197_p2);
    tmp_37_fu_2227_p2 <= (notrhs2_fu_2221_p2 or notlhs2_fu_2215_p2);
    tmp_38_fu_2233_p2 <= (tmp_37_fu_2227_p2 and tmp_36_fu_2209_p2);
    tmp_3_fu_1690_p2 <= "1" when (invdar_reg_774 = ap_const_lv11_497) else "0";
    tmp_40_fu_2239_p2 <= (tmp_39_reg_3930 and tmp_38_fu_2233_p2);
    tmp_41_fu_1844_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1826_p1) - unsigned(p_shl14_cast_fu_1840_p1));
    tmp_42_fu_3435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_4_reg_1044),64));
    tmp_44_fu_1881_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1877_p1) - unsigned(b_k_5_cast_reg_3846));
        tmp_45_cast_fu_1855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_fu_1850_p2),14));

    tmp_45_fu_1850_p2 <= std_logic_vector(unsigned(tmp_41_fu_1844_p2) + unsigned(f_1_cast_reg_3785));
        tmp_46_cast_fu_2009_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_reg_3865),32));

    tmp_46_fu_1859_p2 <= std_logic_vector(signed(tmp_45_cast_fu_1855_p1) + signed(phi_mul4_cast_reg_3808));
    tmp_47_fu_2012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_cast_fu_2009_p1),64));
    tmp_4_fu_1586_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1570_p1) - unsigned(p_shl1_cast_fu_1582_p1));
    tmp_50_fu_1864_p2 <= std_logic_vector(signed(tmp_45_cast_fu_1855_p1) + signed(tmp_20_reg_3826));
    tmp_51_fu_2672_p2 <= std_logic_vector(unsigned(tmp12_cast_fu_2668_p1) + unsigned(tmp6_reg_4069));
    tmp_52_fu_2677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_2672_p2),64));
    tmp_53_fu_2020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_cast_fu_2017_p1),64));
    tmp_54_fu_2028_p4 <= b_maxval_to_int_fu_2025_p1(62 downto 52);
    tmp_55_fu_1902_p1 <= p_Val2_s_reg_3831(52 - 1 downto 0);
        tmp_56_cast_fu_2017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_reg_3871),32));

    tmp_56_fu_2045_p4 <= b_maxval_1_to_int_fu_2042_p1(62 downto 52);
    tmp_57_fu_1929_p3 <= sh_assign_fu_1923_p2(11 downto 11);
    tmp_58_fu_2071_p2 <= (notrhs3_fu_2065_p2 or notlhs3_fu_2059_p2);
        tmp_59_cast_fu_2244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_reg_3877),32));

    tmp_59_fu_1979_p3 <= tmp_142_i_i_i_fu_1967_p2(53 downto 53);
        tmp_5_cast_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_1716_p2),32));

    tmp_5_fu_1716_p2 <= std_logic_vector(unsigned(f_1_cast1_fu_1700_p1) + unsigned(ap_const_lv8_AC));
    tmp_60_fu_2156_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_54) * signed(p_Val2_6_reg_3925))), 32));
    tmp_61_fu_2089_p2 <= (notrhs4_fu_2083_p2 or notlhs4_fu_2077_p2);
    tmp_62_fu_2252_p2 <= std_logic_vector(unsigned(tmp5_fu_2247_p2) + unsigned(tmp_5_cast_reg_3798));
        tmp_63_fu_2257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_fu_2252_p2),64));

    tmp_64_fu_1987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_1979_p3),32));
    tmp_65_fu_1991_p4 <= tmp_143_i_i_i_fu_1973_p2(84 downto 53);
    tmp_66_fu_2095_p2 <= (tmp_61_fu_2089_p2 and tmp_58_fu_2071_p2);
    tmp_67_fu_2038_p1 <= b_maxval_to_int_fu_2025_p1(52 - 1 downto 0);
    tmp_69_fu_2353_p2 <= std_logic_vector(unsigned(k_2_cast_fu_2337_p1) + unsigned(r_2_reg_864));
    tmp_6_fu_1634_p4 <= rowOutIdx_to_int_fu_1631_p1(62 downto 52);
    tmp_70_fu_2363_p0 <= tmp_70_fu_2363_p00(4 - 1 downto 0);
    tmp_70_fu_2363_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_2353_p2),12));
    tmp_70_fu_2363_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_2363_p0) * unsigned(ap_const_lv12_54), 12));
    tmp_73_fu_2563_p3 <= (c_2_reg_876 & ap_const_lv4_0);
    tmp_74_fu_2393_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_2377_p1) - unsigned(p_shl12_cast_fu_2389_p1));
    tmp_75_fu_2580_p2 <= std_logic_vector(unsigned(tmp9_reg_3961) + unsigned(tmp10_cast_fu_2576_p1));
    tmp_76_fu_2585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_reg_4051),64));
    tmp_77_fu_2101_p2 <= (tmp_66_fu_2095_p2 and grp_fu_1259_p2);
    tmp_78_fu_2811_p2 <= (k_12_fu_2791_p3 or ap_const_lv4_1);
    tmp_79_fu_2685_p4 <= rowOutIdx_7_to_int_fu_2682_p1(62 downto 52);
        tmp_7_cast_fu_1622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1617_p2),32));

    tmp_7_fu_1617_p2 <= std_logic_vector(signed(tmp4_cast_fu_1613_p1) + signed(phi_mul2_cast_reg_3704));
    tmp_80_fu_2415_p2 <= std_logic_vector(unsigned(colOutIdx_3_cast_fu_2399_p1) + unsigned(c_2_reg_876));
    tmp_81_fu_3517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_6_reg_1121),64));
    tmp_82_fu_3550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_7_reg_1155),64));
    tmp_84_fu_3375_p3 <= (colOutIdx_6_reg_1067 & ap_const_lv4_0);
    tmp_85_fu_2055_p1 <= b_maxval_1_to_int_fu_2042_p1(52 - 1 downto 0);
    tmp_86_fu_2445_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_2429_p1) - unsigned(p_shl18_cast_fu_2441_p1));
    tmp_87_fu_2475_p2 <= std_logic_vector(unsigned(p_shl19_cast_fu_2459_p1) - unsigned(p_shl20_cast_fu_2471_p1));
    tmp_88_fu_2711_p2 <= (notrhs5_fu_2705_p2 or notlhs5_fu_2699_p2);
    tmp_8_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_1622_p1),64));
    tmp_91_fu_3533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_7_reg_1144),64));
    tmp_96_fu_3566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_8_reg_1178),64));
    tmp_9_fu_1644_p1 <= rowOutIdx_to_int_fu_1631_p1(52 - 1 downto 0);
    tmp_fu_1422_p4 <= ((tmp_18_reg_3633 & ap_const_lv2_0) & colOutIdx1_reg_698);
    tmp_i1_fu_2558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_20_fu_2552_p2),64));
    tmp_i2_fu_3430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_15_fu_3424_p2),64));
    tmp_i_fu_1471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_10_fu_1465_p2),64));
    tmp_i_i_i2_cast_fu_2956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i2_fu_2946_p4),137));
    tmp_i_i_i2_fu_2946_p4 <= ((ap_const_lv1_1 & tmp_138_fu_2943_p1) & ap_const_lv1_0);
    tmp_i_i_i_cast_fu_1915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_1905_p4),137));
    tmp_i_i_i_fu_1905_p4 <= ((ap_const_lv1_1 & tmp_55_fu_1902_p1) & ap_const_lv1_0);
    tmp_i_i_i_i2_cast_fu_2960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_2934_p4),12));
    tmp_i_i_i_i_cast_fu_1919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_1893_p4),12));
    tmp_s_fu_1660_p2 <= (notrhs_fu_1654_p2 or notlhs_fu_1648_p2);
end behav;
