// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _g_sum_HH_
#define _g_sum_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lenetSynthMatlab_bkb.h"

namespace ap_rtl {

struct g_sum : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > x_address0;
    sc_out< sc_logic > x_ce0;
    sc_in< sc_lv<32> > x_q0;
    sc_out< sc_lv<4> > y_address0;
    sc_out< sc_logic > y_ce0;
    sc_out< sc_logic > y_we0;
    sc_out< sc_lv<32> > y_d0;
    sc_in< sc_lv<32> > y_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    g_sum(sc_module_name name);
    SC_HAS_PROCESS(g_sum);

    ~g_sum();

    sc_trace_file* mVcdFile;

    lenetSynthMatlab_bkb<1,5,32,32,32>* lenetSynthMatlab_bkb_U14;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > k_23_fu_114_p2;
    sc_signal< sc_lv<5> > k_23_reg_193;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_120_p1;
    sc_signal< sc_lv<64> > tmp_reg_198;
    sc_signal< sc_lv<1> > exitcond2_fu_108_p2;
    sc_signal< sc_lv<3> > k_24_fu_131_p2;
    sc_signal< sc_lv<3> > k_24_reg_211;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<7> > tmp_cast_fu_149_p1;
    sc_signal< sc_lv<7> > tmp_cast_reg_216;
    sc_signal< sc_lv<1> > exitcond1_fu_125_p2;
    sc_signal< sc_lv<5> > b_k_9_fu_159_p2;
    sc_signal< sc_lv<5> > b_k_9_reg_224;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > exitcond_fu_153_p2;
    sc_signal< sc_lv<4> > y_addr_2_reg_234;
    sc_signal< sc_lv<32> > x_load_2_reg_239;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > y_load_reg_244;
    sc_signal< sc_lv<32> > grp_fu_104_p2;
    sc_signal< sc_lv<32> > tmp_137_reg_249;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<5> > k_reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > k_1_reg_82;
    sc_signal< sc_lv<5> > b_k_reg_93;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<64> > tmp_135_fu_180_p1;
    sc_signal< sc_lv<64> > tmp_136_fu_185_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<2> > tmp_153_fu_137_p1;
    sc_signal< sc_lv<6> > tmp_s_fu_141_p3;
    sc_signal< sc_lv<5> > tmp1_fu_165_p2;
    sc_signal< sc_lv<7> > tmp1_cast_fu_171_p1;
    sc_signal< sc_lv<7> > tmp_134_fu_175_p2;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_state11;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_k_9_fu_159_p2();
    void thread_exitcond1_fu_125_p2();
    void thread_exitcond2_fu_108_p2();
    void thread_exitcond_fu_153_p2();
    void thread_k_23_fu_114_p2();
    void thread_k_24_fu_131_p2();
    void thread_tmp1_cast_fu_171_p1();
    void thread_tmp1_fu_165_p2();
    void thread_tmp_134_fu_175_p2();
    void thread_tmp_135_fu_180_p1();
    void thread_tmp_136_fu_185_p1();
    void thread_tmp_153_fu_137_p1();
    void thread_tmp_cast_fu_149_p1();
    void thread_tmp_fu_120_p1();
    void thread_tmp_s_fu_141_p3();
    void thread_x_address0();
    void thread_x_ce0();
    void thread_y_address0();
    void thread_y_ce0();
    void thread_y_d0();
    void thread_y_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
