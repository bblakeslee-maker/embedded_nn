// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "g_sum.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic g_sum::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic g_sum::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> g_sum::ap_ST_fsm_state1 = "1";
const sc_lv<12> g_sum::ap_ST_fsm_state2 = "10";
const sc_lv<12> g_sum::ap_ST_fsm_state3 = "100";
const sc_lv<12> g_sum::ap_ST_fsm_state4 = "1000";
const sc_lv<12> g_sum::ap_ST_fsm_state5 = "10000";
const sc_lv<12> g_sum::ap_ST_fsm_state6 = "100000";
const sc_lv<12> g_sum::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> g_sum::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> g_sum::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> g_sum::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> g_sum::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> g_sum::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> g_sum::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> g_sum::ap_const_lv32_1 = "1";
const sc_lv<1> g_sum::ap_const_lv1_0 = "0";
const sc_lv<32> g_sum::ap_const_lv32_3 = "11";
const sc_lv<32> g_sum::ap_const_lv32_4 = "100";
const sc_lv<32> g_sum::ap_const_lv32_5 = "101";
const sc_lv<32> g_sum::ap_const_lv32_A = "1010";
const sc_lv<5> g_sum::ap_const_lv5_0 = "00000";
const sc_lv<32> g_sum::ap_const_lv32_2 = "10";
const sc_lv<1> g_sum::ap_const_lv1_1 = "1";
const sc_lv<3> g_sum::ap_const_lv3_0 = "000";
const sc_lv<32> g_sum::ap_const_lv32_B = "1011";
const sc_lv<32> g_sum::ap_const_lv32_6 = "110";
const sc_lv<5> g_sum::ap_const_lv5_10 = "10000";
const sc_lv<5> g_sum::ap_const_lv5_1 = "1";
const sc_lv<3> g_sum::ap_const_lv3_4 = "100";
const sc_lv<3> g_sum::ap_const_lv3_1 = "1";
const sc_lv<4> g_sum::ap_const_lv4_0 = "0000";
const bool g_sum::ap_const_boolean_1 = true;

g_sum::g_sum(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lenetSynthMatlab_bkb_U14 = new lenetSynthMatlab_bkb<1,5,32,32,32>("lenetSynthMatlab_bkb_U14");
    lenetSynthMatlab_bkb_U14->clk(ap_clk);
    lenetSynthMatlab_bkb_U14->reset(ap_rst);
    lenetSynthMatlab_bkb_U14->din0(y_load_reg_244);
    lenetSynthMatlab_bkb_U14->din1(x_load_2_reg_239);
    lenetSynthMatlab_bkb_U14->ce(ap_var_for_const0);
    lenetSynthMatlab_bkb_U14->dout(grp_fu_104_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_125_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_125_p2 );

    SC_METHOD(thread_b_k_9_fu_159_p2);
    sensitive << ( b_k_reg_93 );

    SC_METHOD(thread_exitcond1_fu_125_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_1_reg_82 );

    SC_METHOD(thread_exitcond2_fu_108_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k_reg_71 );

    SC_METHOD(thread_exitcond_fu_153_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( b_k_reg_93 );

    SC_METHOD(thread_k_23_fu_114_p2);
    sensitive << ( k_reg_71 );

    SC_METHOD(thread_k_24_fu_131_p2);
    sensitive << ( k_1_reg_82 );

    SC_METHOD(thread_tmp1_cast_fu_171_p1);
    sensitive << ( tmp1_fu_165_p2 );

    SC_METHOD(thread_tmp1_fu_165_p2);
    sensitive << ( b_k_reg_93 );

    SC_METHOD(thread_tmp_133_fu_175_p2);
    sensitive << ( tmp_cast_reg_216 );
    sensitive << ( tmp1_cast_fu_171_p1 );

    SC_METHOD(thread_tmp_134_fu_180_p1);
    sensitive << ( tmp_133_fu_175_p2 );

    SC_METHOD(thread_tmp_135_fu_185_p1);
    sensitive << ( b_k_reg_93 );

    SC_METHOD(thread_tmp_151_fu_137_p1);
    sensitive << ( k_1_reg_82 );

    SC_METHOD(thread_tmp_cast_fu_149_p1);
    sensitive << ( tmp_s_fu_141_p3 );

    SC_METHOD(thread_tmp_fu_120_p1);
    sensitive << ( k_reg_71 );

    SC_METHOD(thread_tmp_s_fu_141_p3);
    sensitive << ( tmp_151_fu_137_p1 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_120_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_134_fu_180_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_y_address0);
    sensitive << ( tmp_reg_198 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( y_addr_2_reg_234 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_135_fu_185_p1 );

    SC_METHOD(thread_y_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_y_d0);
    sensitive << ( x_q0 );
    sensitive << ( tmp_136_reg_249 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_y_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_108_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_125_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_153_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "g_sum_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
    sc_trace(mVcdFile, y_address0, "(port)y_address0");
    sc_trace(mVcdFile, y_ce0, "(port)y_ce0");
    sc_trace(mVcdFile, y_we0, "(port)y_we0");
    sc_trace(mVcdFile, y_d0, "(port)y_d0");
    sc_trace(mVcdFile, y_q0, "(port)y_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, k_23_fu_114_p2, "k_23_fu_114_p2");
    sc_trace(mVcdFile, k_23_reg_193, "k_23_reg_193");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_120_p1, "tmp_fu_120_p1");
    sc_trace(mVcdFile, tmp_reg_198, "tmp_reg_198");
    sc_trace(mVcdFile, exitcond2_fu_108_p2, "exitcond2_fu_108_p2");
    sc_trace(mVcdFile, k_24_fu_131_p2, "k_24_fu_131_p2");
    sc_trace(mVcdFile, k_24_reg_211, "k_24_reg_211");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_cast_fu_149_p1, "tmp_cast_fu_149_p1");
    sc_trace(mVcdFile, tmp_cast_reg_216, "tmp_cast_reg_216");
    sc_trace(mVcdFile, exitcond1_fu_125_p2, "exitcond1_fu_125_p2");
    sc_trace(mVcdFile, b_k_9_fu_159_p2, "b_k_9_fu_159_p2");
    sc_trace(mVcdFile, b_k_9_reg_224, "b_k_9_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_153_p2, "exitcond_fu_153_p2");
    sc_trace(mVcdFile, y_addr_2_reg_234, "y_addr_2_reg_234");
    sc_trace(mVcdFile, x_load_2_reg_239, "x_load_2_reg_239");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, y_load_reg_244, "y_load_reg_244");
    sc_trace(mVcdFile, grp_fu_104_p2, "grp_fu_104_p2");
    sc_trace(mVcdFile, tmp_136_reg_249, "tmp_136_reg_249");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, k_reg_71, "k_reg_71");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, k_1_reg_82, "k_1_reg_82");
    sc_trace(mVcdFile, b_k_reg_93, "b_k_reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_134_fu_180_p1, "tmp_134_fu_180_p1");
    sc_trace(mVcdFile, tmp_135_fu_185_p1, "tmp_135_fu_185_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_151_fu_137_p1, "tmp_151_fu_137_p1");
    sc_trace(mVcdFile, tmp_s_fu_141_p3, "tmp_s_fu_141_p3");
    sc_trace(mVcdFile, tmp1_fu_165_p2, "tmp1_fu_165_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_171_p1, "tmp1_cast_fu_171_p1");
    sc_trace(mVcdFile, tmp_133_fu_175_p2, "tmp_133_fu_175_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

g_sum::~g_sum() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete lenetSynthMatlab_bkb_U14;
}

void g_sum::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void g_sum::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_125_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        b_k_reg_93 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        b_k_reg_93 = b_k_9_reg_224.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_108_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        k_1_reg_82 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_153_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        k_1_reg_82 = k_24_reg_211.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_71 = k_23_reg_193.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_reg_71 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_k_9_reg_224 = b_k_9_fu_159_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_23_reg_193 = k_23_fu_114_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_24_reg_211 = k_24_fu_131_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_136_reg_249 = grp_fu_104_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_125_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_cast_reg_216 = tmp_cast_fu_149_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_108_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_reg_198 = tmp_fu_120_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        x_load_2_reg_239 = x_q0.read();
        y_load_reg_244 = y_q0.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_153_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        y_addr_2_reg_234 =  (sc_lv<4>) (tmp_135_fu_185_p1.read());
    }
}

void g_sum::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void g_sum::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void g_sum::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void g_sum::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void g_sum::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void g_sum::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void g_sum::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void g_sum::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void g_sum::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void g_sum::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond1_fu_125_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void g_sum::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void g_sum::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_125_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void g_sum::thread_b_k_9_fu_159_p2() {
    b_k_9_fu_159_p2 = (!b_k_reg_93.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(b_k_reg_93.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void g_sum::thread_exitcond1_fu_125_p2() {
    exitcond1_fu_125_p2 = (!k_1_reg_82.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_1_reg_82.read() == ap_const_lv3_4);
}

void g_sum::thread_exitcond2_fu_108_p2() {
    exitcond2_fu_108_p2 = (!k_reg_71.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_71.read() == ap_const_lv5_10);
}

void g_sum::thread_exitcond_fu_153_p2() {
    exitcond_fu_153_p2 = (!b_k_reg_93.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(b_k_reg_93.read() == ap_const_lv5_10);
}

void g_sum::thread_k_23_fu_114_p2() {
    k_23_fu_114_p2 = (!k_reg_71.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(k_reg_71.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void g_sum::thread_k_24_fu_131_p2() {
    k_24_fu_131_p2 = (!k_1_reg_82.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_1_reg_82.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void g_sum::thread_tmp1_cast_fu_171_p1() {
    tmp1_cast_fu_171_p1 = esl_zext<7,5>(tmp1_fu_165_p2.read());
}

void g_sum::thread_tmp1_fu_165_p2() {
    tmp1_fu_165_p2 = (b_k_reg_93.read() ^ ap_const_lv5_10);
}

void g_sum::thread_tmp_133_fu_175_p2() {
    tmp_133_fu_175_p2 = (!tmp1_cast_fu_171_p1.read().is_01() || !tmp_cast_reg_216.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp1_cast_fu_171_p1.read()) + sc_biguint<7>(tmp_cast_reg_216.read()));
}

void g_sum::thread_tmp_134_fu_180_p1() {
    tmp_134_fu_180_p1 = esl_zext<64,7>(tmp_133_fu_175_p2.read());
}

void g_sum::thread_tmp_135_fu_185_p1() {
    tmp_135_fu_185_p1 = esl_zext<64,5>(b_k_reg_93.read());
}

void g_sum::thread_tmp_151_fu_137_p1() {
    tmp_151_fu_137_p1 = k_1_reg_82.read().range(2-1, 0);
}

void g_sum::thread_tmp_cast_fu_149_p1() {
    tmp_cast_fu_149_p1 = esl_zext<7,6>(tmp_s_fu_141_p3.read());
}

void g_sum::thread_tmp_fu_120_p1() {
    tmp_fu_120_p1 = esl_zext<64,5>(k_reg_71.read());
}

void g_sum::thread_tmp_s_fu_141_p3() {
    tmp_s_fu_141_p3 = esl_concat<2,4>(tmp_151_fu_137_p1.read(), ap_const_lv4_0);
}

void g_sum::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_address0 =  (sc_lv<7>) (tmp_134_fu_180_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_address0 =  (sc_lv<7>) (tmp_fu_120_p1.read());
    } else {
        x_address0 = "XXXXXXX";
    }
}

void g_sum::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void g_sum::thread_y_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        y_address0 = y_addr_2_reg_234.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        y_address0 =  (sc_lv<4>) (tmp_135_fu_185_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        y_address0 =  (sc_lv<4>) (tmp_reg_198.read());
    } else {
        y_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void g_sum::thread_y_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        y_ce0 = ap_const_logic_1;
    } else {
        y_ce0 = ap_const_logic_0;
    }
}

void g_sum::thread_y_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        y_d0 = tmp_136_reg_249.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        y_d0 = x_q0.read();
    } else {
        y_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void g_sum::thread_y_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        y_we0 = ap_const_logic_1;
    } else {
        y_we0 = ap_const_logic_0;
    }
}

void g_sum::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_108_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_125_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_153_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

}

