-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenetSynthMatlab is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImg_ce0 : OUT STD_LOGIC;
    inputImg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    netScores_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    netScores_ce0 : OUT STD_LOGIC;
    netScores_we0 : OUT STD_LOGIC;
    netScores_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lenetSynthMatlab is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenetSynthMatlab,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.261400,HLS_SYN_LAT=6978124,HLS_SYN_TPT=none,HLS_SYN_MEM=98,HLS_SYN_DSP=21,HLS_SYN_FF=6405,HLS_SYN_LUT=10555,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (169 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (169 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (169 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (169 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (169 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (169 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (169 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (169 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (169 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (169 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (169 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (169 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_A8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010101000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_497 : STD_LOGIC_VECTOR (10 downto 0) := "10010010111";
    constant ap_const_lv8_AC : STD_LOGIC_VECTOR (7 downto 0) := "10101100";
    constant ap_const_lv13_150 : STD_LOGIC_VECTOR (12 downto 0) := "0000101010000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_A8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010101000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv12_54 : STD_LOGIC_VECTOR (11 downto 0) := "000001010100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_18F : STD_LOGIC_VECTOR (8 downto 0) := "110001111";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (169 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal ap_CS_fsm_state165 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state165 : signal is "none";
    signal reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal ap_CS_fsm_state169 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state169 : signal is "none";
    signal reg_1293 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal reg_1297 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1249_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal grp_fu_1240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal f_cast_fu_1319_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_cast_reg_3569 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal f_5_fu_1329_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_5_reg_3577 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_cast_fu_1335_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul_cast_reg_3582 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal next_mul_fu_1339_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_3587 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_4_fu_1351_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_4_reg_3595 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_cast1_fu_1357_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_cast1_reg_3600 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_4_fu_1367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_4_reg_3608 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_cast_fu_1373_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_cast_reg_3613 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal k_9_fu_1383_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_9_reg_3621 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_fu_1389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_3626 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond30_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl6_fu_1395_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_reg_3631 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_2_fu_1413_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_2_reg_3639 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond29_fu_1407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_reg_3649 : STD_LOGIC_VECTOR (4 downto 0);
    signal inputImg_load_reg_3654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal fv11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal k_10_fu_1458_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_10_reg_3667 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exitcond_i_fu_1452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_reg_3677 : STD_LOGIC_VECTOR (13 downto 0);
    signal fv11_load_reg_3682 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal phi_mul2_cast_fu_1521_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul2_cast_reg_3687 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal next_mul3_fu_1525_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul3_reg_3692 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_fu_1537_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_3700 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_fu_1549_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_reg_3708 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_4_fu_1579_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_3713 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond27_fu_1543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_4_fu_1595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_4_reg_3721 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_8_fu_1619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_3726 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond26_fu_1589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_reg_3736 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal rowOutIdx_1_fu_1665_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_1_reg_3743 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal indvarinc_fu_1672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal f_1_cast_fu_1689_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_1_cast_reg_3768 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_6_fu_1703_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_6_reg_3776 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_cast_fu_1715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_reg_3781 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond25_fu_1697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul4_cast_fu_1719_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul4_cast_reg_3791 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal next_mul5_fu_1723_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul5_reg_3796 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_5_fu_1735_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_5_reg_3804 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_1759_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_reg_3809 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond24_fu_1729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_1765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_reg_3814 : STD_LOGIC_VECTOR (63 downto 0);
    signal colOutIdx_15_fu_1775_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_15_reg_3824 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal b_k_5_cast_fu_1789_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_k_5_cast_reg_3829 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond23_fu_1769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1793_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_3834 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal j_2_fu_1803_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_3843 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_1852_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_reg_3848 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond22_fu_1797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1857_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_49_reg_3854 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_1874_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_3860 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_3865 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_1994_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_3870 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal relu1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_reg_3886 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal relu1ActivationMap_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_1_reg_3892 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_6_fu_2100_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_maxval_6_reg_3898 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal p_Val2_6_fu_2143_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_reg_3908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_3913 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_2149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_reg_3918 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_2_cast_fu_2264_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_2_cast_reg_3923 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal f_7_fu_2274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_7_reg_3931 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_6_fu_2286_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_6_reg_3939 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal tmp9_fu_2312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_reg_3944 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond20_fu_2280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_5_fu_2324_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_5_reg_3952 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal k_14_fu_2340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_14_reg_3960 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_69_fu_2356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_reg_3965 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond18_fu_2334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_2386_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_73_reg_3970 : STD_LOGIC_VECTOR (8 downto 0);
    signal colOutIdx_10_fu_2402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_10_reg_3978 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_85_fu_2438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_reg_3983 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond17_fu_2396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_2468_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_86_reg_3988 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_k_8_fu_2488_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_8_reg_3996 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal exitcond16_fu_2482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_2526_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_103_reg_4006 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal pool1ActivationMap_l_reg_4011 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal fv14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal k_20_fu_2545_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_20_reg_4024 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal exitcond_i1_fu_2539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_2573_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_74_reg_4034 : STD_LOGIC_VECTOR (10 downto 0);
    signal fv14_load_reg_4039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal k_11_fu_2588_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_11_reg_4047 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp6_fu_2614_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_4052 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond15_fu_2582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_5_fu_2626_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_5_reg_4060 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal tmp_27_fu_2632_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_4065 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond14_fu_2620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_6_fu_2650_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_6_reg_4073 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_51_fu_2670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_reg_4078 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond13_fu_2644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_5_reg_4088 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal rowOutIdx_2_fu_2716_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_2_reg_4095 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal indvarinc1_fu_2723_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal f_3_cast_fu_2750_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_3_cast_reg_4122 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal f_8_fu_2760_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_8_reg_4130 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_2766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_reg_4135 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond12_fu_2754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_7_fu_2778_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_7_reg_4148 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal p_shl22_cast_fu_2800_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl22_cast_reg_4153 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond11_fu_2772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl23_cast_fu_2818_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl23_cast_reg_4158 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl24_cast_fu_2830_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl24_cast_reg_4163 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_37_fu_2834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_37_reg_4168 : STD_LOGIC_VECTOR (63 downto 0);
    signal colOutIdx_16_fu_2844_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_16_reg_4178 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal j_3_fu_2856_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_4186 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal tmp_148_fu_2862_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_reg_4191 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_fu_2850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_2893_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_118_reg_4197 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_120_fu_2903_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_reg_4203 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_133_reg_4209 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_3035_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_reg_4214 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_fu_3043_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_reg_4220 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal relu2ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_3_reg_4235 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal relu2ActivationMap_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_4_reg_4241 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_7_fu_3141_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_maxval_7_reg_4247 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_131_reg_4269 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_3208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_reg_4274 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_9_fu_3312_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_9_reg_4282 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal k_13_fu_3324_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_13_reg_4290 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal tmp19_fu_3350_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp19_reg_4295 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_3318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_9_fu_3362_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_9_reg_4303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal tmp_83_fu_3368_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_reg_4308 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond6_fu_3356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_7_fu_3386_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_7_reg_4316 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal tmp_106_fu_3406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_reg_4321 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_3380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool2ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal pool2ActivationMap_l_reg_4331 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal fv16_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal k_15_fu_3417_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_15_reg_4344 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal exitcond_i2_fu_3411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fv16_load_reg_4354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal k_21_fu_3439_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_21_reg_4362 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal tmp_34_fu_3445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_reg_4367 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_3433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc1ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_6_reg_4377 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal rowOutIdx_4_fu_3491_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal rowOutIdx_4_reg_4384 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal k_22_fu_3504_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_22_reg_4392 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal tmp_80_fu_3510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_reg_4397 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_3498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_13_fu_3520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal colOutIdx_13_reg_4405 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal exitcond2_fu_3514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal relu3ActivationMap_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal relu3ActivationMap_l_reg_4415 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal k_16_fu_3537_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_16_reg_4423 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal tmp_81_fu_3543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_reg_4428 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_3531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_14_fu_3553_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal colOutIdx_14_reg_4436 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state155 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state155 : signal is "none";
    signal exitcond_fu_3547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_relu3ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_relu3ActivationMap_3_reg_4446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal pool1ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool1ActivationMap_ce0 : STD_LOGIC;
    signal pool1ActivationMap_we0 : STD_LOGIC;
    signal pool1ActivationMap_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1ActivationMap_ce0 : STD_LOGIC;
    signal conv1ActivationMap_we0 : STD_LOGIC;
    signal relu1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal relu1ActivationMap_ce0 : STD_LOGIC;
    signal relu1ActivationMap_we0 : STD_LOGIC;
    signal relu1ActivationMap_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal relu1ActivationMap_ce1 : STD_LOGIC;
    signal fv10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv10_ce0 : STD_LOGIC;
    signal fv10_we0 : STD_LOGIC;
    signal fv10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fv11_ce0 : STD_LOGIC;
    signal fv11_we0 : STD_LOGIC;
    signal pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool2ActivationMap_ce0 : STD_LOGIC;
    signal pool2ActivationMap_we0 : STD_LOGIC;
    signal pool2ActivationMap_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2ActivationMap_ce0 : STD_LOGIC;
    signal conv2ActivationMap_we0 : STD_LOGIC;
    signal relu2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal relu2ActivationMap_ce0 : STD_LOGIC;
    signal relu2ActivationMap_we0 : STD_LOGIC;
    signal relu2ActivationMap_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal relu2ActivationMap_ce1 : STD_LOGIC;
    signal fv12_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fv12_ce0 : STD_LOGIC;
    signal fv12_we0 : STD_LOGIC;
    signal fv12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv13_ce0 : STD_LOGIC;
    signal fv13_we0 : STD_LOGIC;
    signal fv13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fv14_ce0 : STD_LOGIC;
    signal fv14_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_pool2ActivationMap_ce0 : STD_LOGIC;
    signal b_pool2ActivationMap_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fv15_ce0 : STD_LOGIC;
    signal fv15_we0 : STD_LOGIC;
    signal fv15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1ActivationMap_ce0 : STD_LOGIC;
    signal fc1ActivationMap_we0 : STD_LOGIC;
    signal fv16_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fv16_ce0 : STD_LOGIC;
    signal fv16_we0 : STD_LOGIC;
    signal relu3ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal relu3ActivationMap_ce0 : STD_LOGIC;
    signal relu3ActivationMap_we0 : STD_LOGIC;
    signal d_relu3ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_relu3ActivationMap_ce0 : STD_LOGIC;
    signal d_relu3ActivationMap_we0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_start : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_done : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_idle : STD_LOGIC;
    signal grp_c_sum_fu_1189_ap_ready : STD_LOGIC;
    signal grp_c_sum_fu_1189_x_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_c_sum_fu_1189_x_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_y_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_c_sum_fu_1189_y_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_y_we0 : STD_LOGIC;
    signal grp_c_sum_fu_1189_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_f_sum_fu_1195_ap_start : STD_LOGIC;
    signal grp_f_sum_fu_1195_ap_done : STD_LOGIC;
    signal grp_f_sum_fu_1195_ap_idle : STD_LOGIC;
    signal grp_f_sum_fu_1195_ap_ready : STD_LOGIC;
    signal grp_f_sum_fu_1195_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_f_sum_fu_1195_x_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_1195_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_f_sum_fu_1195_y_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_1195_y_we0 : STD_LOGIC;
    signal grp_f_sum_fu_1195_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_d_sum_fu_1201_ap_start : STD_LOGIC;
    signal grp_d_sum_fu_1201_ap_done : STD_LOGIC;
    signal grp_d_sum_fu_1201_ap_idle : STD_LOGIC;
    signal grp_d_sum_fu_1201_ap_ready : STD_LOGIC;
    signal grp_d_sum_fu_1201_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_d_sum_fu_1201_x_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_1201_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_d_sum_fu_1201_y_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_1201_y_we0 : STD_LOGIC;
    signal grp_d_sum_fu_1201_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_g_sum_fu_1207_ap_start : STD_LOGIC;
    signal grp_g_sum_fu_1207_ap_done : STD_LOGIC;
    signal grp_g_sum_fu_1207_ap_idle : STD_LOGIC;
    signal grp_g_sum_fu_1207_ap_ready : STD_LOGIC;
    signal grp_g_sum_fu_1207_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_g_sum_fu_1207_x_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_1207_y_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_g_sum_fu_1207_y_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_1207_y_we0 : STD_LOGIC;
    signal grp_g_sum_fu_1207_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sum_fu_1213_ap_start : STD_LOGIC;
    signal grp_sum_fu_1213_ap_done : STD_LOGIC;
    signal grp_sum_fu_1213_ap_idle : STD_LOGIC;
    signal grp_sum_fu_1213_ap_ready : STD_LOGIC;
    signal grp_sum_fu_1213_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_fu_1213_x_ce0 : STD_LOGIC;
    signal grp_sum_fu_1213_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sum_fu_1213_y_ce0 : STD_LOGIC;
    signal grp_sum_fu_1213_y_we0 : STD_LOGIC;
    signal grp_sum_fu_1213_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_641 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond32_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_652 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond31_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond33_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_664 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_reg_675 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal k4_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx1_reg_698 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_phi_mux_y5_i_phi_fu_712_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y5_i_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_719 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul2_reg_741 : STD_LOGIC_VECTOR (12 downto 0);
    signal colOutIdx_1_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond28_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_reg_763 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal invdar_reg_774 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_1683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_reg_785 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_796 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_1_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul4_reg_819 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_1_reg_830 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal j_reg_842 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal f_2_reg_853 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_2_reg_864 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond19_fu_2318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond21_fu_2268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_reg_876 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal k_2_reg_888 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_3_reg_899 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_1_reg_910 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_phi_mux_y3_i_phi_fu_924_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y3_i_reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i1_reg_931 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_3_reg_942 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_4_reg_953 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_k_2_reg_964 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal invdar1_reg_975 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_2734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_3_reg_986 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_assign_5_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_3_reg_1009 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_3_reg_1021 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal j_1_reg_1033 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal exitcond10_fu_2838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_4_reg_1044 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal k_4_reg_1056 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_fu_3306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_6_reg_1067 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_3_reg_1078 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_phi_mux_y1_i_phi_fu_1092_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_i_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i2_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_5_reg_1110 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal k_6_reg_1121 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal ap_phi_mux_tmp_82_phi_fu_1136_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_reg_1132 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_7_reg_1144 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_7_reg_1155 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal ap_phi_mux_tmp_88_phi_fu_1170_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_8_reg_1178 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_c_sum_fu_1189_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_f_sum_fu_1195_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grp_d_sum_fu_1201_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_g_sum_fu_1207_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal grp_sum_fu_1213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_22_fu_1433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_1448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_1464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_2005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_2013_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_6_cast_fu_2109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_2250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_2512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_fu_2534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_2551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_fu_2578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_2729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_119_fu_3048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_121_fu_3052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_7_cast_fu_3148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_fu_3295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_3423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_3428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_fu_3526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_fu_3559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_fu_282 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_2_fu_2121_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_3_fu_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_1_fu_2114_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_6_fu_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_5_fu_3159_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_7_fu_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_4_fu_3152_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_1243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_3_maxval_0_3_fu_2255_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal maxval_1_8_maxval_0_8_fu_3299_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal grp_fu_1219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal grp_fu_1240_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1249_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1256_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1419_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1428_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal colOutIdx1_cast_fu_1403_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_1438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl4_fu_1469_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_1481_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_1477_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_1489_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_1493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_cast_fu_1499_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_1503_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_cast_fu_1513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_1555_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_1567_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_1563_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_1575_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_k_cast_fu_1585_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_1601_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_fu_1606_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_fu_1610_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_fu_1615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowOutIdx_to_int_fu_1624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_1627_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_1637_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_1647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_cast1_fu_1693_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_1709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_8_fu_1741_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_1749_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_1759_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_5_fu_1781_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl13_fu_1809_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl14_fu_1823_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl13_cast_fu_1819_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_1833_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_1837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_1843_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_cast_fu_1848_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl15_fu_1862_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl15_cast_fu_1870_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_1895_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i_fu_1898_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_fu_1886_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i_cast_fu_1912_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1916_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_139_i_i_i_fu_1930_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_fu_1922_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_i_i_i_cast_fu_1936_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_1940_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_1948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_140_i_i_i_cast_fu_1956_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i_cast_fu_1908_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_140_i_i_i_fu_1952_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_141_i_i_i_fu_1960_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_56_fu_1972_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_i_i_i_fu_1966_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_58_fu_1980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_1984_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_cast_fu_2002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_cast_fu_2010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_maxval_to_int_fu_2018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_1_to_int_fu_2035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_2021_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_fu_2031_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_2058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_2052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_2038_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_fu_2048_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs4_fu_2076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_2070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_2064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_2082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_2088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_maxval_6_cast6_fu_2106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_i_i_i_fu_2138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_0_3_to_int_fu_2154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_3_to_int_fu_2172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_2158_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_2168_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_2196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_2190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_2176_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_2186_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_2214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_2208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_2202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_2220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_2226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_cast_fu_2237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_2240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_2245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_2232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl8_fu_2300_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_2308_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_2292_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_2_cast_fu_2330_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_fu_2346_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_69_fu_2356_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl11_fu_2362_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_fu_2374_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl11_cast_fu_2370_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl12_cast_fu_2382_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colOutIdx_3_cast_fu_2392_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_fu_2408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl17_fu_2414_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl18_fu_2426_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_cast_fu_2422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl18_cast_fu_2434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl19_fu_2444_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl20_fu_2456_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl19_cast_fu_2452_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl20_cast_fu_2464_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_k_1_cast1_fu_2478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_2494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_cast_fu_2499_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_100_fu_2503_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_100_cast_fu_2508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_k_1_cast_fu_2474_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_fu_2517_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_cast_fu_2522_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_103_cast_fu_2531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_2556_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_fu_2564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_cast_fu_2569_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_2602_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_2610_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_2594_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_k_2_cast_fu_2640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_fu_2656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_cast_fu_2661_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_fu_2665_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rowOutIdx_7_to_int_fu_2675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_2678_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_84_fu_2688_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs5_fu_2698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_2692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_2704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_2710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl16_fu_2792_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_12_fu_2784_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_77_fu_2804_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl21_fu_2810_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl22_fu_2822_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_2866_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_fu_2876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_2885_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_117_cast_fu_2881_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp14_fu_2898_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_123_fu_2908_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_136_fu_2936_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i2_fu_2939_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_2_fu_2927_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_i2_cast_fu_2953_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_fu_2957_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_139_i_i_i2_fu_2971_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_137_fu_2963_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_i_i_i2_cast_fu_2977_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_fu_2981_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_5_cast_fu_2989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_140_i_i_i2_cast_fu_2997_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_i2_cast_fu_2949_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_140_i_i_i2_fu_2993_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_141_i_i_i2_fu_3001_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_139_fu_3013_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_i_i_i2_fu_3007_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_134_fu_3021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_fu_3025_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_cast_fu_2916_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_maxval_3_to_int_fu_3059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_4_to_int_fu_3076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_fu_3062_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_149_fu_3072_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs9_fu_3099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_3093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_3079_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_150_fu_3089_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs10_fu_3117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs10_fu_3111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_3105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_fu_3123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_fu_3129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_3135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_cast_cast_fu_3056_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_6_i_i_i2_fu_3176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_3181_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_141_fu_3187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_147_fu_3193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_cast_fu_3205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_3199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_0_8_to_int_fu_3214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_8_to_int_fu_3231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_fu_3217_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_122_fu_3227_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs7_fu_3254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_3248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_3234_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_125_fu_3244_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs8_fu_3272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_3266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_3260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_3278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_130_fu_3284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_fu_3290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl10_fu_3338_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl10_cast_fu_3346_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_fu_3330_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_k_3_cast_fu_3376_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_fu_3392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp20_cast_fu_3397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_105_fu_3401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal rowOutIdx_8_to_int_fu_3450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_fu_3453_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_109_fu_3463_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs6_fu_3473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_3467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_3479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_3485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (169 downto 0);
    signal tmp_20_fu_1759_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_fu_2356_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component c_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component f_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component d_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component g_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_xdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenetSynthMatlab_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    pool1ActivationMap_U : component lenetSynthMatlab_cud
    generic map (
        DataWidth => 64,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool1ActivationMap_address0,
        ce0 => pool1ActivationMap_ce0,
        we0 => pool1ActivationMap_we0,
        d0 => pool1ActivationMap_d0,
        q0 => pool1ActivationMap_q0);

    conv1ActivationMap_U : component lenetSynthMatlab_dEe
    generic map (
        DataWidth => 64,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1ActivationMap_address0,
        ce0 => conv1ActivationMap_ce0,
        we0 => conv1ActivationMap_we0,
        d0 => grp_fu_1243_p1,
        q0 => conv1ActivationMap_q0);

    relu1ActivationMap_U : component lenetSynthMatlab_eOg
    generic map (
        DataWidth => 64,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu1ActivationMap_address0,
        ce0 => relu1ActivationMap_ce0,
        we0 => relu1ActivationMap_we0,
        d0 => rowOutIdx_1_reg_3743,
        q0 => relu1ActivationMap_q0,
        address1 => relu1ActivationMap_address1,
        ce1 => relu1ActivationMap_ce1,
        q1 => relu1ActivationMap_q1);

    fv10_U : component lenetSynthMatlab_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv10_address0,
        ce0 => fv10_ce0,
        we0 => fv10_we0,
        d0 => grp_fu_1234_p2,
        q0 => fv10_q0);

    fv11_U : component lenetSynthMatlab_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv11_address0,
        ce0 => fv11_ce0,
        we0 => fv11_we0,
        d0 => grp_sum_fu_1213_y_d0,
        q0 => fv11_q0);

    pool2ActivationMap_U : component lenetSynthMatlab_hbi
    generic map (
        DataWidth => 64,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool2ActivationMap_address0,
        ce0 => pool2ActivationMap_ce0,
        we0 => pool2ActivationMap_we0,
        d0 => pool2ActivationMap_d0,
        q0 => pool2ActivationMap_q0);

    conv2ActivationMap_U : component lenetSynthMatlab_ibs
    generic map (
        DataWidth => 64,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2ActivationMap_address0,
        ce0 => conv2ActivationMap_ce0,
        we0 => conv2ActivationMap_we0,
        d0 => grp_fu_1243_p1,
        q0 => conv2ActivationMap_q0);

    relu2ActivationMap_U : component lenetSynthMatlab_jbC
    generic map (
        DataWidth => 64,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu2ActivationMap_address0,
        ce0 => relu2ActivationMap_ce0,
        we0 => relu2ActivationMap_we0,
        d0 => rowOutIdx_2_reg_4095,
        q0 => relu2ActivationMap_q0,
        address1 => relu2ActivationMap_address1,
        ce1 => relu2ActivationMap_ce1,
        q1 => relu2ActivationMap_q1);

    fv12_U : component lenetSynthMatlab_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv12_address0,
        ce0 => fv12_ce0,
        we0 => fv12_we0,
        d0 => reg_1312,
        q0 => fv12_q0);

    fv13_U : component lenetSynthMatlab_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv13_address0,
        ce0 => fv13_ce0,
        we0 => fv13_we0,
        d0 => grp_c_sum_fu_1189_y_d0,
        q0 => fv13_q0);

    fv14_U : component lenetSynthMatlab_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv14_address0,
        ce0 => fv14_ce0,
        we0 => fv14_we0,
        d0 => grp_d_sum_fu_1201_y_d0,
        q0 => fv14_q0);

    b_pool2ActivationMap_U : component lenetSynthMatlab_ncg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_pool2ActivationMap_address0,
        ce0 => b_pool2ActivationMap_ce0,
        we0 => b_pool2ActivationMap_we0,
        d0 => reg_1312,
        q0 => b_pool2ActivationMap_q0);

    fv15_U : component lenetSynthMatlab_ocq
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv15_address0,
        ce0 => fv15_ce0,
        we0 => fv15_we0,
        d0 => grp_f_sum_fu_1195_y_d0,
        q0 => fv15_q0);

    fc1ActivationMap_U : component lenetSynthMatlab_pcA
    generic map (
        DataWidth => 64,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1ActivationMap_address0,
        ce0 => fc1ActivationMap_ce0,
        we0 => fc1ActivationMap_we0,
        d0 => grp_fu_1243_p1,
        q0 => fc1ActivationMap_q0);

    fv16_U : component lenetSynthMatlab_qcK
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv16_address0,
        ce0 => fv16_ce0,
        we0 => fv16_we0,
        d0 => grp_g_sum_fu_1207_y_d0,
        q0 => fv16_q0);

    relu3ActivationMap_U : component lenetSynthMatlab_pcA
    generic map (
        DataWidth => 64,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu3ActivationMap_address0,
        ce0 => relu3ActivationMap_ce0,
        we0 => relu3ActivationMap_we0,
        d0 => rowOutIdx_4_reg_4384,
        q0 => relu3ActivationMap_q0);

    d_relu3ActivationMap_U : component lenetSynthMatlab_sc4
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_relu3ActivationMap_address0,
        ce0 => d_relu3ActivationMap_ce0,
        we0 => d_relu3ActivationMap_we0,
        d0 => reg_1286,
        q0 => d_relu3ActivationMap_q0);

    grp_c_sum_fu_1189 : component c_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_c_sum_fu_1189_ap_start,
        ap_done => grp_c_sum_fu_1189_ap_done,
        ap_idle => grp_c_sum_fu_1189_ap_idle,
        ap_ready => grp_c_sum_fu_1189_ap_ready,
        x_address0 => grp_c_sum_fu_1189_x_address0,
        x_ce0 => grp_c_sum_fu_1189_x_ce0,
        x_q0 => fv12_q0,
        y_address0 => grp_c_sum_fu_1189_y_address0,
        y_ce0 => grp_c_sum_fu_1189_y_ce0,
        y_we0 => grp_c_sum_fu_1189_y_we0,
        y_d0 => grp_c_sum_fu_1189_y_d0,
        y_q0 => fv13_q0);

    grp_f_sum_fu_1195 : component f_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_f_sum_fu_1195_ap_start,
        ap_done => grp_f_sum_fu_1195_ap_done,
        ap_idle => grp_f_sum_fu_1195_ap_idle,
        ap_ready => grp_f_sum_fu_1195_ap_ready,
        x_address0 => grp_f_sum_fu_1195_x_address0,
        x_ce0 => grp_f_sum_fu_1195_x_ce0,
        x_q0 => b_pool2ActivationMap_q0,
        y_address0 => grp_f_sum_fu_1195_y_address0,
        y_ce0 => grp_f_sum_fu_1195_y_ce0,
        y_we0 => grp_f_sum_fu_1195_y_we0,
        y_d0 => grp_f_sum_fu_1195_y_d0,
        y_q0 => fv15_q0);

    grp_d_sum_fu_1201 : component d_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_d_sum_fu_1201_ap_start,
        ap_done => grp_d_sum_fu_1201_ap_done,
        ap_idle => grp_d_sum_fu_1201_ap_idle,
        ap_ready => grp_d_sum_fu_1201_ap_ready,
        x_address0 => grp_d_sum_fu_1201_x_address0,
        x_ce0 => grp_d_sum_fu_1201_x_ce0,
        x_q0 => fv13_q0,
        y_address0 => grp_d_sum_fu_1201_y_address0,
        y_ce0 => grp_d_sum_fu_1201_y_ce0,
        y_we0 => grp_d_sum_fu_1201_y_we0,
        y_d0 => grp_d_sum_fu_1201_y_d0,
        y_q0 => fv14_q0);

    grp_g_sum_fu_1207 : component g_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_g_sum_fu_1207_ap_start,
        ap_done => grp_g_sum_fu_1207_ap_done,
        ap_idle => grp_g_sum_fu_1207_ap_idle,
        ap_ready => grp_g_sum_fu_1207_ap_ready,
        x_address0 => grp_g_sum_fu_1207_x_address0,
        x_ce0 => grp_g_sum_fu_1207_x_ce0,
        x_q0 => fv15_q0,
        y_address0 => grp_g_sum_fu_1207_y_address0,
        y_ce0 => grp_g_sum_fu_1207_y_ce0,
        y_we0 => grp_g_sum_fu_1207_y_we0,
        y_d0 => grp_g_sum_fu_1207_y_d0,
        y_q0 => fv16_q0);

    grp_sum_fu_1213 : component sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sum_fu_1213_ap_start,
        ap_done => grp_sum_fu_1213_ap_done,
        ap_idle => grp_sum_fu_1213_ap_idle,
        ap_ready => grp_sum_fu_1213_ap_ready,
        x_address0 => grp_sum_fu_1213_x_address0,
        x_ce0 => grp_sum_fu_1213_x_ce0,
        x_q0 => fv10_q0,
        y_address0 => grp_sum_fu_1213_y_address0,
        y_ce0 => grp_sum_fu_1213_y_ce0,
        y_we0 => grp_sum_fu_1213_y_we0,
        y_d0 => grp_sum_fu_1213_y_d0,
        y_q0 => fv11_q0);

    lenetSynthMatlab_bkb_U17 : component lenetSynthMatlab_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1219_p0,
        din1 => grp_fu_1219_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1219_p2);

    lenetSynthMatlab_tde_U18 : component lenetSynthMatlab_tde
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1234_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p2);

    lenetSynthMatlab_udo_U19 : component lenetSynthMatlab_udo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1240_p0,
        dout => grp_fu_1240_p1);

    lenetSynthMatlab_vdy_U20 : component lenetSynthMatlab_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_1286,
        dout => grp_fu_1243_p1);

    lenetSynthMatlab_wdI_U21 : component lenetSynthMatlab_wdI
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1249_p0,
        din1 => ap_const_lv64_3FF0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_1249_p2);

    lenetSynthMatlab_xdS_U22 : component lenetSynthMatlab_xdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_1256_p0,
        din1 => grp_fu_1256_p1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1256_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_c_sum_fu_1189_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_c_sum_fu_1189_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond18_fu_2334_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                    grp_c_sum_fu_1189_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_c_sum_fu_1189_ap_ready = ap_const_logic_1)) then 
                    grp_c_sum_fu_1189_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_d_sum_fu_1201_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_d_sum_fu_1201_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                    grp_d_sum_fu_1201_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_d_sum_fu_1201_ap_ready = ap_const_logic_1)) then 
                    grp_d_sum_fu_1201_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_f_sum_fu_1195_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_f_sum_fu_1195_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond7_fu_3318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state105))) then 
                    grp_f_sum_fu_1195_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_f_sum_fu_1195_ap_ready = ap_const_logic_1)) then 
                    grp_f_sum_fu_1195_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_g_sum_fu_1207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_g_sum_fu_1207_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
                    grp_g_sum_fu_1207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_g_sum_fu_1207_ap_ready = ap_const_logic_1)) then 
                    grp_g_sum_fu_1207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sum_fu_1213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sum_fu_1213_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond30_fu_1377_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_sum_fu_1213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sum_fu_1213_ap_ready = ap_const_logic_1)) then 
                    grp_sum_fu_1213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_k_1_reg_910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_fu_2396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                b_k_1_reg_910 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                b_k_1_reg_910 <= b_k_8_reg_3996;
            end if; 
        end if;
    end process;

    b_k_2_reg_964_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_fu_2620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                b_k_2_reg_964 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                b_k_2_reg_964 <= b_k_6_reg_4073;
            end if; 
        end if;
    end process;

    b_k_3_reg_1078_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_3356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state106))) then 
                b_k_3_reg_1078 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
                b_k_3_reg_1078 <= b_k_7_reg_4316;
            end if; 
        end if;
    end process;

    b_k_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond27_fu_1543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                b_k_reg_763 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                b_k_reg_763 <= b_k_4_reg_3721;
            end if; 
        end if;
    end process;

    c_1_reg_830_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                c_1_reg_830 <= colOutIdx_15_reg_3824;
            elsif (((exitcond24_fu_1729_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                c_1_reg_830 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_2_reg_876_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                c_2_reg_876 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                c_2_reg_876 <= c_5_reg_3952;
            end if; 
        end if;
    end process;

    c_3_reg_1021_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                c_3_reg_1021 <= colOutIdx_16_reg_4178;
            elsif (((exitcond11_fu_2772_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                c_3_reg_1021 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_reg_675_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond32_fu_1345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_reg_675 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                c_reg_675 <= c_4_reg_3608;
            end if; 
        end if;
    end process;

    colOutIdx1_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond30_fu_1377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                colOutIdx1_reg_698 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                colOutIdx1_reg_698 <= colOutIdx_2_reg_3639;
            end if; 
        end if;
    end process;

    colOutIdx_1_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond28_fu_1531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                colOutIdx_1_reg_752 <= ap_const_lv5_0;
            elsif (((exitcond26_fu_1589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                colOutIdx_1_reg_752 <= colOutIdx_reg_3708;
            end if; 
        end if;
    end process;

    colOutIdx_3_reg_899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16_fu_2482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then 
                colOutIdx_3_reg_899 <= colOutIdx_10_reg_3978;
            elsif (((exitcond18_fu_2334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                colOutIdx_3_reg_899 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    colOutIdx_4_reg_953_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_fu_2644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                colOutIdx_4_reg_953 <= colOutIdx_5_reg_4060;
            elsif (((exitcond15_fu_2582_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                colOutIdx_4_reg_953 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    colOutIdx_6_reg_1067_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_3380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                colOutIdx_6_reg_1067 <= colOutIdx_9_reg_4303;
            elsif (((exitcond7_fu_3318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105))) then 
                colOutIdx_6_reg_1067 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    colOutIdx_7_reg_1144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
                colOutIdx_7_reg_1144 <= colOutIdx_13_reg_4405;
            elsif (((exitcond3_fu_3498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state136))) then 
                colOutIdx_7_reg_1144 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    colOutIdx_8_reg_1178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state165)) then 
                colOutIdx_8_reg_1178 <= colOutIdx_14_reg_4436;
            elsif (((exitcond1_fu_3531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
                colOutIdx_8_reg_1178 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    f_1_reg_785_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond24_fu_1729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                f_1_reg_785 <= f_6_reg_3776;
            elsif (((tmp_3_fu_1683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                f_1_reg_785 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_2_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                f_2_reg_853 <= f_7_reg_3931;
            elsif (((exitcond25_fu_1697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                f_2_reg_853 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_3_reg_986_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_2772_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then 
                f_3_reg_986 <= f_8_reg_4130;
            elsif (((tmp_17_fu_2734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                f_3_reg_986 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_4_reg_1044_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_fu_2754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                f_4_reg_1044 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
                f_4_reg_1044 <= f_9_reg_4282;
            end if; 
        end if;
    end process;

    f_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond32_fu_1345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_reg_641 <= f_5_reg_3577;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_reg_641 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar1_reg_975_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond15_fu_2582_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                invdar1_reg_975 <= ap_const_lv9_0;
            elsif (((tmp_17_fu_2734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                invdar1_reg_975 <= indvarinc1_fu_2723_p2;
            end if; 
        end if;
    end process;

    invdar_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond28_fu_1531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                invdar_reg_774 <= ap_const_lv11_0;
            elsif (((tmp_3_fu_1683_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                invdar_reg_774 <= indvarinc_fu_1672_p2;
            end if; 
        end if;
    end process;

    j_1_reg_1033_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_fu_2838_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                j_1_reg_1033 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                j_1_reg_1033 <= j_3_reg_4186;
            end if; 
        end if;
    end process;

    j_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                j_reg_842 <= j_2_reg_3843;
            elsif (((exitcond23_fu_1769_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                j_reg_842 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k4_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond31_fu_1361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k4_reg_687 <= ap_const_lv3_0;
            elsif (((exitcond29_fu_1407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k4_reg_687 <= k_9_reg_3621;
            end if; 
        end if;
    end process;

    k_1_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_730 <= ap_const_lv5_0;
            elsif (((exitcond27_fu_1543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                k_1_reg_730 <= k_reg_3700;
            end if; 
        end if;
    end process;

    k_2_reg_888_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19_fu_2318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                k_2_reg_888 <= ap_const_lv3_0;
            elsif (((exitcond17_fu_2396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                k_2_reg_888 <= k_14_reg_3960;
            end if; 
        end if;
    end process;

    k_3_reg_942_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond21_fu_2268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                k_3_reg_942 <= ap_const_lv4_0;
            elsif (((exitcond14_fu_2620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                k_3_reg_942 <= k_11_reg_4047;
            end if; 
        end if;
    end process;

    k_4_reg_1056_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_3306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                k_4_reg_1056 <= ap_const_lv3_0;
            elsif (((exitcond6_fu_3356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then 
                k_4_reg_1056 <= k_13_reg_4290;
            end if; 
        end if;
    end process;

    k_5_reg_1110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_3306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                k_5_reg_1110 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
                k_5_reg_1110 <= k_21_reg_4362;
            end if; 
        end if;
    end process;

    k_6_reg_1121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then 
                k_6_reg_1121 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
                k_6_reg_1121 <= k_22_reg_4392;
            end if; 
        end if;
    end process;

    k_7_reg_1155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_3498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state136))) then 
                k_7_reg_1155 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
                k_7_reg_1155 <= k_16_reg_4423;
            end if; 
        end if;
    end process;

    k_i1_reg_931_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                k_i1_reg_931 <= k_20_reg_4024;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                k_i1_reg_931 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_i2_reg_1099_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
                k_i2_reg_1099 <= k_15_reg_4344;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
                k_i2_reg_1099 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                k_i_reg_719 <= k_10_reg_3667;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_i_reg_719 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    maxval_1_6_fu_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                maxval_1_6_fu_290 <= maxval_1_5_fu_3159_p3;
            elsif (((tmp_17_fu_2734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                maxval_1_6_fu_290 <= reg_1293;
            end if; 
        end if;
    end process;

    maxval_1_7_fu_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                maxval_1_7_fu_294 <= maxval_1_4_fu_3152_p3;
            elsif (((tmp_17_fu_2734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                maxval_1_7_fu_294 <= reg_1297;
            end if; 
        end if;
    end process;

    phi_mul2_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul2_reg_741 <= ap_const_lv13_0;
            elsif (((exitcond27_fu_1543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                phi_mul2_reg_741 <= next_mul3_reg_3692;
            end if; 
        end if;
    end process;

    phi_mul4_reg_819_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                phi_mul4_reg_819 <= next_mul5_reg_3796;
            elsif (((exitcond25_fu_1697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                phi_mul4_reg_819 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_664_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_664 <= ap_const_lv13_0;
            elsif (((exitcond31_fu_1361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_664 <= next_mul_reg_3587;
            end if; 
        end if;
    end process;

    r_1_reg_808_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                r_1_reg_808 <= r_5_reg_3804;
            elsif (((exitcond25_fu_1697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                r_1_reg_808 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_2_reg_864_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond21_fu_2268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                r_2_reg_864 <= ap_const_lv4_0;
            elsif (((exitcond19_fu_2318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                r_2_reg_864 <= r_6_reg_3939;
            end if; 
        end if;
    end process;

    r_3_reg_1009_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                r_3_reg_1009 <= r_7_reg_4148;
            elsif (((exitcond12_fu_2754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                r_3_reg_1009 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_reg_652_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond33_fu_1323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_reg_652 <= ap_const_lv5_0;
            elsif (((exitcond31_fu_1361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_reg_652 <= r_4_reg_3595;
            end if; 
        end if;
    end process;

    tmp_82_reg_1132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
                tmp_82_reg_1132 <= grp_fu_1219_p2;
            elsif (((exitcond3_fu_3498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state136))) then 
                tmp_82_reg_1132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_88_reg_1166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state165)) then 
                tmp_88_reg_1166 <= grp_fu_1219_p2;
            elsif (((exitcond1_fu_3531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
                tmp_88_reg_1166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_assign_5_reg_997_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                x_assign_5_reg_997 <= grp_fu_1249_p2;
            elsif (((exitcond12_fu_2754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                x_assign_5_reg_997 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    x_assign_reg_796_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                x_assign_reg_796 <= grp_fu_1249_p2;
            elsif (((exitcond25_fu_1697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                x_assign_reg_796 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    y1_i_reg_1089_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
                y1_i_reg_1089 <= grp_fu_1219_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
                y1_i_reg_1089 <= fv16_q0;
            end if; 
        end if;
    end process;

    y3_i_reg_921_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                y3_i_reg_921 <= grp_fu_1219_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                y3_i_reg_921 <= fv14_q0;
            end if; 
        end if;
    end process;

    y5_i_reg_709_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                y5_i_reg_709 <= grp_fu_1219_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                y5_i_reg_709 <= fv11_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                b_k_4_reg_3721 <= b_k_4_fu_1595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond23_fu_1769_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    b_k_5_cast_reg_3829(4 downto 1) <= b_k_5_cast_fu_1789_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                b_k_6_reg_4073 <= b_k_6_fu_2650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                b_k_7_reg_4316 <= b_k_7_fu_3386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                b_k_8_reg_3996 <= b_k_8_fu_2488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                b_maxval_1_reg_3892 <= relu1ActivationMap_q1;
                b_maxval_reg_3886 <= relu1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                b_maxval_3_reg_4235 <= relu2ActivationMap_q0;
                b_maxval_4_reg_4241 <= relu2ActivationMap_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                b_maxval_6_reg_3898 <= b_maxval_6_fu_2100_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                b_maxval_7_reg_4247 <= b_maxval_7_fu_3141_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_4_reg_3608 <= c_4_fu_1367_p2;
                    c_cast1_reg_3600(4 downto 0) <= c_cast1_fu_1357_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                c_5_reg_3952 <= c_5_fu_2324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                colOutIdx_10_reg_3978 <= colOutIdx_10_fu_2402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state137)) then
                colOutIdx_13_reg_4405 <= colOutIdx_13_fu_3520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state155)) then
                colOutIdx_14_reg_4436 <= colOutIdx_14_fu_3553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                colOutIdx_15_reg_3824 <= colOutIdx_15_fu_1775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                colOutIdx_16_reg_4178 <= colOutIdx_16_fu_2844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                colOutIdx_2_reg_3639 <= colOutIdx_2_fu_1413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                colOutIdx_5_reg_4060 <= colOutIdx_5_fu_2626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                colOutIdx_9_reg_4303 <= colOutIdx_9_fu_3362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                colOutIdx_reg_3708 <= colOutIdx_fu_1549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state156)) then
                d_relu3ActivationMap_3_reg_4446 <= d_relu3ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    f_1_cast_reg_3768(2 downto 0) <= f_1_cast_fu_1689_p1(2 downto 0);
                f_6_reg_3776 <= f_6_fu_1703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                    f_2_cast_reg_3923(4 downto 0) <= f_2_cast_fu_2264_p1(4 downto 0);
                f_7_reg_3931 <= f_7_fu_2274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                    f_3_cast_reg_4122(4 downto 0) <= f_3_cast_fu_2750_p1(4 downto 0);
                f_8_reg_4130 <= f_8_fu_2760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_5_reg_3577 <= f_5_fu_1329_p2;
                    f_cast_reg_3569(2 downto 0) <= f_cast_fu_1319_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                f_9_reg_4282 <= f_9_fu_3312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                fv11_load_reg_3682 <= fv11_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                fv14_load_reg_4039 <= fv14_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state121)) then
                fv16_load_reg_4354 <= fv16_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                inputImg_load_reg_3654 <= inputImg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                j_2_reg_3843 <= j_2_fu_1803_p2;
                tmp_26_reg_3834 <= tmp_26_fu_1793_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                j_3_reg_4186 <= j_3_fu_2856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    k4_cast_reg_3613(2 downto 0) <= k4_cast_fu_1373_p1(2 downto 0);
                k_9_reg_3621 <= k_9_fu_1383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                k_10_reg_3667 <= k_10_fu_1458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                k_11_reg_4047 <= k_11_fu_2588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                k_13_reg_4290 <= k_13_fu_3324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                k_14_reg_3960 <= k_14_fu_2340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then
                k_15_reg_4344 <= k_15_fu_3417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state154)) then
                k_16_reg_4423 <= k_16_fu_3537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                k_20_reg_4024 <= k_20_fu_2545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state132)) then
                k_21_reg_4362 <= k_21_fu_3439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state136)) then
                k_22_reg_4392 <= k_22_fu_3504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                k_reg_3700 <= k_fu_1537_p2;
                next_mul3_reg_3692 <= next_mul3_fu_1525_p2;
                    phi_mul2_cast_reg_3687(12 downto 0) <= phi_mul2_cast_fu_1521_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                maxval_1_3_fu_286 <= maxval_1_1_fu_2114_p3;
                maxval_1_fu_282 <= maxval_1_2_fu_2121_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                next_mul5_reg_3796 <= next_mul5_fu_1723_p2;
                    phi_mul4_cast_reg_3791(12 downto 0) <= phi_mul4_cast_fu_1719_p1(12 downto 0);
                r_5_reg_3804 <= r_5_fu_1735_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                next_mul_reg_3587 <= next_mul_fu_1339_p2;
                    phi_mul_cast_reg_3582(12 downto 0) <= phi_mul_cast_fu_1335_p1(12 downto 0);
                r_4_reg_3595 <= r_4_fu_1351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond22_fu_1797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                p_Val2_2_reg_3870 <= p_Val2_2_fu_1994_p3;
                    tmp_39_reg_3860(7 downto 1) <= tmp_39_fu_1874_p2(7 downto 1);
                tmp_43_reg_3865 <= p_Val2_s_reg_3814(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                p_Val2_6_reg_3908 <= p_Val2_6_fu_2143_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_2850_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                p_Val2_9_reg_4214 <= p_Val2_9_fu_3035_p3;
                tmp16_reg_4220 <= tmp16_fu_3043_p2;
                tmp_133_reg_4209 <= p_Val2_s_37_reg_4168(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_2772_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                p_Val2_s_37_reg_4168 <= p_Val2_s_37_fu_2834_p1;
                    p_shl22_cast_reg_4153(8 downto 6) <= p_shl22_cast_fu_2800_p1(8 downto 6);
                    p_shl23_cast_reg_4158(10 downto 8) <= p_shl23_cast_fu_2818_p1(10 downto 8);
                    p_shl24_cast_reg_4163(8 downto 6) <= p_shl24_cast_fu_2830_p1(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond24_fu_1729_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                p_Val2_s_reg_3814 <= p_Val2_s_fu_1765_p1;
                    tmp_20_reg_3809(13 downto 3) <= tmp_20_fu_1759_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond30_fu_1377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    p_shl6_reg_3631(4 downto 2) <= p_shl6_fu_1395_p3(4 downto 2);
                tmp_18_reg_3626 <= tmp_18_fu_1389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                pool1ActivationMap_l_reg_4011 <= pool1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                pool2ActivationMap_l_reg_4331 <= pool2ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                r_6_reg_3939 <= r_6_fu_2286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                r_7_reg_4148 <= r_7_fu_2778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state169) or (ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_1286 <= grp_fu_1219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_1293 <= maxval_1_fu_282;
                reg_1297 <= maxval_1_3_fu_286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state139) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state58))) then
                reg_1307 <= grp_fu_1240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state160) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state62))) then
                reg_1312 <= grp_fu_1234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state138)) then
                relu3ActivationMap_l_reg_4415 <= relu3ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                rowOutIdx_1_reg_3743 <= rowOutIdx_1_fu_1665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                rowOutIdx_2_reg_4095 <= rowOutIdx_2_fu_2716_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state134)) then
                rowOutIdx_4_reg_4384 <= rowOutIdx_4_fu_3491_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                rowOutIdx_5_reg_4088 <= conv2ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state133)) then
                rowOutIdx_6_reg_4377 <= fc1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                rowOutIdx_reg_3736 <= conv1ActivationMap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_3318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    tmp19_reg_4295(8 downto 4) <= tmp19_fu_3350_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond15_fu_2582_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    tmp6_reg_4052(10 downto 5) <= tmp6_fu_2614_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    tmp9_reg_3944(10 downto 5) <= tmp9_fu_2312_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16_fu_2482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                tmp_103_reg_4006 <= tmp_103_fu_2526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_3380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    tmp_106_reg_4321(8 downto 0) <= tmp_106_fu_3406_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_2850_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                tmp_118_reg_4197 <= tmp_118_fu_2893_p2;
                tmp_120_reg_4203 <= tmp_120_fu_2903_p2;
                tmp_148_reg_4191 <= tmp_148_fu_2862_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                tmp_126_reg_4274 <= tmp_126_fu_3208_p2;
                tmp_131_reg_4269 <= grp_fu_1256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_1452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                tmp_15_reg_3677 <= tmp_15_fu_1508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond29_fu_1407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_23_reg_3649 <= tmp_23_fu_1443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_fu_2620_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    tmp_27_reg_4065(7 downto 4) <= tmp_27_fu_2632_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_fu_2754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                tmp_32_reg_4135 <= tmp_32_fu_2766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    tmp_34_reg_4367(6 downto 0) <= tmp_34_fu_3445_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_37_reg_3913 <= grp_fu_1256_p2;
                tmp_59_reg_3918 <= tmp_59_fu_2149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond22_fu_1797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                tmp_45_reg_3848 <= tmp_45_fu_1852_p2;
                tmp_49_reg_3854 <= tmp_49_fu_1857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond27_fu_1543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    tmp_4_reg_3713(8 downto 1) <= tmp_4_fu_1579_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_fu_2644_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    tmp_51_reg_4078(10 downto 0) <= tmp_51_fu_2670_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond25_fu_1697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                tmp_5_cast_reg_3781 <= tmp_5_cast_fu_1715_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18_fu_2334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    tmp_69_reg_3965(11 downto 2) <= tmp_69_fu_2356_p2(11 downto 2);
                    tmp_73_reg_3970(8 downto 1) <= tmp_73_fu_2386_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_2539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                tmp_74_reg_4034 <= tmp_74_fu_2573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_3498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state136))) then
                    tmp_80_reg_4397(6 downto 0) <= tmp_80_fu_3510_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_3531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then
                    tmp_81_reg_4428(3 downto 0) <= tmp_81_fu_3543_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_3356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    tmp_83_reg_4308(6 downto 4) <= tmp_83_fu_3368_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_fu_2396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    tmp_85_reg_3983(7 downto 1) <= tmp_85_fu_2438_p2(7 downto 1);
                    tmp_86_reg_3988(6 downto 1) <= tmp_86_fu_2468_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond26_fu_1589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    tmp_8_reg_3726(31 downto 0) <= tmp_8_fu_1619_p1(31 downto 0);
            end if;
        end if;
    end process;
    f_cast_reg_3569(13 downto 3) <= "00000000000";
    phi_mul_cast_reg_3582(13) <= '0';
    c_cast1_reg_3600(9 downto 5) <= "00000";
    k4_cast_reg_3613(4 downto 3) <= "00";
    p_shl6_reg_3631(1 downto 0) <= "00";
    phi_mul2_cast_reg_3687(13) <= '0';
    tmp_4_reg_3713(0) <= '0';
    tmp_8_reg_3726(63 downto 32) <= "00000000000000000000000000000000";
    f_1_cast_reg_3768(8 downto 3) <= "000000";
    phi_mul4_cast_reg_3791(13) <= '0';
    tmp_20_reg_3809(2 downto 0) <= "000";
    b_k_5_cast_reg_3829(0) <= '0';
    b_k_5_cast_reg_3829(7 downto 5) <= "000";
    tmp_39_reg_3860(0) <= '0';
    f_2_cast_reg_3923(7 downto 5) <= "000";
    tmp9_reg_3944(4 downto 0) <= "00000";
    tmp_69_reg_3965(1 downto 0) <= "00";
    tmp_73_reg_3970(0) <= '0';
    tmp_85_reg_3983(0) <= '0';
    tmp_86_reg_3988(0) <= '0';
    tmp6_reg_4052(4 downto 0) <= "00000";
    tmp_27_reg_4065(3 downto 0) <= "0000";
    tmp_51_reg_4078(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    f_3_cast_reg_4122(7 downto 5) <= "000";
    p_shl22_cast_reg_4153(5 downto 0) <= "000000";
    p_shl22_cast_reg_4153(10 downto 9) <= "00";
    p_shl23_cast_reg_4158(7 downto 0) <= "10000000";
    p_shl23_cast_reg_4158(11) <= '0';
    p_shl24_cast_reg_4163(5 downto 0) <= "100000";
    p_shl24_cast_reg_4163(11 downto 9) <= "000";
    tmp19_reg_4295(3 downto 0) <= "0000";
    tmp_83_reg_4308(3 downto 0) <= "0000";
    tmp_106_reg_4321(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_34_reg_4367(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_80_reg_4397(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_81_reg_4428(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state34, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond30_fu_1377_p2, ap_CS_fsm_state6, exitcond29_fu_1407_p2, ap_CS_fsm_state15, exitcond_i_fu_1452_p2, ap_CS_fsm_state27, ap_CS_fsm_state28, exitcond27_fu_1543_p2, ap_CS_fsm_state29, exitcond26_fu_1589_p2, ap_CS_fsm_state33, exitcond25_fu_1697_p2, ap_CS_fsm_state35, exitcond24_fu_1729_p2, ap_CS_fsm_state36, exitcond23_fu_1769_p2, ap_CS_fsm_state37, exitcond22_fu_1797_p2, ap_CS_fsm_state51, ap_CS_fsm_state52, exitcond20_fu_2280_p2, ap_CS_fsm_state53, ap_CS_fsm_state54, exitcond18_fu_2334_p2, ap_CS_fsm_state55, exitcond17_fu_2396_p2, ap_CS_fsm_state56, exitcond16_fu_2482_p2, ap_CS_fsm_state69, exitcond_i1_fu_2539_p2, ap_CS_fsm_state81, exitcond15_fu_2582_p2, ap_CS_fsm_state82, exitcond14_fu_2620_p2, ap_CS_fsm_state83, exitcond13_fu_2644_p2, ap_CS_fsm_state87, ap_CS_fsm_state88, exitcond12_fu_2754_p2, ap_CS_fsm_state89, exitcond11_fu_2772_p2, ap_CS_fsm_state90, ap_CS_fsm_state91, exitcond9_fu_2850_p2, ap_CS_fsm_state104, ap_CS_fsm_state105, exitcond7_fu_3318_p2, ap_CS_fsm_state106, exitcond6_fu_3356_p2, ap_CS_fsm_state107, exitcond5_fu_3380_p2, ap_CS_fsm_state120, exitcond_i2_fu_3411_p2, ap_CS_fsm_state132, exitcond4_fu_3433_p2, ap_CS_fsm_state136, exitcond3_fu_3498_p2, ap_CS_fsm_state137, exitcond2_fu_3514_p2, ap_CS_fsm_state154, exitcond1_fu_3531_p2, ap_CS_fsm_state155, exitcond_fu_3547_p2, grp_c_sum_fu_1189_ap_done, grp_f_sum_fu_1195_ap_done, grp_d_sum_fu_1201_ap_done, grp_g_sum_fu_1207_ap_done, grp_sum_fu_1213_ap_done, exitcond32_fu_1345_p2, exitcond31_fu_1361_p2, exitcond33_fu_1323_p2, exitcond28_fu_1531_p2, tmp_3_fu_1683_p2, exitcond19_fu_2318_p2, exitcond21_fu_2268_p2, tmp_17_fu_2734_p2, exitcond10_fu_2838_p2, exitcond8_fu_3306_p2, ap_CS_fsm_state64, ap_CS_fsm_state115, ap_CS_fsm_state66, ap_CS_fsm_state117, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond33_fu_1323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond32_fu_1345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond31_fu_1361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond30_fu_1377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond29_fu_1407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_sum_fu_1213_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((exitcond_i_fu_1452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state27 => 
                if (((exitcond28_fu_1531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((exitcond27_fu_1543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((exitcond26_fu_1589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state33 => 
                if (((tmp_3_fu_1683_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((exitcond25_fu_1697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((exitcond24_fu_1729_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((exitcond23_fu_1769_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state37 => 
                if (((exitcond22_fu_1797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state51 => 
                if (((exitcond21_fu_2268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((exitcond20_fu_2280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                if (((exitcond19_fu_2318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                if (((exitcond18_fu_2334_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state55 => 
                if (((exitcond17_fu_2396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                if (((exitcond16_fu_2482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_c_sum_fu_1189_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (grp_d_sum_fu_1201_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((exitcond_i1_fu_2539_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state81 => 
                if (((exitcond15_fu_2582_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                if (((exitcond14_fu_2620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state83 => 
                if (((exitcond13_fu_2644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state87 => 
                if (((tmp_17_fu_2734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((exitcond12_fu_2754_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                if (((exitcond11_fu_2772_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state90 => 
                if (((exitcond10_fu_2838_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state91 => 
                if (((exitcond9_fu_2850_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state104 => 
                if (((exitcond8_fu_3306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_state132;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_state105 => 
                if (((exitcond7_fu_3318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state105))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state106 => 
                if (((exitcond6_fu_3356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state107 => 
                if (((exitcond5_fu_3380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (grp_f_sum_fu_1195_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and (grp_g_sum_fu_1207_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                if (((exitcond_i2_fu_3411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state132 => 
                if (((exitcond4_fu_3433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    ap_NS_fsm <= ap_ST_fsm_state136;
                else
                    ap_NS_fsm <= ap_ST_fsm_state133;
                end if;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state136 => 
                if (((exitcond3_fu_3498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state136))) then
                    ap_NS_fsm <= ap_ST_fsm_state154;
                else
                    ap_NS_fsm <= ap_ST_fsm_state137;
                end if;
            when ap_ST_fsm_state137 => 
                if (((exitcond2_fu_3514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state137))) then
                    ap_NS_fsm <= ap_ST_fsm_state149;
                else
                    ap_NS_fsm <= ap_ST_fsm_state138;
                end if;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state154 => 
                if (((exitcond1_fu_3531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state154))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state155;
                end if;
            when ap_ST_fsm_state155 => 
                if (((exitcond_fu_3547_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155))) then
                    ap_NS_fsm <= ap_ST_fsm_state166;
                else
                    ap_NS_fsm <= ap_ST_fsm_state156;
                end if;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state154 <= ap_CS_fsm(153);
    ap_CS_fsm_state155 <= ap_CS_fsm(154);
    ap_CS_fsm_state156 <= ap_CS_fsm(155);
    ap_CS_fsm_state157 <= ap_CS_fsm(156);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state165 <= ap_CS_fsm(164);
    ap_CS_fsm_state169 <= ap_CS_fsm(168);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);

    ap_done_assign_proc : process(ap_CS_fsm_state154, exitcond1_fu_3531_p2)
    begin
        if (((exitcond1_fu_3531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_tmp_82_phi_fu_1136_p4 <= tmp_82_reg_1132;
    ap_phi_mux_tmp_88_phi_fu_1170_p4 <= tmp_88_reg_1166;
    ap_phi_mux_y1_i_phi_fu_1092_p4 <= y1_i_reg_1089;
    ap_phi_mux_y3_i_phi_fu_924_p4 <= y3_i_reg_921;
    ap_phi_mux_y5_i_phi_fu_712_p4 <= y5_i_reg_709;

    ap_ready_assign_proc : process(ap_CS_fsm_state154, exitcond1_fu_3531_p2)
    begin
        if (((exitcond1_fu_3531_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_k_1_cast1_fu_2478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_1_reg_910),8));
    b_k_1_cast_fu_2474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_1_reg_910),7));
    b_k_2_cast_fu_2640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_2_reg_964),8));
    b_k_3_cast_fu_3376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_3_reg_1078),7));
    b_k_4_fu_1595_p2 <= std_logic_vector(unsigned(b_k_reg_763) + unsigned(ap_const_lv3_1));
    b_k_5_cast_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_5_fu_1781_p3),8));
    b_k_5_fu_1781_p3 <= (c_1_reg_830 & ap_const_lv1_0);
    b_k_6_fu_2650_p2 <= std_logic_vector(unsigned(b_k_2_reg_964) + unsigned(ap_const_lv5_1));
    b_k_7_fu_3386_p2 <= std_logic_vector(unsigned(b_k_3_reg_1078) + unsigned(ap_const_lv5_1));
    b_k_8_fu_2488_p2 <= std_logic_vector(unsigned(b_k_1_reg_910) + unsigned(ap_const_lv3_1));
    b_k_cast_fu_1585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_reg_763),9));
    b_maxval_1_to_int_fu_2035_p1 <= b_maxval_1_reg_3892;
    b_maxval_3_to_int_fu_3059_p1 <= b_maxval_3_reg_4235;
    b_maxval_4_to_int_fu_3076_p1 <= b_maxval_4_reg_4241;
        b_maxval_6_cast6_fu_2106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_maxval_6_reg_3898),32));

    b_maxval_6_cast_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_maxval_6_cast6_fu_2106_p1),64));
    b_maxval_6_fu_2100_p3 <= 
        tmp_49_reg_3854 when (tmp_76_fu_2094_p2(0) = '1') else 
        tmp_45_reg_3848;
    b_maxval_7_cast_fu_3148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_maxval_7_reg_4247),64));
    b_maxval_7_fu_3141_p3 <= 
        tmp_120_reg_4203 when (tmp_146_fu_3135_p2(0) = '1') else 
        tmp_119_cast_cast_fu_3056_p1;
    b_maxval_to_int_fu_2018_p1 <= b_maxval_reg_3886;

    b_pool2ActivationMap_address0_assign_proc : process(tmp_106_reg_4321, grp_f_sum_fu_1195_x_address0, ap_CS_fsm_state114, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            b_pool2ActivationMap_address0 <= tmp_106_reg_4321(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            b_pool2ActivationMap_address0 <= grp_f_sum_fu_1195_x_address0;
        else 
            b_pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_pool2ActivationMap_ce0_assign_proc : process(grp_f_sum_fu_1195_x_ce0, ap_CS_fsm_state114, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            b_pool2ActivationMap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            b_pool2ActivationMap_ce0 <= grp_f_sum_fu_1195_x_ce0;
        else 
            b_pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            b_pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            b_pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_4_fu_1367_p2 <= std_logic_vector(unsigned(c_reg_675) + unsigned(ap_const_lv5_1));
    c_5_fu_2324_p2 <= std_logic_vector(unsigned(c_2_reg_876) + unsigned(ap_const_lv4_1));
    c_cast1_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_675),10));
    colOutIdx1_cast_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx1_reg_698),5));
    colOutIdx_10_fu_2402_p2 <= std_logic_vector(unsigned(colOutIdx_3_reg_899) + unsigned(ap_const_lv3_1));
    colOutIdx_13_fu_3520_p2 <= std_logic_vector(unsigned(colOutIdx_7_reg_1144) + unsigned(ap_const_lv7_1));
    colOutIdx_14_fu_3553_p2 <= std_logic_vector(unsigned(colOutIdx_8_reg_1178) + unsigned(ap_const_lv7_1));
    colOutIdx_15_fu_1775_p2 <= std_logic_vector(unsigned(c_1_reg_830) + unsigned(ap_const_lv4_1));
    colOutIdx_16_fu_2844_p2 <= std_logic_vector(unsigned(c_3_reg_1021) + unsigned(ap_const_lv3_1));
    colOutIdx_2_fu_1413_p2 <= std_logic_vector(unsigned(colOutIdx1_reg_698) + unsigned(ap_const_lv3_1));
    colOutIdx_3_cast_fu_2392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_3_reg_899),4));
    colOutIdx_5_fu_2626_p2 <= std_logic_vector(unsigned(colOutIdx_4_reg_953) + unsigned(ap_const_lv4_1));
    colOutIdx_9_fu_3362_p2 <= std_logic_vector(unsigned(colOutIdx_6_reg_1067) + unsigned(ap_const_lv3_1));
    colOutIdx_fu_1549_p2 <= std_logic_vector(unsigned(colOutIdx_1_reg_752) + unsigned(ap_const_lv5_1));

    conv1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state29, tmp_8_fu_1619_p1, ap_CS_fsm_state26, tmp_16_fu_1516_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            conv1ActivationMap_address0 <= tmp_8_fu_1619_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            conv1ActivationMap_address0 <= tmp_16_fu_1516_p1(13 - 1 downto 0);
        else 
            conv1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            conv1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            conv1ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state83, tmp_51_fu_2670_p1, ap_CS_fsm_state80, tmp_75_fu_2578_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            conv2ActivationMap_address0 <= tmp_51_fu_2670_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            conv2ActivationMap_address0 <= tmp_75_fu_2578_p1(11 - 1 downto 0);
        else 
            conv2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            conv2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            conv2ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_relu3ActivationMap_address0_assign_proc : process(tmp_80_reg_4397, ap_CS_fsm_state155, ap_CS_fsm_state153, tmp_95_fu_3559_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            d_relu3ActivationMap_address0 <= tmp_95_fu_3559_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            d_relu3ActivationMap_address0 <= tmp_80_reg_4397(7 - 1 downto 0);
        else 
            d_relu3ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    d_relu3ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state155, ap_CS_fsm_state153)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state153) or (ap_const_logic_1 = ap_CS_fsm_state155))) then 
            d_relu3ActivationMap_ce0 <= ap_const_logic_1;
        else 
            d_relu3ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_relu3ActivationMap_we0_assign_proc : process(ap_CS_fsm_state153)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            d_relu3ActivationMap_we0 <= ap_const_logic_1;
        else 
            d_relu3ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_2838_p2 <= "1" when (c_3_reg_1021 = ap_const_lv3_5) else "0";
    exitcond11_fu_2772_p2 <= "1" when (r_3_reg_1009 = ap_const_lv3_5) else "0";
    exitcond12_fu_2754_p2 <= "1" when (f_3_reg_986 = ap_const_lv5_10) else "0";
    exitcond13_fu_2644_p2 <= "1" when (b_k_2_reg_964 = ap_const_lv5_10) else "0";
    exitcond14_fu_2620_p2 <= "1" when (colOutIdx_4_reg_953 = ap_const_lv4_A) else "0";
    exitcond15_fu_2582_p2 <= "1" when (k_3_reg_942 = ap_const_lv4_A) else "0";
    exitcond16_fu_2482_p2 <= "1" when (b_k_1_reg_910 = ap_const_lv3_6) else "0";
    exitcond17_fu_2396_p2 <= "1" when (colOutIdx_3_reg_899 = ap_const_lv3_5) else "0";
    exitcond18_fu_2334_p2 <= "1" when (k_2_reg_888 = ap_const_lv3_5) else "0";
    exitcond19_fu_2318_p2 <= "1" when (c_2_reg_876 = ap_const_lv4_A) else "0";
    exitcond1_fu_3531_p2 <= "1" when (k_7_reg_1155 = ap_const_lv4_A) else "0";
    exitcond20_fu_2280_p2 <= "1" when (r_2_reg_864 = ap_const_lv4_A) else "0";
    exitcond21_fu_2268_p2 <= "1" when (f_2_reg_853 = ap_const_lv5_10) else "0";
    exitcond22_fu_1797_p2 <= "1" when (j_reg_842 = ap_const_lv2_2) else "0";
    exitcond23_fu_1769_p2 <= "1" when (c_1_reg_830 = ap_const_lv4_E) else "0";
    exitcond24_fu_1729_p2 <= "1" when (r_1_reg_808 = ap_const_lv4_E) else "0";
    exitcond25_fu_1697_p2 <= "1" when (f_1_reg_785 = ap_const_lv3_6) else "0";
    exitcond26_fu_1589_p2 <= "1" when (b_k_reg_763 = ap_const_lv3_6) else "0";
    exitcond27_fu_1543_p2 <= "1" when (colOutIdx_1_reg_752 = ap_const_lv5_1C) else "0";
    exitcond28_fu_1531_p2 <= "1" when (k_1_reg_730 = ap_const_lv5_1C) else "0";
    exitcond29_fu_1407_p2 <= "1" when (colOutIdx1_reg_698 = ap_const_lv3_5) else "0";
    exitcond2_fu_3514_p2 <= "1" when (colOutIdx_7_reg_1144 = ap_const_lv7_78) else "0";
    exitcond30_fu_1377_p2 <= "1" when (k4_reg_687 = ap_const_lv3_5) else "0";
    exitcond31_fu_1361_p2 <= "1" when (c_reg_675 = ap_const_lv5_1C) else "0";
    exitcond32_fu_1345_p2 <= "1" when (r_reg_652 = ap_const_lv5_1C) else "0";
    exitcond33_fu_1323_p2 <= "1" when (f_reg_641 = ap_const_lv3_6) else "0";
    exitcond3_fu_3498_p2 <= "1" when (k_6_reg_1121 = ap_const_lv7_54) else "0";
    exitcond4_fu_3433_p2 <= "1" when (k_5_reg_1110 = ap_const_lv7_78) else "0";
    exitcond5_fu_3380_p2 <= "1" when (b_k_3_reg_1078 = ap_const_lv5_10) else "0";
    exitcond6_fu_3356_p2 <= "1" when (colOutIdx_6_reg_1067 = ap_const_lv3_5) else "0";
    exitcond7_fu_3318_p2 <= "1" when (k_4_reg_1056 = ap_const_lv3_5) else "0";
    exitcond8_fu_3306_p2 <= "1" when (f_4_reg_1044 = ap_const_lv7_78) else "0";
    exitcond9_fu_2850_p2 <= "1" when (j_1_reg_1033 = ap_const_lv2_2) else "0";
    exitcond_fu_3547_p2 <= "1" when (colOutIdx_8_reg_1178 = ap_const_lv7_54) else "0";
    exitcond_i1_fu_2539_p2 <= "1" when (k_i1_reg_931 = ap_const_lv3_5) else "0";
    exitcond_i2_fu_3411_p2 <= "1" when (k_i2_reg_1099 = ap_const_lv4_F) else "0";
    exitcond_i_fu_1452_p2 <= "1" when (k_i_reg_719 = ap_const_lv3_4) else "0";
    f_1_cast1_fu_1693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_1_reg_785),8));
    f_1_cast_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_1_reg_785),9));
    f_2_cast_fu_2264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_2_reg_853),8));
    f_3_cast_fu_2750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_3_reg_986),8));
    f_5_fu_1329_p2 <= std_logic_vector(unsigned(f_reg_641) + unsigned(ap_const_lv3_1));
    f_6_fu_1703_p2 <= std_logic_vector(unsigned(f_1_reg_785) + unsigned(ap_const_lv3_1));
    f_7_fu_2274_p2 <= std_logic_vector(unsigned(f_2_reg_853) + unsigned(ap_const_lv5_1));
    f_8_fu_2760_p2 <= std_logic_vector(unsigned(f_3_reg_986) + unsigned(ap_const_lv5_1));
    f_9_fu_3312_p2 <= std_logic_vector(unsigned(f_4_reg_1044) + unsigned(ap_const_lv7_1));
    f_cast_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_641),14));

    fc1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state132, tmp_34_fu_3445_p1, ap_CS_fsm_state131, tmp_41_fu_3428_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            fc1ActivationMap_address0 <= tmp_34_fu_3445_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            fc1ActivationMap_address0 <= tmp_41_fu_3428_p1(7 - 1 downto 0);
        else 
            fc1ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            fc1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            fc1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            fc1ActivationMap_we0 <= ap_const_logic_1;
        else 
            fc1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv10_address0_assign_proc : process(grp_sum_fu_1213_x_address0, ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_24_fu_1448_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fv10_address0 <= tmp_24_fu_1448_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fv10_address0 <= grp_sum_fu_1213_x_address0;
        else 
            fv10_address0 <= "XXXXX";
        end if; 
    end process;


    fv10_ce0_assign_proc : process(grp_sum_fu_1213_x_ce0, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fv10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fv10_ce0 <= grp_sum_fu_1213_x_ce0;
        else 
            fv10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv10_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fv10_we0 <= ap_const_logic_1;
        else 
            fv10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv11_address0_assign_proc : process(ap_CS_fsm_state15, grp_sum_fu_1213_y_address0, ap_CS_fsm_state12, tmp_i_fu_1464_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fv11_address0 <= tmp_i_fu_1464_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fv11_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fv11_address0 <= grp_sum_fu_1213_y_address0;
        else 
            fv11_address0 <= "XXX";
        end if; 
    end process;


    fv11_ce0_assign_proc : process(ap_CS_fsm_state15, grp_sum_fu_1213_y_ce0, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            fv11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fv11_ce0 <= grp_sum_fu_1213_y_ce0;
        else 
            fv11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv11_we0_assign_proc : process(grp_sum_fu_1213_y_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fv11_we0 <= grp_sum_fu_1213_y_we0;
        else 
            fv11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv12_address0_assign_proc : process(grp_c_sum_fu_1189_x_address0, ap_CS_fsm_state63, ap_CS_fsm_state64, tmp_104_fu_2534_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            fv12_address0 <= tmp_104_fu_2534_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fv12_address0 <= grp_c_sum_fu_1189_x_address0;
        else 
            fv12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    fv12_ce0_assign_proc : process(grp_c_sum_fu_1189_x_ce0, ap_CS_fsm_state63, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            fv12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fv12_ce0 <= grp_c_sum_fu_1189_x_ce0;
        else 
            fv12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv12_we0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            fv12_we0 <= ap_const_logic_1;
        else 
            fv12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv13_address0_assign_proc : process(grp_c_sum_fu_1189_y_address0, grp_d_sum_fu_1201_x_address0, ap_CS_fsm_state64, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            fv13_address0 <= grp_d_sum_fu_1201_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fv13_address0 <= grp_c_sum_fu_1189_y_address0;
        else 
            fv13_address0 <= "XXXXX";
        end if; 
    end process;


    fv13_ce0_assign_proc : process(grp_c_sum_fu_1189_y_ce0, grp_d_sum_fu_1201_x_ce0, ap_CS_fsm_state64, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            fv13_ce0 <= grp_d_sum_fu_1201_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fv13_ce0 <= grp_c_sum_fu_1189_y_ce0;
        else 
            fv13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv13_we0_assign_proc : process(grp_c_sum_fu_1189_y_we0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fv13_we0 <= grp_c_sum_fu_1189_y_we0;
        else 
            fv13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv14_address0_assign_proc : process(ap_CS_fsm_state69, grp_d_sum_fu_1201_y_address0, ap_CS_fsm_state66, tmp_i1_fu_2551_p1, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            fv14_address0 <= tmp_i1_fu_2551_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            fv14_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            fv14_address0 <= grp_d_sum_fu_1201_y_address0;
        else 
            fv14_address0 <= "XXX";
        end if; 
    end process;


    fv14_ce0_assign_proc : process(ap_CS_fsm_state69, grp_d_sum_fu_1201_y_ce0, ap_CS_fsm_state66, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            fv14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            fv14_ce0 <= grp_d_sum_fu_1201_y_ce0;
        else 
            fv14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv14_we0_assign_proc : process(grp_d_sum_fu_1201_y_we0, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            fv14_we0 <= grp_d_sum_fu_1201_y_we0;
        else 
            fv14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv15_address0_assign_proc : process(grp_f_sum_fu_1195_y_address0, grp_g_sum_fu_1207_x_address0, ap_CS_fsm_state115, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fv15_address0 <= grp_g_sum_fu_1207_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            fv15_address0 <= grp_f_sum_fu_1195_y_address0;
        else 
            fv15_address0 <= "XXXXXXX";
        end if; 
    end process;


    fv15_ce0_assign_proc : process(grp_f_sum_fu_1195_y_ce0, grp_g_sum_fu_1207_x_ce0, ap_CS_fsm_state115, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fv15_ce0 <= grp_g_sum_fu_1207_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            fv15_ce0 <= grp_f_sum_fu_1195_y_ce0;
        else 
            fv15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv15_we0_assign_proc : process(grp_f_sum_fu_1195_y_we0, ap_CS_fsm_state115)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            fv15_we0 <= grp_f_sum_fu_1195_y_we0;
        else 
            fv15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv16_address0_assign_proc : process(ap_CS_fsm_state120, grp_g_sum_fu_1207_y_address0, ap_CS_fsm_state117, tmp_i2_fu_3423_p1, ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            fv16_address0 <= tmp_i2_fu_3423_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            fv16_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fv16_address0 <= grp_g_sum_fu_1207_y_address0;
        else 
            fv16_address0 <= "XXXX";
        end if; 
    end process;


    fv16_ce0_assign_proc : process(ap_CS_fsm_state120, grp_g_sum_fu_1207_y_ce0, ap_CS_fsm_state117, ap_CS_fsm_state118)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state118))) then 
            fv16_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fv16_ce0 <= grp_g_sum_fu_1207_y_ce0;
        else 
            fv16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv16_we0_assign_proc : process(grp_g_sum_fu_1207_y_we0, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            fv16_we0 <= grp_g_sum_fu_1207_y_we0;
        else 
            fv16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_c_sum_fu_1189_ap_start <= grp_c_sum_fu_1189_ap_start_reg;
    grp_d_sum_fu_1201_ap_start <= grp_d_sum_fu_1201_ap_start_reg;
    grp_f_sum_fu_1195_ap_start <= grp_f_sum_fu_1195_ap_start_reg;

    grp_fu_1219_p0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state69, ap_CS_fsm_state120, ap_CS_fsm_state137, ap_CS_fsm_state155, ap_phi_mux_y5_i_phi_fu_712_p4, y5_i_reg_709, ap_phi_mux_y3_i_phi_fu_924_p4, y3_i_reg_921, ap_phi_mux_y1_i_phi_fu_1092_p4, y1_i_reg_1089, ap_phi_mux_tmp_82_phi_fu_1136_p4, tmp_82_reg_1132, ap_phi_mux_tmp_88_phi_fu_1170_p4, tmp_88_reg_1166, ap_CS_fsm_state17, ap_CS_fsm_state71, ap_CS_fsm_state122, ap_CS_fsm_state144, ap_CS_fsm_state161)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state161)) then 
            grp_fu_1219_p0 <= tmp_88_reg_1166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            grp_fu_1219_p0 <= ap_phi_mux_tmp_88_phi_fu_1170_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
            grp_fu_1219_p0 <= tmp_82_reg_1132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            grp_fu_1219_p0 <= ap_phi_mux_tmp_82_phi_fu_1136_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            grp_fu_1219_p0 <= y1_i_reg_1089;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            grp_fu_1219_p0 <= ap_phi_mux_y1_i_phi_fu_1092_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_1219_p0 <= y3_i_reg_921;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_1219_p0 <= ap_phi_mux_y3_i_phi_fu_924_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1219_p0 <= y5_i_reg_709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_1219_p0 <= ap_phi_mux_y5_i_phi_fu_712_p4;
        else 
            grp_fu_1219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1219_p1_assign_proc : process(reg_1312, ap_CS_fsm_state15, fv11_load_reg_3682, ap_CS_fsm_state69, fv14_load_reg_4039, ap_CS_fsm_state120, fv16_load_reg_4354, ap_CS_fsm_state137, ap_CS_fsm_state155, ap_CS_fsm_state17, ap_CS_fsm_state71, ap_CS_fsm_state122, ap_CS_fsm_state144, ap_CS_fsm_state161)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state144))) then 
            grp_fu_1219_p1 <= reg_1312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            grp_fu_1219_p1 <= fv16_load_reg_4354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_1219_p1 <= fv14_load_reg_4039;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1219_p1 <= fv11_load_reg_3682;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state155) or (ap_const_logic_1 = ap_CS_fsm_state137))) then 
            grp_fu_1219_p1 <= ap_const_lv32_0;
        else 
            grp_fu_1219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1234_p0_assign_proc : process(reg_1307, inputImg_load_reg_3654, d_relu3ActivationMap_3_reg_4446, ap_CS_fsm_state8, ap_CS_fsm_state59, ap_CS_fsm_state110, ap_CS_fsm_state140, ap_CS_fsm_state157)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            grp_fu_1234_p0 <= d_relu3ActivationMap_3_reg_4446;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            grp_fu_1234_p0 <= reg_1307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_1234_p0 <= inputImg_load_reg_3654;
        else 
            grp_fu_1234_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1240_p0_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state109, ap_CS_fsm_state139, pool1ActivationMap_l_reg_4011, pool2ActivationMap_l_reg_4331, relu3ActivationMap_l_reg_4415)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            grp_fu_1240_p0 <= relu3ActivationMap_l_reg_4415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_fu_1240_p0 <= pool2ActivationMap_l_reg_4331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_1240_p0 <= pool1ActivationMap_l_reg_4011;
        else 
            grp_fu_1240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1249_p0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state90, x_assign_reg_796, x_assign_5_reg_997)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_1249_p0 <= x_assign_5_reg_997;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_1249_p0 <= x_assign_reg_796;
        else 
            grp_fu_1249_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1256_p0_assign_proc : process(ap_CS_fsm_state44, rowOutIdx_reg_3736, ap_CS_fsm_state31, b_maxval_reg_3886, ap_CS_fsm_state40, rowOutIdx_5_reg_4088, ap_CS_fsm_state85, b_maxval_3_reg_4235, ap_CS_fsm_state94, ap_CS_fsm_state97, rowOutIdx_6_reg_4377, ap_CS_fsm_state134, maxval_1_fu_282, maxval_1_6_fu_290)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1256_p0 <= rowOutIdx_6_reg_4377;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_1256_p0 <= maxval_1_6_fu_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_1256_p0 <= b_maxval_3_reg_4235;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_1256_p0 <= rowOutIdx_5_reg_4088;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1256_p0 <= maxval_1_fu_282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1256_p0 <= b_maxval_reg_3886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_1256_p0 <= rowOutIdx_reg_3736;
        else 
            grp_fu_1256_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1256_p1_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state31, b_maxval_1_reg_3892, ap_CS_fsm_state40, ap_CS_fsm_state85, b_maxval_4_reg_4241, ap_CS_fsm_state94, ap_CS_fsm_state97, ap_CS_fsm_state134, maxval_1_3_fu_286, maxval_1_7_fu_294)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_1256_p1 <= maxval_1_7_fu_294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_1256_p1 <= b_maxval_4_reg_4241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1256_p1 <= maxval_1_3_fu_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1256_p1 <= b_maxval_1_reg_3892;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_1256_p1 <= ap_const_lv64_0;
        else 
            grp_fu_1256_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_g_sum_fu_1207_ap_start <= grp_g_sum_fu_1207_ap_start_reg;
    grp_sum_fu_1213_ap_start <= grp_sum_fu_1213_ap_start_reg;
    indvarinc1_fu_2723_p2 <= std_logic_vector(unsigned(invdar1_reg_975) + unsigned(ap_const_lv9_1));
    indvarinc_fu_1672_p2 <= std_logic_vector(unsigned(invdar_reg_774) + unsigned(ap_const_lv11_1));
    inputImg_address0 <= tmp_22_fu_1433_p1(10 - 1 downto 0);

    inputImg_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inputImg_ce0 <= ap_const_logic_1;
        else 
            inputImg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_1803_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_reg_842));
    j_3_fu_2856_p2 <= std_logic_vector(unsigned(j_1_reg_1033) + unsigned(ap_const_lv2_1));
    k4_cast_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_reg_687),5));
    k_10_fu_1458_p2 <= std_logic_vector(unsigned(k_i_reg_719) + unsigned(ap_const_lv3_1));
    k_11_fu_2588_p2 <= std_logic_vector(unsigned(k_3_reg_942) + unsigned(ap_const_lv4_1));
    k_12_fu_2784_p3 <= (r_3_reg_1009 & ap_const_lv1_0);
    k_13_fu_3324_p2 <= std_logic_vector(unsigned(k_4_reg_1056) + unsigned(ap_const_lv3_1));
    k_14_fu_2340_p2 <= std_logic_vector(unsigned(k_2_reg_888) + unsigned(ap_const_lv3_1));
    k_15_fu_3417_p2 <= std_logic_vector(unsigned(k_i2_reg_1099) + unsigned(ap_const_lv4_1));
    k_16_fu_3537_p2 <= std_logic_vector(unsigned(k_7_reg_1155) + unsigned(ap_const_lv4_1));
    k_20_fu_2545_p2 <= std_logic_vector(unsigned(k_i1_reg_931) + unsigned(ap_const_lv3_1));
    k_21_fu_3439_p2 <= std_logic_vector(unsigned(k_5_reg_1110) + unsigned(ap_const_lv7_1));
    k_22_fu_3504_p2 <= std_logic_vector(unsigned(k_6_reg_1121) + unsigned(ap_const_lv7_1));
    k_2_cast_fu_2330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_888),4));
    k_8_fu_1741_p3 <= (r_1_reg_808 & ap_const_lv1_0);
    k_9_fu_1383_p2 <= std_logic_vector(unsigned(k4_reg_687) + unsigned(ap_const_lv3_1));
    k_fu_1537_p2 <= std_logic_vector(unsigned(k_1_reg_730) + unsigned(ap_const_lv5_1));
    loc_V_2_fu_2927_p4 <= p_Val2_s_37_reg_4168(62 downto 52);
    loc_V_fu_1886_p4 <= p_Val2_s_reg_3814(62 downto 52);
    maxval_0_3_to_int_fu_2154_p1 <= reg_1293;
    maxval_0_8_to_int_fu_3214_p1 <= maxval_1_6_fu_290;
    maxval_1_1_fu_2114_p3 <= 
        relu1ActivationMap_q1 when (tmp_26_reg_3834(0) = '1') else 
        maxval_1_3_fu_286;
    maxval_1_2_fu_2121_p3 <= 
        maxval_1_fu_282 when (tmp_26_reg_3834(0) = '1') else 
        relu1ActivationMap_q1;
    maxval_1_3_maxval_0_3_fu_2255_p3 <= 
        reg_1297 when (tmp_38_fu_2232_p2(0) = '1') else 
        reg_1293;
    maxval_1_3_to_int_fu_2172_p1 <= reg_1297;
    maxval_1_4_fu_3152_p3 <= 
        relu2ActivationMap_q1 when (tmp_148_reg_4191(0) = '1') else 
        maxval_1_7_fu_294;
    maxval_1_5_fu_3159_p3 <= 
        maxval_1_6_fu_290 when (tmp_148_reg_4191(0) = '1') else 
        relu2ActivationMap_q1;
    maxval_1_8_maxval_0_8_fu_3299_p3 <= 
        maxval_1_7_fu_294 when (tmp_132_fu_3290_p2(0) = '1') else 
        maxval_1_6_fu_290;
    maxval_1_8_to_int_fu_3231_p1 <= maxval_1_7_fu_294;
    netScores_address0 <= tmp_81_reg_4428(4 - 1 downto 0);

    netScores_ce0_assign_proc : process(ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            netScores_ce0 <= ap_const_logic_1;
        else 
            netScores_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    netScores_d0 <= reg_1286;

    netScores_we0_assign_proc : process(ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            netScores_we0 <= ap_const_logic_1;
        else 
            netScores_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_1525_p2 <= std_logic_vector(unsigned(phi_mul2_reg_741) + unsigned(ap_const_lv13_A8));
    next_mul5_fu_1723_p2 <= std_logic_vector(unsigned(phi_mul4_reg_819) + unsigned(ap_const_lv13_150));
    next_mul_fu_1339_p2 <= std_logic_vector(unsigned(phi_mul_reg_664) + unsigned(ap_const_lv13_A8));
    notlhs10_fu_3111_p2 <= "0" when (tmp_140_fu_3079_p4 = ap_const_lv11_7FF) else "1";
    notlhs1_fu_2190_p2 <= "0" when (tmp_28_fu_2158_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_2208_p2 <= "0" when (tmp_30_fu_2176_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_2052_p2 <= "0" when (tmp_53_fu_2021_p4 = ap_const_lv11_7FF) else "1";
    notlhs4_fu_2070_p2 <= "0" when (tmp_55_fu_2038_p4 = ap_const_lv11_7FF) else "1";
    notlhs5_fu_2692_p2 <= "0" when (tmp_78_fu_2678_p4 = ap_const_lv11_7FF) else "1";
    notlhs6_fu_3467_p2 <= "0" when (tmp_102_fu_3453_p4 = ap_const_lv11_7FF) else "1";
    notlhs7_fu_3248_p2 <= "0" when (tmp_115_fu_3217_p4 = ap_const_lv11_7FF) else "1";
    notlhs8_fu_3266_p2 <= "0" when (tmp_124_fu_3234_p4 = ap_const_lv11_7FF) else "1";
    notlhs9_fu_3093_p2 <= "0" when (tmp_138_fu_3062_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_1641_p2 <= "0" when (tmp_6_fu_1627_p4 = ap_const_lv11_7FF) else "1";
    notrhs10_fu_3117_p2 <= "1" when (tmp_150_fu_3089_p1 = ap_const_lv52_0) else "0";
    notrhs1_fu_2196_p2 <= "1" when (tmp_29_fu_2168_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_2214_p2 <= "1" when (tmp_31_fu_2186_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_2058_p2 <= "1" when (tmp_64_fu_2031_p1 = ap_const_lv52_0) else "0";
    notrhs4_fu_2076_p2 <= "1" when (tmp_66_fu_2048_p1 = ap_const_lv52_0) else "0";
    notrhs5_fu_2698_p2 <= "1" when (tmp_84_fu_2688_p1 = ap_const_lv52_0) else "0";
    notrhs6_fu_3473_p2 <= "1" when (tmp_109_fu_3463_p1 = ap_const_lv52_0) else "0";
    notrhs7_fu_3254_p2 <= "1" when (tmp_122_fu_3227_p1 = ap_const_lv52_0) else "0";
    notrhs8_fu_3272_p2 <= "1" when (tmp_125_fu_3244_p1 = ap_const_lv52_0) else "0";
    notrhs9_fu_3099_p2 <= "1" when (tmp_149_fu_3072_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_1647_p2 <= "1" when (tmp_9_fu_1637_p1 = ap_const_lv52_0) else "0";
    p_Val2_1_fu_3181_p3 <= 
        p_Val2_6_i_i_i2_fu_3176_p2 when (tmp_133_reg_4209(0) = '1') else 
        p_Val2_9_reg_4214;
    p_Val2_2_fu_1994_p3 <= 
        tmp_58_fu_1980_p1 when (tmp_54_fu_1922_p3(0) = '1') else 
        tmp_63_fu_1984_p4;
    p_Val2_6_fu_2143_p3 <= 
        p_Val2_6_i_i_i_fu_2138_p2 when (tmp_43_reg_3865(0) = '1') else 
        p_Val2_2_reg_3870;
    p_Val2_6_i_i_i2_fu_3176_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_reg_4214));
    p_Val2_6_i_i_i_fu_2138_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_reg_3870));
    p_Val2_9_fu_3035_p3 <= 
        tmp_134_fu_3021_p1 when (tmp_137_fu_2963_p3(0) = '1') else 
        tmp_135_fu_3025_p4;
    p_Val2_s_37_fu_2834_p1 <= x_assign_5_reg_997;
    p_Val2_s_fu_1765_p1 <= x_assign_reg_796;
    p_shl10_cast_fu_3346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_3338_p3),9));
    p_shl10_fu_3338_p3 <= (k_4_reg_1056 & ap_const_lv4_0);
    p_shl11_cast_fu_2370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl11_fu_2362_p3),9));
    p_shl11_fu_2362_p3 <= (k_2_reg_888 & ap_const_lv5_0);
    p_shl12_cast_fu_2382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl12_fu_2374_p3),9));
    p_shl12_fu_2374_p3 <= (k_2_reg_888 & ap_const_lv1_0);
    p_shl13_cast_fu_1819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_fu_1809_p4),9));
    p_shl13_fu_1809_p4 <= ((c_1_reg_830 & tmp_26_fu_1793_p1) & ap_const_lv3_0);
    p_shl14_cast_fu_1833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_fu_1823_p4),9));
    p_shl14_fu_1823_p4 <= ((c_1_reg_830 & tmp_26_fu_1793_p1) & ap_const_lv1_0);
    p_shl15_cast_fu_1870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl15_fu_1862_p3),8));
    p_shl15_fu_1862_p3 <= (c_1_reg_830 & ap_const_lv3_0);
    p_shl16_fu_2792_p3 <= (r_3_reg_1009 & ap_const_lv6_0);
    p_shl17_cast_fu_2422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_fu_2414_p3),8));
    p_shl17_fu_2414_p3 <= (tmp_79_fu_2408_p2 & ap_const_lv3_0);
    p_shl18_cast_fu_2434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_fu_2426_p3),8));
    p_shl18_fu_2426_p3 <= (tmp_79_fu_2408_p2 & ap_const_lv1_0);
    p_shl19_cast_fu_2452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_fu_2444_p3),7));
    p_shl19_fu_2444_p3 <= (colOutIdx_3_reg_899 & ap_const_lv3_0);
    p_shl1_cast_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_1567_p3),9));
    p_shl1_fu_1567_p3 <= (colOutIdx_1_reg_752 & ap_const_lv1_0);
    p_shl20_cast_fu_2464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_fu_2456_p3),7));
    p_shl20_fu_2456_p3 <= (colOutIdx_3_reg_899 & ap_const_lv1_0);
    p_shl21_fu_2810_p3 <= (tmp_77_fu_2804_p2 & ap_const_lv7_0);
    p_shl22_cast_fu_2800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_fu_2792_p3),11));
    p_shl22_fu_2822_p3 <= (tmp_77_fu_2804_p2 & ap_const_lv5_0);
    p_shl23_cast_fu_2818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl21_fu_2810_p3),12));
    p_shl24_cast_fu_2830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl22_fu_2822_p3),12));
    p_shl2_fu_2594_p3 <= (k_3_reg_942 & ap_const_lv7_0);
    p_shl3_cast_fu_2610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_2602_p3),11));
    p_shl3_fu_2602_p3 <= (k_3_reg_942 & ap_const_lv5_0);
    p_shl4_cast_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_1469_p3),9));
    p_shl4_fu_1469_p3 <= (c_reg_675 & ap_const_lv3_0);
    p_shl5_cast_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_1481_p3),9));
    p_shl5_fu_1481_p3 <= (c_reg_675 & ap_const_lv1_0);
    p_shl6_fu_1395_p3 <= (k4_reg_687 & ap_const_lv2_0);
    p_shl7_fu_2292_p3 <= (r_2_reg_864 & ap_const_lv7_0);
    p_shl8_cast_fu_2308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_2300_p3),11));
    p_shl8_fu_2300_p3 <= (r_2_reg_864 & ap_const_lv5_0);
    p_shl9_fu_3330_p3 <= (k_4_reg_1056 & ap_const_lv6_0);
    p_shl_cast_fu_1563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_1555_p3),9));
    p_shl_fu_1555_p3 <= (colOutIdx_1_reg_752 & ap_const_lv3_0);
    phi_mul2_cast_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul2_reg_741),14));
    phi_mul4_cast_fu_1719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul4_reg_819),14));
    phi_mul_cast_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_664),14));

    pool1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state56, ap_CS_fsm_state45, tmp_2_fu_1678_p1, tmp_62_fu_2250_p1, tmp_101_fu_2512_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            pool1ActivationMap_address0 <= tmp_101_fu_2512_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            pool1ActivationMap_address0 <= tmp_62_fu_2250_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pool1ActivationMap_address0 <= tmp_2_fu_1678_p1(11 - 1 downto 0);
        else 
            pool1ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state56, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            pool1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            pool1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool1ActivationMap_d0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state45, maxval_1_3_maxval_0_3_fu_2255_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            pool1ActivationMap_d0 <= maxval_1_3_maxval_0_3_fu_2255_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pool1ActivationMap_d0 <= ap_const_lv64_0;
        else 
            pool1ActivationMap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            pool1ActivationMap_we0 <= ap_const_logic_1;
        else 
            pool1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state107, tmp_106_fu_3406_p1, ap_CS_fsm_state98, tmp_10_fu_2729_p1, tmp_127_fu_3295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            pool2ActivationMap_address0 <= tmp_106_fu_3406_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            pool2ActivationMap_address0 <= tmp_127_fu_3295_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            pool2ActivationMap_address0 <= tmp_10_fu_2729_p1(9 - 1 downto 0);
        else 
            pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pool2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state107, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            pool2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2ActivationMap_d0_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state98, maxval_1_8_maxval_0_8_fu_3299_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            pool2ActivationMap_d0 <= maxval_1_8_maxval_0_8_fu_3299_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            pool2ActivationMap_d0 <= ap_const_lv64_0;
        else 
            pool2ActivationMap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state87, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_4_fu_1351_p2 <= std_logic_vector(unsigned(r_reg_652) + unsigned(ap_const_lv5_1));
    r_5_fu_1735_p2 <= std_logic_vector(unsigned(r_1_reg_808) + unsigned(ap_const_lv4_1));
    r_6_fu_2286_p2 <= std_logic_vector(unsigned(r_2_reg_864) + unsigned(ap_const_lv4_1));
    r_7_fu_2778_p2 <= std_logic_vector(unsigned(r_3_reg_1009) + unsigned(ap_const_lv3_1));

    relu1ActivationMap_address0_assign_proc : process(tmp_8_reg_3726, ap_CS_fsm_state38, ap_CS_fsm_state32, tmp_46_fu_2005_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            relu1ActivationMap_address0 <= tmp_46_fu_2005_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            relu1ActivationMap_address0 <= tmp_8_reg_3726(13 - 1 downto 0);
        else 
            relu1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    relu1ActivationMap_address1_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state41, tmp_52_fu_2013_p1, b_maxval_6_cast_fu_2109_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            relu1ActivationMap_address1 <= b_maxval_6_cast_fu_2109_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            relu1ActivationMap_address1 <= tmp_52_fu_2013_p1(13 - 1 downto 0);
        else 
            relu1ActivationMap_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    relu1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            relu1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu1ActivationMap_ce1_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            relu1ActivationMap_ce1 <= ap_const_logic_1;
        else 
            relu1ActivationMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    relu1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            relu1ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_address0_assign_proc : process(tmp_51_reg_4078, ap_CS_fsm_state92, ap_CS_fsm_state86, tmp_119_fu_3048_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            relu2ActivationMap_address0 <= tmp_119_fu_3048_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            relu2ActivationMap_address0 <= tmp_51_reg_4078(11 - 1 downto 0);
        else 
            relu2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    relu2ActivationMap_address1_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state95, tmp_121_fu_3052_p1, b_maxval_7_cast_fu_3148_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            relu2ActivationMap_address1 <= b_maxval_7_cast_fu_3148_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            relu2ActivationMap_address1 <= tmp_121_fu_3052_p1(11 - 1 downto 0);
        else 
            relu2ActivationMap_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    relu2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            relu2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_ce1_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            relu2ActivationMap_ce1 <= ap_const_logic_1;
        else 
            relu2ActivationMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            relu2ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu3ActivationMap_address0_assign_proc : process(tmp_34_reg_4367, ap_CS_fsm_state137, ap_CS_fsm_state135, tmp_90_fu_3526_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            relu3ActivationMap_address0 <= tmp_90_fu_3526_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
            relu3ActivationMap_address0 <= tmp_34_reg_4367(7 - 1 downto 0);
        else 
            relu3ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    relu3ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state137, ap_CS_fsm_state135)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state137))) then 
            relu3ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu3ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu3ActivationMap_we0_assign_proc : process(ap_CS_fsm_state135)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
            relu3ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu3ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rowOutIdx_1_fu_1665_p3 <= 
        ap_const_lv64_0 when (tmp_14_fu_1659_p2(0) = '1') else 
        rowOutIdx_reg_3736;
    rowOutIdx_2_fu_2716_p3 <= 
        ap_const_lv64_0 when (tmp_99_fu_2710_p2(0) = '1') else 
        rowOutIdx_5_reg_4088;
    rowOutIdx_4_fu_3491_p3 <= 
        ap_const_lv64_0 when (tmp_114_fu_3485_p2(0) = '1') else 
        rowOutIdx_6_reg_4377;
    rowOutIdx_7_to_int_fu_2675_p1 <= rowOutIdx_5_reg_4088;
    rowOutIdx_8_to_int_fu_3450_p1 <= rowOutIdx_6_reg_4377;
    rowOutIdx_to_int_fu_1624_p1 <= rowOutIdx_reg_3736;
        sh_assign_1_cast_fu_1948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_1940_p3),32));

    sh_assign_1_fu_1940_p3 <= 
        tmp_139_i_i_i_cast_fu_1936_p1 when (tmp_54_fu_1922_p3(0) = '1') else 
        sh_assign_fu_1916_p2;
    sh_assign_4_fu_2957_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i2_cast_fu_2953_p1));
        sh_assign_5_cast_fu_2989_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_2981_p3),32));

    sh_assign_5_fu_2981_p3 <= 
        tmp_139_i_i_i2_cast_fu_2977_p1 when (tmp_137_fu_2963_p3(0) = '1') else 
        sh_assign_4_fu_2957_p2;
    sh_assign_fu_1916_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast_fu_1912_p1));
    tmp10_cast_fu_2569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_fu_2564_p2),11));
    tmp10_fu_2564_p2 <= std_logic_vector(unsigned(tmp_72_fu_2556_p3) + unsigned(f_2_cast_reg_3923));
    tmp12_cast_fu_2661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_fu_2656_p2),11));
    tmp12_fu_2656_p2 <= std_logic_vector(unsigned(tmp_27_reg_4065) + unsigned(b_k_2_cast_fu_2640_p1));
    tmp13_fu_2885_p3 <= (r_3_reg_1009 & tmp_117_fu_2876_p2);
    tmp14_fu_2898_p2 <= std_logic_vector(unsigned(tmp_117_cast_fu_2881_p1) + unsigned(p_shl23_cast_reg_4158));
    tmp15_fu_3199_p2 <= std_logic_vector(unsigned(tmp_141_fu_3187_p2) + unsigned(tmp_147_fu_3193_p2));
        tmp16_cast_fu_3205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp16_reg_4220),32));

    tmp16_fu_3043_p2 <= std_logic_vector(unsigned(tmp_123_cast_fu_2916_p1) + unsigned(tmp_32_reg_4135));
    tmp19_fu_3350_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_3346_p1) + unsigned(p_shl9_fu_3330_p3));
    tmp20_cast_fu_3397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp20_fu_3392_p2),9));
    tmp20_fu_3392_p2 <= std_logic_vector(unsigned(tmp_83_reg_4308) + unsigned(b_k_3_cast_fu_3376_p1));
    tmp2_fu_1438_p2 <= std_logic_vector(unsigned(p_shl6_reg_3631) + unsigned(colOutIdx1_cast_fu_1403_p1));
    tmp3_fu_1503_p2 <= std_logic_vector(signed(tmp_13_cast_fu_1499_p1) + signed(phi_mul_cast_reg_3582));
        tmp4_cast_fu_1606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_1601_p2),14));

    tmp4_fu_1601_p2 <= std_logic_vector(unsigned(tmp_4_reg_3713) + unsigned(b_k_cast_fu_1585_p1));
    tmp5_fu_2240_p2 <= std_logic_vector(signed(tmp_58_cast_fu_2237_p1) + signed(tmp_59_reg_3918));
    tmp6_fu_2614_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_2610_p1) + unsigned(p_shl2_fu_2594_p3));
        tmp7_cast_fu_2499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_2494_p2),12));

    tmp7_fu_2494_p2 <= std_logic_vector(unsigned(tmp_85_reg_3983) + unsigned(b_k_1_cast1_fu_2478_p1));
        tmp8_cast_fu_2522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_fu_2517_p2),9));

    tmp8_fu_2517_p2 <= std_logic_vector(unsigned(tmp_86_reg_3988) + unsigned(b_k_1_cast_fu_2474_p1));
    tmp9_fu_2312_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_2308_p1) + unsigned(p_shl7_fu_2292_p3));
        tmp_100_cast_fu_2508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_100_fu_2503_p2),32));

    tmp_100_fu_2503_p2 <= std_logic_vector(signed(tmp7_cast_fu_2499_p1) + signed(tmp_69_reg_3965));
    tmp_101_fu_2512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_cast_fu_2508_p1),64));
    tmp_102_fu_3453_p4 <= rowOutIdx_8_to_int_fu_3450_p1(62 downto 52);
        tmp_103_cast_fu_2531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_103_reg_4006),32));

    tmp_103_fu_2526_p2 <= std_logic_vector(signed(tmp8_cast_fu_2522_p1) + signed(tmp_73_reg_3970));
    tmp_104_fu_2534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_cast_fu_2531_p1),64));
    tmp_105_fu_3401_p2 <= std_logic_vector(unsigned(tmp20_cast_fu_3397_p1) + unsigned(tmp19_reg_4295));
    tmp_106_fu_3406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_3401_p2),64));
    tmp_109_fu_3463_p1 <= rowOutIdx_8_to_int_fu_3450_p1(52 - 1 downto 0);
    tmp_10_fu_2729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_975),64));
    tmp_112_fu_3479_p2 <= (notrhs6_fu_3473_p2 or notlhs6_fu_3467_p2);
    tmp_114_fu_3485_p2 <= (tmp_112_fu_3479_p2 and grp_fu_1256_p2);
    tmp_115_fu_3217_p4 <= maxval_0_8_to_int_fu_3214_p1(62 downto 52);
    tmp_116_fu_2866_p4 <= ((c_3_reg_1021 & tmp_148_fu_2862_p1) & ap_const_lv4_0);
    tmp_117_cast_fu_2881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_2876_p2),12));
    tmp_117_fu_2876_p2 <= std_logic_vector(unsigned(tmp_116_fu_2866_p4) + unsigned(f_3_cast_reg_4122));
    tmp_118_fu_2893_p2 <= std_logic_vector(unsigned(p_shl22_cast_reg_4153) + unsigned(tmp13_fu_2885_p3));
    tmp_119_cast_cast_fu_3056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_reg_4197),12));
    tmp_119_fu_3048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_reg_4197),64));
    tmp_120_fu_2903_p2 <= std_logic_vector(unsigned(p_shl24_cast_reg_4163) + unsigned(tmp14_fu_2898_p2));
    tmp_121_fu_3052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_reg_4203),64));
    tmp_122_fu_3227_p1 <= maxval_0_8_to_int_fu_3214_p1(52 - 1 downto 0);
    tmp_123_cast_fu_2916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_2908_p3),8));
    tmp_123_fu_2908_p3 <= (c_3_reg_1021 & ap_const_lv4_0);
    tmp_124_fu_3234_p4 <= maxval_1_8_to_int_fu_3231_p1(62 downto 52);
    tmp_125_fu_3244_p1 <= maxval_1_8_to_int_fu_3231_p1(52 - 1 downto 0);
    tmp_126_fu_3208_p2 <= std_logic_vector(signed(tmp16_cast_fu_3205_p1) + signed(tmp15_fu_3199_p2));
        tmp_127_fu_3295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_126_reg_4274),64));

    tmp_128_fu_3260_p2 <= (notrhs7_fu_3254_p2 or notlhs7_fu_3248_p2);
    tmp_129_fu_3278_p2 <= (notrhs8_fu_3272_p2 or notlhs8_fu_3266_p2);
    tmp_130_fu_3284_p2 <= (tmp_129_fu_3278_p2 and tmp_128_fu_3260_p2);
    tmp_132_fu_3290_p2 <= (tmp_131_reg_4269 and tmp_130_fu_3284_p2);
    tmp_134_fu_3021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_fu_3013_p3),32));
    tmp_135_fu_3025_p4 <= tmp_142_i_i_i2_fu_3007_p2(84 downto 53);
    tmp_136_fu_2936_p1 <= p_Val2_s_37_reg_4168(52 - 1 downto 0);
    tmp_137_fu_2963_p3 <= sh_assign_4_fu_2957_p2(11 downto 11);
    tmp_138_fu_3062_p4 <= b_maxval_3_to_int_fu_3059_p1(62 downto 52);
    tmp_139_fu_3013_p3 <= tmp_141_i_i_i2_fu_3001_p2(53 downto 53);
        tmp_139_i_i_i2_cast_fu_2977_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_139_i_i_i2_fu_2971_p2),12));

    tmp_139_i_i_i2_fu_2971_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_fu_2927_p4));
        tmp_139_i_i_i_cast_fu_1936_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_139_i_i_i_fu_1930_p2),12));

    tmp_139_i_i_i_fu_1930_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_1886_p4));
        tmp_13_cast_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_1493_p2),14));

    tmp_13_fu_1493_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1477_p1) - unsigned(p_shl5_cast_fu_1489_p1));
    tmp_140_fu_3079_p4 <= b_maxval_4_to_int_fu_3076_p1(62 downto 52);
    tmp_140_i_i_i2_cast_fu_2997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_2989_p1),54));
    tmp_140_i_i_i2_fu_2993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_2989_p1),137));
    tmp_140_i_i_i_cast_fu_1956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1948_p1),54));
    tmp_140_i_i_i_fu_1952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1948_p1),137));
    tmp_141_fu_3187_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_1_fu_3181_p3),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_141_i_i_i2_fu_3001_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i2_fu_2939_p4),to_integer(unsigned('0' & tmp_140_i_i_i2_cast_fu_2997_p1(31-1 downto 0)))));
    tmp_141_i_i_i_fu_1960_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_1898_p4),to_integer(unsigned('0' & tmp_140_i_i_i_cast_fu_1956_p1(31-1 downto 0)))));
    tmp_142_fu_3105_p2 <= (notrhs9_fu_3099_p2 or notlhs9_fu_3093_p2);
    tmp_142_i_i_i2_fu_3007_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i2_cast_fu_2949_p1),to_integer(unsigned('0' & tmp_140_i_i_i2_fu_2993_p1(31-1 downto 0)))));
    tmp_142_i_i_i_fu_1966_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_cast_fu_1908_p1),to_integer(unsigned('0' & tmp_140_i_i_i_fu_1952_p1(31-1 downto 0)))));
    tmp_143_fu_3123_p2 <= (notrhs10_fu_3117_p2 or notlhs10_fu_3111_p2);
    tmp_144_fu_3129_p2 <= (tmp_143_fu_3123_p2 and tmp_142_fu_3105_p2);
    tmp_146_fu_3135_p2 <= (tmp_144_fu_3129_p2 and grp_fu_1256_p2);
    tmp_147_fu_3193_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_1_fu_3181_p3),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_148_fu_2862_p1 <= j_1_reg_1033(1 - 1 downto 0);
    tmp_149_fu_3072_p1 <= b_maxval_3_to_int_fu_3059_p1(52 - 1 downto 0);
    tmp_14_fu_1659_p2 <= (tmp_s_fu_1653_p2 and grp_fu_1256_p2);
    tmp_150_fu_3089_p1 <= b_maxval_4_to_int_fu_3076_p1(52 - 1 downto 0);
        tmp_15_cast_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_3677),32));

    tmp_15_fu_1508_p2 <= std_logic_vector(unsigned(f_cast_reg_3569) + unsigned(tmp3_fu_1503_p2));
    tmp_16_fu_1516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_cast_fu_1513_p1),64));
    tmp_17_fu_2734_p2 <= "1" when (invdar1_reg_975 = ap_const_lv9_18F) else "0";
    tmp_18_fu_1389_p2 <= std_logic_vector(unsigned(k4_cast_fu_1373_p1) + unsigned(r_reg_652));
    tmp_19_fu_1749_p2 <= (k_8_fu_1741_p3 or ap_const_lv5_1);
    tmp_20_fu_1759_p0 <= tmp_20_fu_1759_p00(5 - 1 downto 0);
    tmp_20_fu_1759_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1749_p2),14));
    tmp_20_fu_1759_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1759_p0) * unsigned(ap_const_lv14_A8), 14));
    tmp_21_fu_1428_p2 <= std_logic_vector(unsigned(tmp_fu_1419_p4) + unsigned(c_cast1_reg_3600));
    tmp_22_fu_1433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1428_p2),64));
    tmp_23_fu_1443_p2 <= std_logic_vector(unsigned(tmp2_fu_1438_p2) + unsigned(k4_cast_reg_3613));
    tmp_24_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_3649),64));
    tmp_26_fu_1793_p1 <= j_reg_842(1 - 1 downto 0);
    tmp_27_fu_2632_p3 <= (colOutIdx_4_reg_953 & ap_const_lv4_0);
    tmp_28_fu_2158_p4 <= maxval_0_3_to_int_fu_2154_p1(62 downto 52);
    tmp_29_fu_2168_p1 <= maxval_0_3_to_int_fu_2154_p1(52 - 1 downto 0);
    tmp_2_fu_1678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_774),64));
    tmp_30_fu_2176_p4 <= maxval_1_3_to_int_fu_2172_p1(62 downto 52);
    tmp_31_fu_2186_p1 <= maxval_1_3_to_int_fu_2172_p1(52 - 1 downto 0);
    tmp_32_fu_2766_p2 <= std_logic_vector(unsigned(f_3_cast_fu_2750_p1) + unsigned(ap_const_lv8_B0));
    tmp_33_fu_2202_p2 <= (notrhs1_fu_2196_p2 or notlhs1_fu_2190_p2);
    tmp_34_fu_3445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_5_reg_1110),64));
    tmp_35_fu_2220_p2 <= (notrhs2_fu_2214_p2 or notlhs2_fu_2208_p2);
    tmp_36_fu_2226_p2 <= (tmp_35_fu_2220_p2 and tmp_33_fu_2202_p2);
    tmp_38_fu_2232_p2 <= (tmp_37_reg_3913 and tmp_36_fu_2226_p2);
    tmp_39_fu_1874_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1870_p1) - unsigned(b_k_5_cast_reg_3829));
    tmp_3_fu_1683_p2 <= "1" when (invdar_reg_774 = ap_const_lv11_497) else "0";
    tmp_40_fu_1837_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1819_p1) - unsigned(p_shl14_cast_fu_1833_p1));
    tmp_41_fu_3428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_4_reg_1044),64));
        tmp_44_cast_fu_1848_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_1843_p2),14));

    tmp_44_fu_1843_p2 <= std_logic_vector(unsigned(tmp_40_fu_1837_p2) + unsigned(f_1_cast_reg_3768));
        tmp_45_cast_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_reg_3848),32));

    tmp_45_fu_1852_p2 <= std_logic_vector(signed(tmp_44_cast_fu_1848_p1) + signed(phi_mul4_cast_reg_3791));
    tmp_46_fu_2005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_cast_fu_2002_p1),64));
    tmp_48_fu_1895_p1 <= p_Val2_s_reg_3814(52 - 1 downto 0);
    tmp_49_fu_1857_p2 <= std_logic_vector(signed(tmp_44_cast_fu_1848_p1) + signed(tmp_20_reg_3809));
    tmp_4_fu_1579_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1563_p1) - unsigned(p_shl1_cast_fu_1575_p1));
    tmp_50_fu_2665_p2 <= std_logic_vector(unsigned(tmp12_cast_fu_2661_p1) + unsigned(tmp6_reg_4052));
    tmp_51_fu_2670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_2665_p2),64));
    tmp_52_fu_2013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_cast_fu_2010_p1),64));
    tmp_53_fu_2021_p4 <= b_maxval_to_int_fu_2018_p1(62 downto 52);
    tmp_54_fu_1922_p3 <= sh_assign_fu_1916_p2(11 downto 11);
        tmp_55_cast_fu_2010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_reg_3854),32));

    tmp_55_fu_2038_p4 <= b_maxval_1_to_int_fu_2035_p1(62 downto 52);
    tmp_56_fu_1972_p3 <= tmp_141_i_i_i_fu_1960_p2(53 downto 53);
    tmp_57_fu_2064_p2 <= (notrhs3_fu_2058_p2 or notlhs3_fu_2052_p2);
        tmp_58_cast_fu_2237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_reg_3860),32));

    tmp_58_fu_1980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_1972_p3),32));
    tmp_59_fu_2149_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_54) * signed(p_Val2_6_reg_3908))), 32));
        tmp_5_cast_fu_1715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_1709_p2),32));

    tmp_5_fu_1709_p2 <= std_logic_vector(unsigned(f_1_cast1_fu_1693_p1) + unsigned(ap_const_lv8_AC));
    tmp_60_fu_2082_p2 <= (notrhs4_fu_2076_p2 or notlhs4_fu_2070_p2);
    tmp_61_fu_2245_p2 <= std_logic_vector(unsigned(tmp5_fu_2240_p2) + unsigned(tmp_5_cast_reg_3781));
        tmp_62_fu_2250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_fu_2245_p2),64));

    tmp_63_fu_1984_p4 <= tmp_142_i_i_i_fu_1966_p2(84 downto 53);
    tmp_64_fu_2031_p1 <= b_maxval_to_int_fu_2018_p1(52 - 1 downto 0);
    tmp_65_fu_2088_p2 <= (tmp_60_fu_2082_p2 and tmp_57_fu_2064_p2);
    tmp_66_fu_2048_p1 <= b_maxval_1_to_int_fu_2035_p1(52 - 1 downto 0);
    tmp_68_fu_2346_p2 <= std_logic_vector(unsigned(k_2_cast_fu_2330_p1) + unsigned(r_2_reg_864));
    tmp_69_fu_2356_p0 <= tmp_69_fu_2356_p00(4 - 1 downto 0);
    tmp_69_fu_2356_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_2346_p2),12));
    tmp_69_fu_2356_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_2356_p0) * unsigned(ap_const_lv12_54), 12));
    tmp_6_fu_1627_p4 <= rowOutIdx_to_int_fu_1624_p1(62 downto 52);
    tmp_72_fu_2556_p3 <= (c_2_reg_876 & ap_const_lv4_0);
    tmp_73_fu_2386_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_2370_p1) - unsigned(p_shl12_cast_fu_2382_p1));
    tmp_74_fu_2573_p2 <= std_logic_vector(unsigned(tmp9_reg_3944) + unsigned(tmp10_cast_fu_2569_p1));
    tmp_75_fu_2578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_4034),64));
    tmp_76_fu_2094_p2 <= (tmp_65_fu_2088_p2 and grp_fu_1256_p2);
    tmp_77_fu_2804_p2 <= (k_12_fu_2784_p3 or ap_const_lv4_1);
    tmp_78_fu_2678_p4 <= rowOutIdx_7_to_int_fu_2675_p1(62 downto 52);
    tmp_79_fu_2408_p2 <= std_logic_vector(unsigned(colOutIdx_3_cast_fu_2392_p1) + unsigned(c_2_reg_876));
        tmp_7_cast_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1610_p2),32));

    tmp_7_fu_1610_p2 <= std_logic_vector(signed(tmp4_cast_fu_1606_p1) + signed(phi_mul2_cast_reg_3687));
    tmp_80_fu_3510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_6_reg_1121),64));
    tmp_81_fu_3543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_7_reg_1155),64));
    tmp_83_fu_3368_p3 <= (colOutIdx_6_reg_1067 & ap_const_lv4_0);
    tmp_84_fu_2688_p1 <= rowOutIdx_7_to_int_fu_2675_p1(52 - 1 downto 0);
    tmp_85_fu_2438_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_2422_p1) - unsigned(p_shl18_cast_fu_2434_p1));
    tmp_86_fu_2468_p2 <= std_logic_vector(unsigned(p_shl19_cast_fu_2452_p1) - unsigned(p_shl20_cast_fu_2464_p1));
    tmp_87_fu_2704_p2 <= (notrhs5_fu_2698_p2 or notlhs5_fu_2692_p2);
    tmp_8_fu_1619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_1615_p1),64));
    tmp_90_fu_3526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_7_reg_1144),64));
    tmp_95_fu_3559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_8_reg_1178),64));
    tmp_99_fu_2710_p2 <= (tmp_87_fu_2704_p2 and grp_fu_1256_p2);
    tmp_9_fu_1637_p1 <= rowOutIdx_to_int_fu_1624_p1(52 - 1 downto 0);
    tmp_fu_1419_p4 <= ((tmp_18_reg_3626 & ap_const_lv2_0) & colOutIdx1_reg_698);
    tmp_i1_fu_2551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_20_fu_2545_p2),64));
    tmp_i2_fu_3423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_15_fu_3417_p2),64));
    tmp_i_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_10_fu_1458_p2),64));
    tmp_i_i_i2_cast_fu_2949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i2_fu_2939_p4),137));
    tmp_i_i_i2_fu_2939_p4 <= ((ap_const_lv1_1 & tmp_136_fu_2936_p1) & ap_const_lv1_0);
    tmp_i_i_i_cast_fu_1908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_1898_p4),137));
    tmp_i_i_i_fu_1898_p4 <= ((ap_const_lv1_1 & tmp_48_fu_1895_p1) & ap_const_lv1_0);
    tmp_i_i_i_i2_cast_fu_2953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_2927_p4),12));
    tmp_i_i_i_i_cast_fu_1912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_1886_p4),12));
    tmp_s_fu_1653_p2 <= (notrhs_fu_1647_p2 or notlhs_fu_1641_p2);
end behav;
