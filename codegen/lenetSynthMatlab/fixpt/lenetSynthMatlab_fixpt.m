%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.4 and Fixed-Point Designer 6.1           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [netScores] = lenetSynthMatlab_fixpt(inputImg)
%LENETSYNTH Synthesizable model of LeNet5
%   inputImg: 32x32x1 MNIST image

    % Load all constants
    % networkWeights = coder.load('networkWeights.mat');
    fm = get_fimath();

    global weightsConv1_g;    weightsConv1_g = fi(weightsConv1_g, 1, 16, 16, fm);
    global biasConv1_g;       biasConv1_g = fi(biasConv1_g, 1, 16, 27, fm);
    global weightsConv2_g;    weightsConv2_g = fi(weightsConv2_g, 1, 16, 17, fm);
    global biasConv2_g;       biasConv2_g = fi(biasConv2_g, 1, 16, 25, fm);
    global weightsFC1_g;      weightsFC1_g = fi(weightsFC1_g, 1, 16, 18, fm);
    global biasFC1_g;         biasFC1_g = fi(biasFC1_g, 1, 16, 25, fm);
    global weightsFC2_g;      weightsFC2_g = fi(weightsFC2_g, 1, 16, 18, fm);
    global biasFC2_g;         biasFC2_g = fi(biasFC2_g, 1, 16, 23, fm);
    global weightsFC3_g;      weightsFC3_g = fi(weightsFC3_g, 1, 16, 17, fm);
    global biasFC3_g;         biasFC3_g = fi(biasFC3_g, 1, 16, 18, fm);

    % Layer 1: conv1 -- OK
    conv1ActivationMap = fi(zeros(28, 28, 6), 1, 16, 5, fm);
    for f = 1:1:6
        % Extract desired filter
        filter = fi(weightsConv1_g(:, : , :, f), 1, 16, 16, fm);
        for r = 1:1:28
            for c = 1:1:28
                imgRegion = fi(inputImg(r:r + 4, c:c + 4, :), 0, 8, 0, fm);
                conv1ActivationMap(r, c, f) = sum(sum(filter .* imgRegion)) + biasConv1_g(:, :, f);
            end
        end
    end
    
    % Layer 2: relu1 -- OK
    relu1ActivationMap = fi(max(fi(0, 0, 1, 0, fm), conv1ActivationMap), 0, 16, 6, fm);
    
    % Layer 3: pool1 -- OK
    pool1ActivationMap = fi(zeros(14, 14, 6), 0, 16, 6, fm);
    for f = 1:1:6
        rowOutIdx = fi(1, 0, 4, 0, fm);
        for r = 1:2:27
            colOutIdx = fi(1, 0, 4, 0, fm);
            for c = 1:2:27
                pool1ActivationMap(rowOutIdx, colOutIdx, f) = max(max(relu1ActivationMap(r:r + 1, c:c + 1, f)));
                colOutIdx(:) = colOutIdx + fi(1, 0, 1, 0, fm);
            end
            rowOutIdx(:) = rowOutIdx + fi(1, 0, 1, 0, fm);
        end
    end
    
    % Layer 4: conv2 -- OK
    conv2ActivationMap = fi(zeros(10, 10, 16), 1, 16, 5, fm);
    for f = 1:1:16
        % Extract desired filter
        filter = fi(weightsConv2_g(:, : , :, f), 1, 16, 17, fm);
        for r = 1:1:10
            for c = 1:1:10
                imgRegion = fi(pool1ActivationMap(r:r + 4, c:c + 4, :), 0, 16, 6, fm);
                conv2ActivationMap(r, c, f) = sum(sum(sum(filter .* imgRegion))) + biasConv2_g(:, :, f);
            end
        end
    end
        
    % Layer 5: relu2 -- OK
    relu2ActivationMap = fi(max(fi(0, 0, 1, 0, fm), conv2ActivationMap), 0, 16, 7, fm);
    
    % Layer 6: pool2 -- OK
    pool2ActivationMap = fi(zeros(5, 5, 16), 0, 16, 7, fm);
    for f = 1:1:16
        rowOutIdx = fi(1, 0, 4, 0, fm);
        for r = 1:2:9
            colOutIdx = fi(1, 0, 4, 0, fm);
            for c = 1:2:9
                pool2ActivationMap(rowOutIdx, colOutIdx, f) = max(max(relu2ActivationMap(r:r + 1, c:c + 1, f)));
                colOutIdx(:) = colOutIdx + fi(1, 0, 1, 0, fm);
            end
            rowOutIdx(:) = rowOutIdx + fi(1, 0, 1, 0, fm);
        end
    end
    
    % Layer 7: fc1 -- OK
    fc1ActivationMap = fi(zeros(120, 1), 1, 16, 6, fm);
    for f = 1:1:120
        fc1ActivationMap(f) = sum(sum(sum((pool2ActivationMap .* weightsFC1_g(:, :, :, f))))) + biasFC1_g(:, :, f);
    end
    
    % Layer 8: relu3 -- OK
    relu3ActivationMap = fi(max(fi(0, 0, 1, 0, fm), fc1ActivationMap), 0, 16, 8, fm);
    
    % Layer 9: fc2 -- OK
    fc2ActivationMap = fi(weightsFC2_g * relu3ActivationMap + biasFC2_g, 1, 16, 9, fm);
    
    % Layer 10: fc3 -- OK
    netScores = fi(weightsFC3_g * fc2ActivationMap + biasFC3_g, 1, 16, 9, fm);

end


function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'SumMode','FullPrecision');
end
