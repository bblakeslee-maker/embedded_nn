// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module c_sum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        y_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [4:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] y_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] x_address0;
reg x_ce0;
reg[4:0] y_address0;
reg y_ce0;
reg y_we0;
reg[31:0] y_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] k_29_fu_147_p2;
reg   [2:0] k_29_reg_369;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_fu_177_p2;
reg   [6:0] tmp_reg_374;
wire   [0:0] exitcond4_fu_141_p2;
wire   [2:0] b_k_13_fu_193_p2;
reg   [2:0] b_k_13_reg_382;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_170_fu_208_p1;
reg   [63:0] tmp_170_reg_387;
wire   [0:0] exitcond3_fu_187_p2;
wire   [2:0] k_30_fu_219_p2;
reg   [2:0] k_30_reg_400;
wire    ap_CS_fsm_state5;
wire  signed [8:0] tmp_cast_fu_257_p1;
reg  signed [8:0] tmp_cast_reg_405;
wire   [0:0] exitcond2_fu_213_p2;
wire   [2:0] b_k_14_fu_267_p2;
reg   [2:0] b_k_14_reg_413;
wire    ap_CS_fsm_state6;
wire  signed [6:0] tmp_171_fu_297_p2;
reg  signed [6:0] tmp_171_reg_418;
wire   [0:0] exitcond1_fu_261_p2;
wire   [8:0] tmp1_fu_307_p2;
reg   [8:0] tmp1_reg_423;
wire   [2:0] c_k_2_fu_326_p2;
reg   [2:0] c_k_2_reg_431;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_320_p2;
reg   [4:0] y_addr_5_reg_441;
reg   [2:0] k_reg_79;
reg   [2:0] b_k_reg_90;
wire    ap_CS_fsm_state4;
reg   [2:0] k_1_reg_101;
reg   [2:0] b_k_1_reg_112;
reg   [2:0] c_k_reg_123;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_173_fu_347_p1;
wire   [63:0] tmp_175_fu_361_p1;
wire   [31:0] tmp_176_fu_134_p2;
wire   [5:0] p_shl_fu_153_p3;
wire   [3:0] p_shl9_fu_165_p3;
wire   [6:0] p_shl_cast_fu_161_p1;
wire   [6:0] p_shl9_cast_fu_173_p1;
wire   [6:0] b_k_cast7_fu_183_p1;
wire   [6:0] tmp_169_fu_199_p2;
wire  signed [31:0] tmp_175_cast_fu_204_p1;
wire   [1:0] tmp_177_fu_225_p1;
wire   [6:0] p_shl10_fu_229_p3;
wire   [2:0] tmp_178_fu_241_p2;
wire   [7:0] p_shl10_cast_fu_237_p1;
wire   [7:0] p_shl11_cast_fu_247_p1;
wire   [7:0] tmp_s_fu_251_p2;
wire   [5:0] p_shl12_fu_273_p3;
wire   [3:0] p_shl13_fu_285_p3;
wire   [6:0] p_shl12_cast_fu_281_p1;
wire   [6:0] p_shl13_cast_fu_293_p1;
wire  signed [8:0] tmp_177_cast_fu_303_p1;
wire   [5:0] c_k_cast3_fu_316_p1;
wire   [5:0] tmp2_fu_332_p2;
wire   [8:0] tmp2_cast_fu_338_p1;
wire   [8:0] tmp_172_fu_342_p2;
wire   [6:0] c_k_cast4_fu_312_p1;
wire   [6:0] tmp_174_fu_352_p2;
wire  signed [31:0] tmp_181_cast_fu_357_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

lenetSynthMatlab_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenetSynthMatlab_bkb_U5(
    .din0(y_q0),
    .din1(x_q0),
    .dout(tmp_176_fu_134_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_320_p2 == 1'd1))) begin
        b_k_1_reg_112 <= b_k_14_reg_413;
    end else if (((exitcond2_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        b_k_1_reg_112 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_k_reg_90 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_k_reg_90 <= b_k_13_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        c_k_reg_123 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c_k_reg_123 <= c_k_2_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_1_reg_101 <= 3'd0;
    end else if (((exitcond1_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_1_reg_101 <= k_30_reg_400;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_79 <= k_29_reg_369;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_79 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_k_13_reg_382 <= b_k_13_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_k_14_reg_413 <= b_k_14_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_k_2_reg_431 <= c_k_2_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_29_reg_369 <= k_29_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_30_reg_400 <= k_30_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp1_reg_423[8 : 1] <= tmp1_fu_307_p2[8 : 1];
        tmp_171_reg_418[6 : 1] <= tmp_171_fu_297_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_170_reg_387[31 : 0] <= tmp_170_fu_208_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_cast_reg_405[8 : 1] <= tmp_cast_fu_257_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_374[6 : 1] <= tmp_fu_177_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        y_addr_5_reg_441 <= tmp_175_fu_361_p1;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_address0 = tmp_173_fu_347_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = tmp_170_fu_208_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_address0 = y_addr_5_reg_441;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_address0 = tmp_175_fu_361_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_address0 = tmp_170_reg_387;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_d0 = tmp_176_fu_134_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        y_d0 = x_q0;
    end else begin
        y_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_320_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign b_k_13_fu_193_p2 = (b_k_reg_90 + 3'd1);

assign b_k_14_fu_267_p2 = (b_k_1_reg_112 + 3'd1);

assign b_k_cast7_fu_183_p1 = b_k_reg_90;

assign c_k_2_fu_326_p2 = (c_k_reg_123 + 3'd1);

assign c_k_cast3_fu_316_p1 = c_k_reg_123;

assign c_k_cast4_fu_312_p1 = c_k_reg_123;

assign exitcond1_fu_261_p2 = ((b_k_1_reg_112 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_213_p2 = ((k_1_reg_101 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_187_p2 = ((b_k_reg_90 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond4_fu_141_p2 = ((k_reg_79 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_320_p2 = ((c_k_reg_123 == 3'd6) ? 1'b1 : 1'b0);

assign k_29_fu_147_p2 = (k_reg_79 + 3'd1);

assign k_30_fu_219_p2 = (k_1_reg_101 + 3'd1);

assign p_shl10_cast_fu_237_p1 = p_shl10_fu_229_p3;

assign p_shl10_fu_229_p3 = {{tmp_177_fu_225_p1}, {5'd0}};

assign p_shl11_cast_fu_247_p1 = tmp_178_fu_241_p2;

assign p_shl12_cast_fu_281_p1 = p_shl12_fu_273_p3;

assign p_shl12_fu_273_p3 = {{b_k_1_reg_112}, {3'd0}};

assign p_shl13_cast_fu_293_p1 = p_shl13_fu_285_p3;

assign p_shl13_fu_285_p3 = {{b_k_1_reg_112}, {1'd0}};

assign p_shl9_cast_fu_173_p1 = p_shl9_fu_165_p3;

assign p_shl9_fu_165_p3 = {{k_reg_79}, {1'd0}};

assign p_shl_cast_fu_161_p1 = p_shl_fu_153_p3;

assign p_shl_fu_153_p3 = {{k_reg_79}, {3'd0}};

assign tmp1_fu_307_p2 = ($signed(tmp_177_cast_fu_303_p1) + $signed(tmp_cast_reg_405));

assign tmp2_cast_fu_338_p1 = tmp2_fu_332_p2;

assign tmp2_fu_332_p2 = (c_k_cast3_fu_316_p1 + 6'd30);

assign tmp_169_fu_199_p2 = (tmp_reg_374 + b_k_cast7_fu_183_p1);

assign tmp_170_fu_208_p1 = $unsigned(tmp_175_cast_fu_204_p1);

assign tmp_171_fu_297_p2 = (p_shl12_cast_fu_281_p1 - p_shl13_cast_fu_293_p1);

assign tmp_172_fu_342_p2 = (tmp2_cast_fu_338_p1 + tmp1_reg_423);

assign tmp_173_fu_347_p1 = tmp_172_fu_342_p2;

assign tmp_174_fu_352_p2 = ($signed(tmp_171_reg_418) + $signed(c_k_cast4_fu_312_p1));

assign tmp_175_cast_fu_204_p1 = $signed(tmp_169_fu_199_p2);

assign tmp_175_fu_361_p1 = $unsigned(tmp_181_cast_fu_357_p1);

assign tmp_177_cast_fu_303_p1 = tmp_171_fu_297_p2;

assign tmp_177_fu_225_p1 = k_1_reg_101[1:0];

assign tmp_178_fu_241_p2 = k_1_reg_101 << 3'd1;

assign tmp_181_cast_fu_357_p1 = $signed(tmp_174_fu_352_p2);

assign tmp_cast_fu_257_p1 = $signed(tmp_s_fu_251_p2);

assign tmp_fu_177_p2 = (p_shl_cast_fu_161_p1 - p_shl9_cast_fu_173_p1);

assign tmp_s_fu_251_p2 = (p_shl10_cast_fu_237_p1 - p_shl11_cast_fu_247_p1);

always @ (posedge ap_clk) begin
    tmp_reg_374[0] <= 1'b0;
    tmp_170_reg_387[63:32] <= 32'b00000000000000000000000000000000;
    tmp_cast_reg_405[0] <= 1'b0;
    tmp_171_reg_418[0] <= 1'b0;
    tmp1_reg_423[0] <= 1'b0;
end

endmodule //c_sum
