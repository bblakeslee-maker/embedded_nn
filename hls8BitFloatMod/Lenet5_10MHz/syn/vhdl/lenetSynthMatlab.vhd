-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenetSynthMatlab is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImg_ce0 : OUT STD_LOGIC;
    inputImg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    netScores_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    netScores_ce0 : OUT STD_LOGIC;
    netScores_we0 : OUT STD_LOGIC;
    netScores_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lenetSynthMatlab is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenetSynthMatlab,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=44.128500,HLS_SYN_LAT=2206718,HLS_SYN_TPT=none,HLS_SYN_MEM=224,HLS_SYN_DSP=18,HLS_SYN_FF=3551,HLS_SYN_LUT=8597,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_A8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010101000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_497 : STD_LOGIC_VECTOR (10 downto 0) := "10010010111";
    constant ap_const_lv8_AC : STD_LOGIC_VECTOR (7 downto 0) := "10101100";
    constant ap_const_lv13_150 : STD_LOGIC_VECTOR (12 downto 0) := "0000101010000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_A8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010101000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv12_54 : STD_LOGIC_VECTOR (11 downto 0) := "000001010100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_18F : STD_LOGIC_VECTOR (8 downto 0) := "110001111";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv16_2580 : STD_LOGIC_VECTOR (15 downto 0) := "0010010110000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal biasConv1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal biasConv1_ce0 : STD_LOGIC;
    signal biasConv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightsConv1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weightsConv1_ce0 : STD_LOGIC;
    signal weightsConv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal biasConv2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal biasConv2_ce0 : STD_LOGIC;
    signal biasConv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightsConv2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weightsConv2_ce0 : STD_LOGIC;
    signal weightsConv2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightsFC1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weightsFC1_ce0 : STD_LOGIC;
    signal weightsFC1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal biasFC1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal biasFC1_ce0 : STD_LOGIC;
    signal biasFC1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightsFC2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weightsFC2_ce0 : STD_LOGIC;
    signal weightsFC2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal biasFC2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal biasFC2_ce0 : STD_LOGIC;
    signal biasFC2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weightsFC3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weightsFC3_ce0 : STD_LOGIC;
    signal weightsFC3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal biasFC3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal biasFC3_ce0 : STD_LOGIC;
    signal biasFC3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond23_fu_2064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal exitcond10_fu_3257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal f_cast_fu_1513_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_cast_reg_4195 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal f_cast1_fu_1517_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_cast1_reg_4200 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_5_fu_1527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_5_reg_4208 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond33_fu_1521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biasConv1_load_reg_4218 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal phi_mul_cast_fu_1538_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul_cast_reg_4223 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_mul_fu_1542_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_4228 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_4_fu_1554_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_4_reg_4236 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_cast1_fu_1560_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_cast1_reg_4241 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c_4_fu_1570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_4_reg_4249 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_cast2_fu_1576_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_cast2_reg_4254 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal k_9_fu_1586_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_9_reg_4262 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_1592_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_4267 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond30_fu_1580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl6_fu_1598_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_reg_4272 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_1630_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_reg_4277 : STD_LOGIC_VECTOR (8 downto 0);
    signal colOutIdx_2_fu_1646_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_2_reg_4285 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond29_fu_1640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1676_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_reg_4295 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal k_10_fu_1749_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_10_reg_4313 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_i_fu_1743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul2_cast_fu_1813_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul2_cast_reg_4323 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal next_mul3_fu_1817_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul3_reg_4328 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_fu_1829_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_4336 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_fu_1841_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal colOutIdx_reg_4344 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_4_fu_1871_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_4349 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond27_fu_1835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_4_fu_1887_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_4_reg_4357 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_8_fu_1911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_4362 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond26_fu_1881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvarinc_fu_1967_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal maxval_1_load_reg_4392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal maxval_1_3_load_reg_4397 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_1_cast_fu_1984_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_1_cast_reg_4402 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_6_fu_1998_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_6_reg_4410 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_cast_fu_2010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_reg_4415 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond25_fu_1992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul4_cast_fu_2014_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul4_cast_reg_4425 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal next_mul5_fu_2018_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul5_reg_4430 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_5_fu_2030_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_5_reg_4438 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_2054_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_reg_4443 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond24_fu_2024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_2060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_4448 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_15_fu_2070_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_15_reg_4458 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_k_5_cast_fu_2084_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_k_5_cast_reg_4463 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_2088_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_4468 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal j_2_fu_2098_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_4477 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_2147_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_reg_4482 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond22_fu_2092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_2161_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_reg_4492 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal f_2_cast_fu_2571_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_2_cast_reg_4507 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal f_7_fu_2581_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_7_reg_4515 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond21_fu_2575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biasConv2_load_reg_4525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal r_6_fu_2598_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_6_reg_4533 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp13_fu_2624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp13_reg_4538 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond20_fu_2592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_5_fu_2636_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_5_reg_4546 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal k_14_fu_2652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_14_reg_4554 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_75_fu_2668_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_75_reg_4559 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond18_fu_2646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_reg_4564 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_79_fu_2720_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_79_reg_4569 : STD_LOGIC_VECTOR (12 downto 0);
    signal colOutIdx_10_fu_2736_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_10_reg_4577 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_87_fu_2772_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_reg_4582 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond17_fu_2730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_2802_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_88_reg_4587 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_89_fu_2832_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_89_reg_4592 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_k_8_fu_2852_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_8_reg_4600 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal exitcond16_fu_2846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_2890_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_reg_4610 : STD_LOGIC_VECTOR (8 downto 0);
    signal fv14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal k_20_fu_2962_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_20_reg_4628 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal exitcond_i1_fu_2956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_11_fu_3006_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_11_reg_4641 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp8_fu_3032_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp8_reg_4646 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond15_fu_3000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_5_fu_3044_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_5_reg_4654 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_33_fu_3050_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_4659 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond14_fu_3038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_6_fu_3068_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_6_reg_4667 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_72_fu_3088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_reg_4672 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond13_fu_3062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvarinc1_fu_3144_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal f_3_cast_fu_3169_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_3_cast_reg_4704 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal f_8_fu_3179_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_8_reg_4712 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_fu_3185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_reg_4717 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond12_fu_3173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_7_fu_3197_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_7_reg_4730 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal p_shl35_cast_fu_3219_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl35_cast_reg_4735 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond11_fu_3191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl36_cast_fu_3237_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl36_cast_reg_4740 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl37_cast_fu_3249_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl37_cast_reg_4745 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_41_fu_3253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_41_reg_4750 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_16_fu_3263_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_16_reg_4760 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_fu_3275_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_4768 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_165_fu_3281_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_reg_4773 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_fu_3269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_3312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_121_reg_4779 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_131_fu_3327_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_131_reg_4789 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal f_9_fu_3746_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_9_reg_4807 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal next_mul7_fu_3752_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul7_reg_4812 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal k_13_fu_3764_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_13_reg_4820 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp23_fu_3790_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp23_reg_4825 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_3758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_9_fu_3802_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_9_reg_4833 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_96_fu_3808_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_96_reg_4838 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond6_fu_3796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_3840_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_109_reg_4843 : STD_LOGIC_VECTOR (14 downto 0);
    signal b_k_7_fu_3856_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_7_reg_4851 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_148_fu_3876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_148_reg_4856 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_3850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fv16_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal k_15_fu_3971_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_15_reg_4879 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal exitcond_i2_fu_3965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_3982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_reg_4889 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_21_fu_3993_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_21_reg_4902 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal tmp_49_fu_3999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_reg_4907 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_3987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_22_fu_4061_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_22_reg_4920 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal tmp_91_fu_4067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_reg_4925 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_4055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_4095_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_92_reg_4931 : STD_LOGIC_VECTOR (14 downto 0);
    signal colOutIdx_13_fu_4111_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal colOutIdx_13_reg_4939 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal exitcond2_fu_4105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul9_fu_4136_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul9_reg_4959 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal k_16_fu_4148_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_16_reg_4967 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_93_fu_4154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_reg_4972 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_4142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOutIdx_14_fu_4168_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal colOutIdx_14_reg_4981 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal exitcond_fu_4162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool1ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool1ActivationMap_ce0 : STD_LOGIC;
    signal pool1ActivationMap_we0 : STD_LOGIC;
    signal pool1ActivationMap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1ActivationMap_ce0 : STD_LOGIC;
    signal conv1ActivationMap_we0 : STD_LOGIC;
    signal conv1ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal relu1ActivationMap_ce0 : STD_LOGIC;
    signal relu1ActivationMap_we0 : STD_LOGIC;
    signal relu1ActivationMap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu1ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu1ActivationMap_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal relu1ActivationMap_ce1 : STD_LOGIC;
    signal relu1ActivationMap_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv10_ce0 : STD_LOGIC;
    signal fv10_we0 : STD_LOGIC;
    signal fv10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fv11_ce0 : STD_LOGIC;
    signal fv11_we0 : STD_LOGIC;
    signal pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool2ActivationMap_ce0 : STD_LOGIC;
    signal pool2ActivationMap_we0 : STD_LOGIC;
    signal pool2ActivationMap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2ActivationMap_ce0 : STD_LOGIC;
    signal conv2ActivationMap_we0 : STD_LOGIC;
    signal conv2ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal relu2ActivationMap_ce0 : STD_LOGIC;
    signal relu2ActivationMap_we0 : STD_LOGIC;
    signal relu2ActivationMap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu2ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu2ActivationMap_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal relu2ActivationMap_ce1 : STD_LOGIC;
    signal relu2ActivationMap_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv12_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fv12_ce0 : STD_LOGIC;
    signal fv12_we0 : STD_LOGIC;
    signal fv12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal fv13_ce0 : STD_LOGIC;
    signal fv13_we0 : STD_LOGIC;
    signal fv13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal fv14_ce0 : STD_LOGIC;
    signal fv14_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_pool2ActivationMap_ce0 : STD_LOGIC;
    signal b_pool2ActivationMap_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv15_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fv15_ce0 : STD_LOGIC;
    signal fv15_we0 : STD_LOGIC;
    signal fv15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc1ActivationMap_ce0 : STD_LOGIC;
    signal fc1ActivationMap_we0 : STD_LOGIC;
    signal fc1ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fv16_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fv16_ce0 : STD_LOGIC;
    signal fv16_we0 : STD_LOGIC;
    signal relu3ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal relu3ActivationMap_ce0 : STD_LOGIC;
    signal relu3ActivationMap_we0 : STD_LOGIC;
    signal relu3ActivationMap_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu3ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_relu3ActivationMap_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_relu3ActivationMap_ce0 : STD_LOGIC;
    signal d_relu3ActivationMap_we0 : STD_LOGIC;
    signal d_relu3ActivationMap_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_c_sum_fu_1398_ap_start : STD_LOGIC;
    signal grp_c_sum_fu_1398_ap_done : STD_LOGIC;
    signal grp_c_sum_fu_1398_ap_idle : STD_LOGIC;
    signal grp_c_sum_fu_1398_ap_ready : STD_LOGIC;
    signal grp_c_sum_fu_1398_x_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_c_sum_fu_1398_x_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_1398_y_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_c_sum_fu_1398_y_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_1398_y_we0 : STD_LOGIC;
    signal grp_c_sum_fu_1398_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_f_sum_fu_1404_ap_start : STD_LOGIC;
    signal grp_f_sum_fu_1404_ap_done : STD_LOGIC;
    signal grp_f_sum_fu_1404_ap_idle : STD_LOGIC;
    signal grp_f_sum_fu_1404_ap_ready : STD_LOGIC;
    signal grp_f_sum_fu_1404_x_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_f_sum_fu_1404_x_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_1404_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_f_sum_fu_1404_y_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_1404_y_we0 : STD_LOGIC;
    signal grp_f_sum_fu_1404_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_d_sum_fu_1410_ap_start : STD_LOGIC;
    signal grp_d_sum_fu_1410_ap_done : STD_LOGIC;
    signal grp_d_sum_fu_1410_ap_idle : STD_LOGIC;
    signal grp_d_sum_fu_1410_ap_ready : STD_LOGIC;
    signal grp_d_sum_fu_1410_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_d_sum_fu_1410_x_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_1410_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_d_sum_fu_1410_y_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_1410_y_we0 : STD_LOGIC;
    signal grp_d_sum_fu_1410_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_g_sum_fu_1416_ap_start : STD_LOGIC;
    signal grp_g_sum_fu_1416_ap_done : STD_LOGIC;
    signal grp_g_sum_fu_1416_ap_idle : STD_LOGIC;
    signal grp_g_sum_fu_1416_ap_ready : STD_LOGIC;
    signal grp_g_sum_fu_1416_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_g_sum_fu_1416_x_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_1416_y_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_g_sum_fu_1416_y_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_1416_y_we0 : STD_LOGIC;
    signal grp_g_sum_fu_1416_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sum_fu_1422_ap_start : STD_LOGIC;
    signal grp_sum_fu_1422_ap_done : STD_LOGIC;
    signal grp_sum_fu_1422_ap_idle : STD_LOGIC;
    signal grp_sum_fu_1422_ap_ready : STD_LOGIC;
    signal grp_sum_fu_1422_x_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_fu_1422_x_ce0 : STD_LOGIC;
    signal grp_sum_fu_1422_y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sum_fu_1422_y_ce0 : STD_LOGIC;
    signal grp_sum_fu_1422_y_we0 : STD_LOGIC;
    signal grp_sum_fu_1422_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_reg_825 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond32_fu_1548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_836 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond31_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_848 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_reg_859 : STD_LOGIC_VECTOR (4 downto 0);
    signal k4_reg_871 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx1_reg_882 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_y5_i_phi_fu_896_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y5_i_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_903 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul2_reg_925 : STD_LOGIC_VECTOR (12 downto 0);
    signal colOutIdx_1_reg_936 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond28_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_reg_947 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal invdar_reg_958 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_1978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_reg_969 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_reg_992 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul4_reg_1003 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_1_reg_1014 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1026 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal f_2_reg_1037 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_2_reg_1049 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond19_fu_2630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_reg_1061 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_1073 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOutIdx_3_reg_1084 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_1_reg_1095 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_phi_mux_y3_i_phi_fu_1109_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal y3_i_reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i1_reg_1116 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_3_reg_1127 : STD_LOGIC_VECTOR (3 downto 0);
    signal colOutIdx_4_reg_1138 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_k_2_reg_1149 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal invdar1_reg_1160 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_3155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_3_reg_1171 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_assign_5_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_3_reg_1194 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_3_reg_1206 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1218 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal f_4_reg_1229 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal k_4_reg_1241 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond8_fu_3740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul6_reg_1252 : STD_LOGIC_VECTOR (15 downto 0);
    signal colOutIdx_6_reg_1264 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_3_reg_1275 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal y1_i_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i2_reg_1296 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_5_reg_1307 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal k_6_reg_1318 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_95_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_7_reg_1341 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_7_reg_1352 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal phi_mul8_reg_1363 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_111_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_8_reg_1387 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_c_sum_fu_1398_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_f_sum_fu_1404_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_d_sum_fu_1410_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_g_sum_fu_1416_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_sum_fu_1422_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_fu_1533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_1734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_1755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_2156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_2170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_2434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_6_cast_fu_2542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_2587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_fu_2876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_fu_2943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_fu_2951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_2968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_2995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_3150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_fu_3317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_3332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_140_fu_3603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_maxval_7_cast_fu_3711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_152_fu_3960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_3977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_4117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_fu_4131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_fu_4174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_fu_4185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxval_1_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_2_fu_2554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_3_fu_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_1_fu_2547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_6_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_5_fu_3723_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_7_fu_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_4_fu_3716_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal maxval_1_3_maxval_0_3_fu_2439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal maxval_1_8_maxval_0_8_fu_3608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_1428_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_1470_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1474_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_1606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_fu_1618_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_1614_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_1626_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_1652_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_1661_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal colOutIdx1_cast1_fu_1636_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_1671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl11_fu_1681_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_fu_1693_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl11_cast_fu_1689_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_cast_fu_1701_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_1705_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_cast_fu_1711_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_1715_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_1720_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_cast_fu_1725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_1760_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_fu_1772_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_fu_1768_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_1780_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_1784_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_cast_fu_1790_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_fu_1794_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_fu_1799_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_cast_fu_1804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_1847_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_fu_1859_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_1855_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_1867_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_k_cast_fu_1877_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_1893_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_cast_fu_1898_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_fu_1902_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_cast_fu_1907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowOutIdx_to_int_fu_1916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1920_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1930_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_cast1_fu_1988_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_2004_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_8_fu_2036_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_2044_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_2054_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_5_fu_2076_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl18_fu_2104_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl19_fu_2118_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl18_cast_fu_2114_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl19_cast_fu_2128_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_2132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_2138_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_cast_fu_2143_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_cast_fu_2152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_cast_fu_2166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_0_3_to_int_fu_2175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_3_to_int_fu_2193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_2179_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_2189_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_2217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_2211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_2197_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_2207_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_2235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_2229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_2223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_2241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_2247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl22_fu_2259_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl22_cast_fu_2267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_2271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_2296_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_161_i_i_i_fu_2299_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_fu_2287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_2313_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_2317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_162_i_i_i_fu_2331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_2323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_i_i_i_cast_fu_2337_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_2341_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_2349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_2353_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_161_i_i_i_cast1_fu_2309_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_163_i_i_i_fu_2357_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_164_i_i_i_fu_2361_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_59_fu_2373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_i_i_i_fu_2367_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_64_fu_2381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_2385_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_2395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_2280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i_fu_2403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_2409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_2417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_cast_fu_2276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_2423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_2429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_2253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_maxval_to_int_fu_2448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_maxval_1_to_int_fu_2466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_2452_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_2462_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_2490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_2484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_2470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_2480_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_2508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_2502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_2496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_2514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_2520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_2526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_maxval_6_fu_2532_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_maxval_6_cast1_fu_2538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl10_fu_2612_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl10_cast_fu_2620_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_fu_2604_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_2_cast_fu_2642_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_74_fu_2658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_75_fu_2668_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl15_fu_2674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl16_fu_2690_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl15_cast_fu_2686_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl16_cast_fu_2698_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl17_fu_2708_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl17_cast_fu_2716_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl15_cast1_fu_2682_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal colOutIdx_3_cast_fu_2726_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_86_fu_2742_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl26_fu_2748_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl27_fu_2760_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl26_cast_fu_2756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl27_cast_fu_2768_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl28_fu_2778_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl29_fu_2790_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl28_cast_fu_2786_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl29_cast_fu_2798_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl30_fu_2808_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl31_fu_2820_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl30_cast_fu_2816_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl31_cast_fu_2828_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_k_1_cast_fu_2838_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_fu_2858_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_cast_fu_2863_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_fu_2867_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_cast_fu_2872_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_k_1_cast1_fu_2842_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_fu_2881_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_cast_fu_2886_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_103_fu_2895_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_113_fu_2907_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_cast_fu_2903_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_fu_2924_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_cast_fu_2929_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp11_fu_2916_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_106_fu_2933_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_106_cast_fu_2939_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_cast_fu_2948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_2973_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp14_fu_2981_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp14_cast_fu_2986_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_2990_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_fu_3020_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_3028_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_3012_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal b_k_2_cast_fu_3058_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_fu_3074_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_cast_fu_3079_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_fu_3083_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rowOutIdx_7_to_int_fu_3093_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_3097_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_83_fu_3107_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_3117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_3111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_3123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_3129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl23_fu_3211_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_12_fu_3203_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_84_fu_3223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl34_fu_3229_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl35_fu_3241_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_3285_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_fu_3295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_fu_3304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_120_cast_fu_3300_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp18_fu_3322_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal maxval_0_8_to_int_fu_3337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxval_1_8_to_int_fu_3355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_3341_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_fu_3351_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_3379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_3373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_fu_3359_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_134_fu_3369_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_3397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_3391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_fu_3385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_fu_3403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_fu_3409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_fu_3421_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_144_fu_3449_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_161_i_i_i2_fu_3452_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal loc_V_2_fu_3440_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i2_cast_fu_3466_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_fu_3470_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_162_i_i_i2_fu_3484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_fu_3476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_i_i_i2_cast_fu_3490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_fu_3494_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_cast_fu_3502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_3506_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_161_i_i_i2_cast1_fu_3462_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_163_i_i_i2_fu_3510_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_164_i_i_i2_fu_3514_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_154_fu_3526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_i_i_i2_fu_3520_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_145_fu_3534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_146_fu_3538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_9_fu_3548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_143_fu_3433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_i_i_i2_fu_3556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_3562_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_158_fu_3576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_156_fu_3570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_cast_fu_3429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_3588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp19_fu_3582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp20_cast_fu_3593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_139_fu_3597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_142_fu_3415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_maxval_3_to_int_fu_3620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_maxval_4_to_int_fu_3638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_155_fu_3624_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_166_fu_3634_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_3662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_3656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_157_fu_3642_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_167_fu_3652_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs10_fu_3680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs10_fu_3674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_3668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_160_fu_3686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_3692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_fu_3698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_cast_cast_fu_3617_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_maxval_7_fu_3704_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl14_fu_3778_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_fu_3770_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_3786_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl24_fu_3816_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl25_fu_3828_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl24_cast_fu_3824_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl25_cast_fu_3836_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal b_k_3_cast_fu_3846_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp24_fu_3862_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp24_cast_fu_3867_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_147_fu_3871_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_168_fu_3881_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl32_fu_3885_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl33_fu_3897_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl32_cast_fu_3893_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl33_cast_fu_3905_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_149_fu_3909_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_164_fu_3919_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp25_fu_3929_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_149_cast_fu_3915_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp26_fu_3941_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp26_cast_fu_3946_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp25_cast_fu_3937_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_151_fu_3950_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_151_cast_fu_3956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowOutIdx_8_to_int_fu_4004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_4008_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_4018_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_4028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_4022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_4034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_4040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl20_fu_4071_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl21_fu_4083_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl20_cast_fu_4079_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl21_cast_fu_4091_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal colOutIdx_7_cast_fu_4101_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_115_fu_4122_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_115_cast_fu_4127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal colOutIdx_8_cast_fu_4158_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_126_fu_4179_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal tmp_21_fu_2054_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_75_fu_2668_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component c_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component f_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component d_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component g_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_ce0 : OUT STD_LOGIC;
        y_we0 : OUT STD_LOGIC;
        y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_Ee0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_Ffa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenetSynthMatlab_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_rcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_udo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_vdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_wdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_yd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_zec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_Aem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_CeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    biasConv1_U : component lenetSynthMatlab_cud
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biasConv1_address0,
        ce0 => biasConv1_ce0,
        q0 => biasConv1_q0);

    weightsConv1_U : component lenetSynthMatlab_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightsConv1_address0,
        ce0 => weightsConv1_ce0,
        q0 => weightsConv1_q0);

    biasConv2_U : component lenetSynthMatlab_eOg
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biasConv2_address0,
        ce0 => biasConv2_ce0,
        q0 => biasConv2_q0);

    weightsConv2_U : component lenetSynthMatlab_fYi
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightsConv2_address0,
        ce0 => weightsConv2_ce0,
        q0 => weightsConv2_q0);

    weightsFC1_U : component lenetSynthMatlab_g8j
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightsFC1_address0,
        ce0 => weightsFC1_ce0,
        q0 => weightsFC1_q0);

    biasFC1_U : component lenetSynthMatlab_hbi
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biasFC1_address0,
        ce0 => biasFC1_ce0,
        q0 => biasFC1_q0);

    weightsFC2_U : component lenetSynthMatlab_ibs
    generic map (
        DataWidth => 32,
        AddressRange => 10080,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightsFC2_address0,
        ce0 => weightsFC2_ce0,
        q0 => weightsFC2_q0);

    biasFC2_U : component lenetSynthMatlab_jbC
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biasFC2_address0,
        ce0 => biasFC2_ce0,
        q0 => biasFC2_q0);

    weightsFC3_U : component lenetSynthMatlab_kbM
    generic map (
        DataWidth => 32,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weightsFC3_address0,
        ce0 => weightsFC3_ce0,
        q0 => weightsFC3_q0);

    biasFC3_U : component lenetSynthMatlab_lbW
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biasFC3_address0,
        ce0 => biasFC3_ce0,
        q0 => biasFC3_q0);

    pool1ActivationMap_U : component lenetSynthMatlab_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool1ActivationMap_address0,
        ce0 => pool1ActivationMap_ce0,
        we0 => pool1ActivationMap_we0,
        d0 => pool1ActivationMap_d0,
        q0 => pool1ActivationMap_q0);

    conv1ActivationMap_U : component lenetSynthMatlab_ncg
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1ActivationMap_address0,
        ce0 => conv1ActivationMap_ce0,
        we0 => conv1ActivationMap_we0,
        d0 => grp_fu_1428_p2,
        q0 => conv1ActivationMap_q0);

    relu1ActivationMap_U : component lenetSynthMatlab_ocq
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu1ActivationMap_address0,
        ce0 => relu1ActivationMap_ce0,
        we0 => relu1ActivationMap_we0,
        d0 => relu1ActivationMap_d0,
        q0 => relu1ActivationMap_q0,
        address1 => relu1ActivationMap_address1,
        ce1 => relu1ActivationMap_ce1,
        q1 => relu1ActivationMap_q1);

    fv10_U : component lenetSynthMatlab_pcA
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv10_address0,
        ce0 => fv10_ce0,
        we0 => fv10_we0,
        d0 => grp_fu_1453_p2,
        q0 => fv10_q0);

    fv11_U : component lenetSynthMatlab_qcK
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv11_address0,
        ce0 => fv11_ce0,
        we0 => fv11_we0,
        d0 => grp_sum_fu_1422_y_d0,
        q0 => fv11_q0);

    pool2ActivationMap_U : component lenetSynthMatlab_rcU
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool2ActivationMap_address0,
        ce0 => pool2ActivationMap_ce0,
        we0 => pool2ActivationMap_we0,
        d0 => pool2ActivationMap_d0,
        q0 => pool2ActivationMap_q0);

    conv2ActivationMap_U : component lenetSynthMatlab_sc4
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2ActivationMap_address0,
        ce0 => conv2ActivationMap_ce0,
        we0 => conv2ActivationMap_we0,
        d0 => grp_fu_1428_p2,
        q0 => conv2ActivationMap_q0);

    relu2ActivationMap_U : component lenetSynthMatlab_tde
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu2ActivationMap_address0,
        ce0 => relu2ActivationMap_ce0,
        we0 => relu2ActivationMap_we0,
        d0 => relu2ActivationMap_d0,
        q0 => relu2ActivationMap_q0,
        address1 => relu2ActivationMap_address1,
        ce1 => relu2ActivationMap_ce1,
        q1 => relu2ActivationMap_q1);

    fv12_U : component lenetSynthMatlab_udo
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv12_address0,
        ce0 => fv12_ce0,
        we0 => fv12_we0,
        d0 => grp_fu_1453_p2,
        q0 => fv12_q0);

    fv13_U : component lenetSynthMatlab_vdy
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv13_address0,
        ce0 => fv13_ce0,
        we0 => fv13_we0,
        d0 => grp_c_sum_fu_1398_y_d0,
        q0 => fv13_q0);

    fv14_U : component lenetSynthMatlab_wdI
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv14_address0,
        ce0 => fv14_ce0,
        we0 => fv14_we0,
        d0 => grp_d_sum_fu_1410_y_d0,
        q0 => fv14_q0);

    b_pool2ActivationMap_U : component lenetSynthMatlab_rcU
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_pool2ActivationMap_address0,
        ce0 => b_pool2ActivationMap_ce0,
        we0 => b_pool2ActivationMap_we0,
        d0 => grp_fu_1453_p2,
        q0 => b_pool2ActivationMap_q0);

    fv15_U : component lenetSynthMatlab_yd2
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv15_address0,
        ce0 => fv15_ce0,
        we0 => fv15_we0,
        d0 => grp_f_sum_fu_1404_y_d0,
        q0 => fv15_q0);

    fc1ActivationMap_U : component lenetSynthMatlab_zec
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1ActivationMap_address0,
        ce0 => fc1ActivationMap_ce0,
        we0 => fc1ActivationMap_we0,
        d0 => grp_fu_1428_p2,
        q0 => fc1ActivationMap_q0);

    fv16_U : component lenetSynthMatlab_Aem
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fv16_address0,
        ce0 => fv16_ce0,
        we0 => fv16_we0,
        d0 => grp_g_sum_fu_1416_y_d0,
        q0 => fv16_q0);

    relu3ActivationMap_U : component lenetSynthMatlab_zec
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => relu3ActivationMap_address0,
        ce0 => relu3ActivationMap_ce0,
        we0 => relu3ActivationMap_we0,
        d0 => relu3ActivationMap_d0,
        q0 => relu3ActivationMap_q0);

    d_relu3ActivationMap_U : component lenetSynthMatlab_CeG
    generic map (
        DataWidth => 32,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => d_relu3ActivationMap_address0,
        ce0 => d_relu3ActivationMap_ce0,
        we0 => d_relu3ActivationMap_we0,
        d0 => grp_fu_1428_p2,
        q0 => d_relu3ActivationMap_q0);

    grp_c_sum_fu_1398 : component c_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_c_sum_fu_1398_ap_start,
        ap_done => grp_c_sum_fu_1398_ap_done,
        ap_idle => grp_c_sum_fu_1398_ap_idle,
        ap_ready => grp_c_sum_fu_1398_ap_ready,
        x_address0 => grp_c_sum_fu_1398_x_address0,
        x_ce0 => grp_c_sum_fu_1398_x_ce0,
        x_q0 => fv12_q0,
        y_address0 => grp_c_sum_fu_1398_y_address0,
        y_ce0 => grp_c_sum_fu_1398_y_ce0,
        y_we0 => grp_c_sum_fu_1398_y_we0,
        y_d0 => grp_c_sum_fu_1398_y_d0,
        y_q0 => fv13_q0);

    grp_f_sum_fu_1404 : component f_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_f_sum_fu_1404_ap_start,
        ap_done => grp_f_sum_fu_1404_ap_done,
        ap_idle => grp_f_sum_fu_1404_ap_idle,
        ap_ready => grp_f_sum_fu_1404_ap_ready,
        x_address0 => grp_f_sum_fu_1404_x_address0,
        x_ce0 => grp_f_sum_fu_1404_x_ce0,
        x_q0 => b_pool2ActivationMap_q0,
        y_address0 => grp_f_sum_fu_1404_y_address0,
        y_ce0 => grp_f_sum_fu_1404_y_ce0,
        y_we0 => grp_f_sum_fu_1404_y_we0,
        y_d0 => grp_f_sum_fu_1404_y_d0,
        y_q0 => fv15_q0);

    grp_d_sum_fu_1410 : component d_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_d_sum_fu_1410_ap_start,
        ap_done => grp_d_sum_fu_1410_ap_done,
        ap_idle => grp_d_sum_fu_1410_ap_idle,
        ap_ready => grp_d_sum_fu_1410_ap_ready,
        x_address0 => grp_d_sum_fu_1410_x_address0,
        x_ce0 => grp_d_sum_fu_1410_x_ce0,
        x_q0 => fv13_q0,
        y_address0 => grp_d_sum_fu_1410_y_address0,
        y_ce0 => grp_d_sum_fu_1410_y_ce0,
        y_we0 => grp_d_sum_fu_1410_y_we0,
        y_d0 => grp_d_sum_fu_1410_y_d0,
        y_q0 => fv14_q0);

    grp_g_sum_fu_1416 : component g_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_g_sum_fu_1416_ap_start,
        ap_done => grp_g_sum_fu_1416_ap_done,
        ap_idle => grp_g_sum_fu_1416_ap_idle,
        ap_ready => grp_g_sum_fu_1416_ap_ready,
        x_address0 => grp_g_sum_fu_1416_x_address0,
        x_ce0 => grp_g_sum_fu_1416_x_ce0,
        x_q0 => fv15_q0,
        y_address0 => grp_g_sum_fu_1416_y_address0,
        y_ce0 => grp_g_sum_fu_1416_y_ce0,
        y_we0 => grp_g_sum_fu_1416_y_we0,
        y_d0 => grp_g_sum_fu_1416_y_d0,
        y_q0 => fv16_q0);

    grp_sum_fu_1422 : component sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sum_fu_1422_ap_start,
        ap_done => grp_sum_fu_1422_ap_done,
        ap_idle => grp_sum_fu_1422_ap_idle,
        ap_ready => grp_sum_fu_1422_ap_ready,
        x_address0 => grp_sum_fu_1422_x_address0,
        x_ce0 => grp_sum_fu_1422_x_ce0,
        x_q0 => fv10_q0,
        y_address0 => grp_sum_fu_1422_y_address0,
        y_ce0 => grp_sum_fu_1422_y_ce0,
        y_we0 => grp_sum_fu_1422_y_we0,
        y_d0 => grp_sum_fu_1422_y_d0,
        y_q0 => fv11_q0);

    lenetSynthMatlab_bkb_U17 : component lenetSynthMatlab_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1428_p0,
        din1 => grp_fu_1428_p1,
        dout => grp_fu_1428_p2);

    lenetSynthMatlab_DeQ_U18 : component lenetSynthMatlab_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1453_p0,
        din1 => grp_fu_1453_p1,
        dout => grp_fu_1453_p2);

    lenetSynthMatlab_Ee0_U19 : component lenetSynthMatlab_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_30_fu_1470_p0,
        dout => tmp_30_fu_1470_p1);

    lenetSynthMatlab_Ffa_U20 : component lenetSynthMatlab_Ffa
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_1474_p0,
        din1 => grp_fu_1474_p1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1474_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_c_sum_fu_1398_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_c_sum_fu_1398_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond18_fu_2646_p2 = ap_const_lv1_1))) then 
                    grp_c_sum_fu_1398_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_c_sum_fu_1398_ap_ready = ap_const_logic_1)) then 
                    grp_c_sum_fu_1398_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_d_sum_fu_1410_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_d_sum_fu_1410_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                    grp_d_sum_fu_1410_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_d_sum_fu_1410_ap_ready = ap_const_logic_1)) then 
                    grp_d_sum_fu_1410_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_f_sum_fu_1404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_f_sum_fu_1404_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (exitcond7_fu_3758_p2 = ap_const_lv1_1))) then 
                    grp_f_sum_fu_1404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_f_sum_fu_1404_ap_ready = ap_const_logic_1)) then 
                    grp_f_sum_fu_1404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_g_sum_fu_1416_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_g_sum_fu_1416_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_g_sum_fu_1416_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_g_sum_fu_1416_ap_ready = ap_const_logic_1)) then 
                    grp_g_sum_fu_1416_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sum_fu_1422_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sum_fu_1422_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond30_fu_1580_p2 = ap_const_lv1_1))) then 
                    grp_sum_fu_1422_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sum_fu_1422_ap_ready = ap_const_logic_1)) then 
                    grp_sum_fu_1422_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    b_k_1_reg_1095_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_fu_2730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                b_k_1_reg_1095 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                b_k_1_reg_1095 <= b_k_8_reg_4600;
            end if; 
        end if;
    end process;

    b_k_2_reg_1149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_fu_3038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                b_k_2_reg_1149 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                b_k_2_reg_1149 <= b_k_6_reg_4667;
            end if; 
        end if;
    end process;

    b_k_3_reg_1275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_3796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                b_k_3_reg_1275 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                b_k_3_reg_1275 <= b_k_7_reg_4851;
            end if; 
        end if;
    end process;

    b_k_reg_947_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond27_fu_1835_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                b_k_reg_947 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                b_k_reg_947 <= b_k_4_reg_4357;
            end if; 
        end if;
    end process;

    c_1_reg_1014_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond22_fu_2092_p2 = ap_const_lv1_1))) then 
                c_1_reg_1014 <= colOutIdx_15_reg_4458;
            elsif (((exitcond24_fu_2024_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                c_1_reg_1014 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_2_reg_1061_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                c_2_reg_1061 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i1_fu_2956_p2 = ap_const_lv1_1))) then 
                c_2_reg_1061 <= c_5_reg_4546;
            end if; 
        end if;
    end process;

    c_3_reg_1206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and (exitcond9_fu_3269_p2 = ap_const_lv1_1))) then 
                c_3_reg_1206 <= colOutIdx_16_reg_4760;
            elsif (((exitcond11_fu_3191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                c_3_reg_1206 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_reg_859_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond32_fu_1548_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_reg_859 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_1743_p2 = ap_const_lv1_1))) then 
                c_reg_859 <= c_4_reg_4249;
            end if; 
        end if;
    end process;

    colOutIdx1_reg_882_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond30_fu_1580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                colOutIdx1_reg_882 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                colOutIdx1_reg_882 <= colOutIdx_2_reg_4285;
            end if; 
        end if;
    end process;

    colOutIdx_1_reg_936_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond28_fu_1823_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                colOutIdx_1_reg_936 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond26_fu_1881_p2 = ap_const_lv1_1))) then 
                colOutIdx_1_reg_936 <= colOutIdx_reg_4344;
            end if; 
        end if;
    end process;

    colOutIdx_3_reg_1084_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond16_fu_2846_p2 = ap_const_lv1_1))) then 
                colOutIdx_3_reg_1084 <= colOutIdx_10_reg_4577;
            elsif (((exitcond18_fu_2646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                colOutIdx_3_reg_1084 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    colOutIdx_4_reg_1138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond13_fu_3062_p2 = ap_const_lv1_1))) then 
                colOutIdx_4_reg_1138 <= colOutIdx_5_reg_4654;
            elsif (((exitcond15_fu_3000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                colOutIdx_4_reg_1138 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    colOutIdx_6_reg_1264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond5_fu_3850_p2 = ap_const_lv1_1))) then 
                colOutIdx_6_reg_1264 <= colOutIdx_9_reg_4833;
            elsif (((exitcond7_fu_3758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                colOutIdx_6_reg_1264 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    colOutIdx_7_reg_1341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                colOutIdx_7_reg_1341 <= colOutIdx_13_reg_4939;
            elsif (((exitcond3_fu_4055_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                colOutIdx_7_reg_1341 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    colOutIdx_8_reg_1387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                colOutIdx_8_reg_1387 <= colOutIdx_14_reg_4981;
            elsif (((exitcond1_fu_4142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                colOutIdx_8_reg_1387 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    f_1_reg_969_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond24_fu_2024_p2 = ap_const_lv1_1))) then 
                f_1_reg_969 <= f_6_reg_4410;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_3_fu_1978_p2 = ap_const_lv1_1))) then 
                f_1_reg_969 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_2_reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond20_fu_2592_p2 = ap_const_lv1_1))) then 
                f_2_reg_1037 <= f_7_reg_4515;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond25_fu_1992_p2 = ap_const_lv1_1))) then 
                f_2_reg_1037 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_3_reg_1171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond11_fu_3191_p2 = ap_const_lv1_1))) then 
                f_3_reg_1171 <= f_8_reg_4712;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_20_fu_3155_p2 = ap_const_lv1_1))) then 
                f_3_reg_1171 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_4_reg_1229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond12_fu_3173_p2 = ap_const_lv1_1))) then 
                f_4_reg_1229 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                f_4_reg_1229 <= f_9_reg_4807;
            end if; 
        end if;
    end process;

    f_reg_825_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond32_fu_1548_p2 = ap_const_lv1_1))) then 
                f_reg_825 <= f_5_reg_4208;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_reg_825 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar1_reg_1160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond15_fu_3000_p2 = ap_const_lv1_1))) then 
                invdar1_reg_1160 <= ap_const_lv9_0;
            elsif (((tmp_20_fu_3155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                invdar1_reg_1160 <= indvarinc1_fu_3144_p2;
            end if; 
        end if;
    end process;

    invdar_reg_958_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond28_fu_1823_p2 = ap_const_lv1_1))) then 
                invdar_reg_958 <= ap_const_lv11_0;
            elsif (((tmp_3_fu_1978_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                invdar_reg_958 <= indvarinc_fu_1967_p2;
            end if; 
        end if;
    end process;

    j_1_reg_1218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond10_fu_3257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                j_1_reg_1218 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                j_1_reg_1218 <= j_3_reg_4768;
            end if; 
        end if;
    end process;

    j_reg_1026_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_reg_1026 <= j_2_reg_4477;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond23_fu_2064_p2 = ap_const_lv1_0))) then 
                j_reg_1026 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k4_reg_871_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond31_fu_1564_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k4_reg_871 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond29_fu_1640_p2 = ap_const_lv1_1))) then 
                k4_reg_871 <= k_9_reg_4262;
            end if; 
        end if;
    end process;

    k_1_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond33_fu_1521_p2 = ap_const_lv1_1))) then 
                k_1_reg_914 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond27_fu_1835_p2 = ap_const_lv1_1))) then 
                k_1_reg_914 <= k_reg_4336;
            end if; 
        end if;
    end process;

    k_2_reg_1073_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond19_fu_2630_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                k_2_reg_1073 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond17_fu_2730_p2 = ap_const_lv1_1))) then 
                k_2_reg_1073 <= k_14_reg_4554;
            end if; 
        end if;
    end process;

    k_3_reg_1127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond21_fu_2575_p2 = ap_const_lv1_1))) then 
                k_3_reg_1127 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond14_fu_3038_p2 = ap_const_lv1_1))) then 
                k_3_reg_1127 <= k_11_reg_4641;
            end if; 
        end if;
    end process;

    k_4_reg_1241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_3740_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                k_4_reg_1241 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond6_fu_3796_p2 = ap_const_lv1_1))) then 
                k_4_reg_1241 <= k_13_reg_4820;
            end if; 
        end if;
    end process;

    k_5_reg_1307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond8_fu_3740_p2 = ap_const_lv1_1))) then 
                k_5_reg_1307 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                k_5_reg_1307 <= k_21_reg_4902;
            end if; 
        end if;
    end process;

    k_6_reg_1318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (exitcond4_fu_3987_p2 = ap_const_lv1_1))) then 
                k_6_reg_1318 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                k_6_reg_1318 <= k_22_reg_4920;
            end if; 
        end if;
    end process;

    k_7_reg_1352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (exitcond3_fu_4055_p2 = ap_const_lv1_1))) then 
                k_7_reg_1352 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                k_7_reg_1352 <= k_16_reg_4967;
            end if; 
        end if;
    end process;

    k_i1_reg_1116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                k_i1_reg_1116 <= k_20_reg_4628;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                k_i1_reg_1116 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_i2_reg_1296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                k_i2_reg_1296 <= k_15_reg_4879;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                k_i2_reg_1296 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_903_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_i_reg_903 <= k_10_reg_4313;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_i_reg_903 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    maxval_1_6_fu_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                maxval_1_6_fu_344 <= maxval_1_5_fu_3723_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_20_fu_3155_p2 = ap_const_lv1_1))) then 
                maxval_1_6_fu_344 <= maxval_1_load_reg_4392;
            end if; 
        end if;
    end process;

    maxval_1_7_fu_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                maxval_1_7_fu_348 <= maxval_1_4_fu_3716_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_20_fu_3155_p2 = ap_const_lv1_1))) then 
                maxval_1_7_fu_348 <= maxval_1_3_load_reg_4397;
            end if; 
        end if;
    end process;

    phi_mul2_reg_925_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond33_fu_1521_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_925 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond27_fu_1835_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_925 <= next_mul3_reg_4328;
            end if; 
        end if;
    end process;

    phi_mul4_reg_1003_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond23_fu_2064_p2 = ap_const_lv1_1))) then 
                phi_mul4_reg_1003 <= next_mul5_reg_4430;
            elsif (((exitcond25_fu_1992_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                phi_mul4_reg_1003 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul6_reg_1252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_3740_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                phi_mul6_reg_1252 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond6_fu_3796_p2 = ap_const_lv1_1))) then 
                phi_mul6_reg_1252 <= next_mul7_reg_4812;
            end if; 
        end if;
    end process;

    phi_mul8_reg_1363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (exitcond3_fu_4055_p2 = ap_const_lv1_1))) then 
                phi_mul8_reg_1363 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                phi_mul8_reg_1363 <= next_mul9_reg_4959;
            end if; 
        end if;
    end process;

    phi_mul_reg_848_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond31_fu_1564_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_848 <= next_mul_reg_4228;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_848 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    r_1_reg_992_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond23_fu_2064_p2 = ap_const_lv1_1))) then 
                r_1_reg_992 <= r_5_reg_4438;
            elsif (((exitcond25_fu_1992_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                r_1_reg_992 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_2_reg_1049_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond19_fu_2630_p2 = ap_const_lv1_1))) then 
                r_2_reg_1049 <= r_6_reg_4533;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                r_2_reg_1049 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_3_reg_1194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond10_fu_3257_p2 = ap_const_lv1_1))) then 
                r_3_reg_1194 <= r_7_reg_4730;
            elsif (((exitcond12_fu_3173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                r_3_reg_1194 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_reg_836_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond31_fu_1564_p2 = ap_const_lv1_1))) then 
                r_reg_836 <= r_4_reg_4236;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                r_reg_836 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    tmp_111_reg_1375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                tmp_111_reg_1375 <= grp_fu_1428_p2;
            elsif (((exitcond1_fu_4142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                tmp_111_reg_1375 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_95_reg_1329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                tmp_95_reg_1329 <= grp_fu_1428_p2;
            elsif (((exitcond3_fu_4055_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                tmp_95_reg_1329 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_assign_5_reg_1182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond10_fu_3257_p2 = ap_const_lv1_1))) then 
                x_assign_5_reg_1182 <= grp_fu_1428_p2;
            elsif (((exitcond12_fu_3173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                x_assign_5_reg_1182 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    x_assign_reg_980_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond23_fu_2064_p2 = ap_const_lv1_1))) then 
                x_assign_reg_980 <= grp_fu_1428_p2;
            elsif (((exitcond25_fu_1992_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                x_assign_reg_980 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    y1_i_reg_1286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                y1_i_reg_1286 <= grp_fu_1428_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                y1_i_reg_1286 <= fv16_q0;
            end if; 
        end if;
    end process;

    y3_i_reg_1106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                y3_i_reg_1106 <= grp_fu_1428_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                y3_i_reg_1106 <= fv14_q0;
            end if; 
        end if;
    end process;

    y5_i_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                y5_i_reg_893 <= grp_fu_1428_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                y5_i_reg_893 <= fv11_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                b_k_4_reg_4357 <= b_k_4_fu_1887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond23_fu_2064_p2 = ap_const_lv1_0))) then
                    b_k_5_cast_reg_4463(4 downto 1) <= b_k_5_cast_fu_2084_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                b_k_6_reg_4667 <= b_k_6_fu_3068_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                b_k_7_reg_4851 <= b_k_7_fu_3856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                b_k_8_reg_4600 <= b_k_8_fu_2852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                biasConv1_load_reg_4218 <= biasConv1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                biasConv2_load_reg_4525 <= biasConv2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c_4_reg_4249 <= c_4_fu_1570_p2;
                    c_cast1_reg_4241(4 downto 0) <= c_cast1_fu_1560_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                c_5_reg_4546 <= c_5_fu_2636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                colOutIdx_10_reg_4577 <= colOutIdx_10_fu_2736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                colOutIdx_13_reg_4939 <= colOutIdx_13_fu_4111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                colOutIdx_14_reg_4981 <= colOutIdx_14_fu_4168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                colOutIdx_15_reg_4458 <= colOutIdx_15_fu_2070_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                colOutIdx_16_reg_4760 <= colOutIdx_16_fu_3263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                colOutIdx_2_reg_4285 <= colOutIdx_2_fu_1646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                colOutIdx_5_reg_4654 <= colOutIdx_5_fu_3044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                colOutIdx_9_reg_4833 <= colOutIdx_9_fu_3802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                colOutIdx_reg_4344 <= colOutIdx_fu_1841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    f_1_cast_reg_4402(2 downto 0) <= f_1_cast_fu_1984_p1(2 downto 0);
                f_6_reg_4410 <= f_6_fu_1998_p2;
                maxval_1_3_load_reg_4397 <= maxval_1_3_fu_340;
                maxval_1_load_reg_4392 <= maxval_1_fu_336;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    f_2_cast_reg_4507(4 downto 0) <= f_2_cast_fu_2571_p1(4 downto 0);
                f_7_reg_4515 <= f_7_fu_2581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                    f_3_cast_reg_4704(4 downto 0) <= f_3_cast_fu_3169_p1(4 downto 0);
                f_8_reg_4712 <= f_8_fu_3179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_5_reg_4208 <= f_5_fu_1527_p2;
                    f_cast1_reg_4200(2 downto 0) <= f_cast1_fu_1517_p1(2 downto 0);
                    f_cast_reg_4195(2 downto 0) <= f_cast_fu_1513_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                f_9_reg_4807 <= f_9_fu_3746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_2_reg_4477 <= j_2_fu_2098_p2;
                tmp_32_reg_4468 <= tmp_32_fu_2088_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                j_3_reg_4768 <= j_3_fu_3275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    k4_cast2_reg_4254(2 downto 0) <= k4_cast2_fu_1576_p1(2 downto 0);
                k_9_reg_4262 <= k_9_fu_1586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                k_10_reg_4313 <= k_10_fu_1749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                k_11_reg_4641 <= k_11_fu_3006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                k_13_reg_4820 <= k_13_fu_3764_p2;
                next_mul7_reg_4812 <= next_mul7_fu_3752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                k_14_reg_4554 <= k_14_fu_2652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                k_15_reg_4879 <= k_15_fu_3971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                k_16_reg_4967 <= k_16_fu_4148_p2;
                next_mul9_reg_4959 <= next_mul9_fu_4136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                k_20_reg_4628 <= k_20_fu_2962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                k_21_reg_4902 <= k_21_fu_3993_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                k_22_reg_4920 <= k_22_fu_4061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                k_reg_4336 <= k_fu_1829_p2;
                next_mul3_reg_4328 <= next_mul3_fu_1817_p2;
                    phi_mul2_cast_reg_4323(12 downto 0) <= phi_mul2_cast_fu_1813_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                maxval_1_3_fu_340 <= maxval_1_1_fu_2547_p3;
                maxval_1_fu_336 <= maxval_1_2_fu_2554_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                next_mul5_reg_4430 <= next_mul5_fu_2018_p2;
                    phi_mul4_cast_reg_4425(12 downto 0) <= phi_mul4_cast_fu_2014_p1(12 downto 0);
                r_5_reg_4438 <= r_5_fu_2030_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                next_mul_reg_4228 <= next_mul_fu_1542_p2;
                    phi_mul_cast_reg_4223(12 downto 0) <= phi_mul_cast_fu_1538_p1(12 downto 0);
                r_4_reg_4236 <= r_4_fu_1554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_fu_3191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                p_Val2_s_41_reg_4750 <= p_Val2_s_41_fu_3253_p1;
                    p_shl35_cast_reg_4735(8 downto 6) <= p_shl35_cast_fu_3219_p1(8 downto 6);
                    p_shl36_cast_reg_4740(10 downto 8) <= p_shl36_cast_fu_3237_p1(10 downto 8);
                    p_shl37_cast_reg_4745(8 downto 6) <= p_shl37_cast_fu_3249_p1(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond24_fu_2024_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                p_Val2_s_reg_4448 <= p_Val2_s_fu_2060_p1;
                    tmp_21_reg_4443(13 downto 3) <= tmp_21_fu_2054_p2(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond30_fu_1580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    p_shl6_reg_4272(4 downto 2) <= p_shl6_fu_1598_p3(4 downto 2);
                tmp_17_reg_4267 <= tmp_17_fu_1592_p2;
                    tmp_18_reg_4277(8 downto 1) <= tmp_18_fu_1630_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                r_6_reg_4533 <= r_6_fu_2598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                r_7_reg_4730 <= r_7_fu_3197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond20_fu_2592_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    tmp13_reg_4538(10 downto 5) <= tmp13_fu_2624_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_3758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    tmp23_reg_4825(8 downto 4) <= tmp23_fu_3790_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond15_fu_3000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    tmp8_reg_4646(10 downto 5) <= tmp8_fu_3032_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond16_fu_2846_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                tmp_101_reg_4610 <= tmp_101_fu_2890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_3796_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    tmp_109_reg_4843(14 downto 7) <= tmp_109_fu_3840_p2(14 downto 7);
                    tmp_96_reg_4838(6 downto 4) <= tmp_96_fu_3808_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_3269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                tmp_121_reg_4779 <= tmp_121_fu_3312_p2;
                tmp_131_reg_4789 <= tmp_131_fu_3327_p2;
                tmp_165_reg_4773 <= tmp_165_fu_3281_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_3850_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    tmp_148_reg_4856(8 downto 0) <= tmp_148_fu_3876_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond29_fu_1640_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_24_reg_4295 <= tmp_24_fu_1676_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond14_fu_3038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    tmp_33_reg_4659(7 downto 4) <= tmp_33_fu_3050_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond22_fu_2092_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_45_reg_4482 <= tmp_45_fu_2147_p2;
                tmp_51_reg_4492 <= tmp_51_fu_2161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond12_fu_3173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                tmp_48_reg_4717 <= tmp_48_fu_3185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_3987_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    tmp_49_reg_4907(6 downto 0) <= tmp_49_fu_3999_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond27_fu_1835_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    tmp_4_reg_4349(8 downto 1) <= tmp_4_fu_1871_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_i2_fu_3965_p2 = ap_const_lv1_1))) then
                    tmp_52_reg_4889(6 downto 0) <= tmp_52_fu_3982_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond25_fu_1992_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                tmp_5_cast_reg_4415 <= tmp_5_cast_fu_2010_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond13_fu_3062_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    tmp_72_reg_4672(10 downto 0) <= tmp_72_fu_3088_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond18_fu_2646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    tmp_75_reg_4559(11 downto 2) <= tmp_75_fu_2668_p2(11 downto 2);
                    tmp_76_reg_4564(8 downto 1) <= tmp_76_fu_2702_p2(8 downto 1);
                    tmp_79_reg_4569(12 downto 5) <= tmp_79_fu_2720_p2(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond17_fu_2730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    tmp_87_reg_4582(7 downto 1) <= tmp_87_fu_2772_p2(7 downto 1);
                    tmp_88_reg_4587(6 downto 1) <= tmp_88_fu_2802_p2(6 downto 1);
                    tmp_89_reg_4592(10 downto 5) <= tmp_89_fu_2832_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond26_fu_1881_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_8_reg_4362(31 downto 0) <= tmp_8_fu_1911_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_4055_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    tmp_91_reg_4925(6 downto 0) <= tmp_91_fu_4067_p1(6 downto 0);
                    tmp_92_reg_4931(14 downto 3) <= tmp_92_fu_4095_p2(14 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_4142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    tmp_93_reg_4972(3 downto 0) <= tmp_93_fu_4154_p1(3 downto 0);
            end if;
        end if;
    end process;
    f_cast_reg_4195(13 downto 3) <= "00000000000";
    f_cast1_reg_4200(8 downto 3) <= "000000";
    phi_mul_cast_reg_4223(13) <= '0';
    c_cast1_reg_4241(9 downto 5) <= "00000";
    k4_cast2_reg_4254(4 downto 3) <= "00";
    p_shl6_reg_4272(1 downto 0) <= "00";
    tmp_18_reg_4277(0) <= '0';
    phi_mul2_cast_reg_4323(13) <= '0';
    tmp_4_reg_4349(0) <= '0';
    tmp_8_reg_4362(63 downto 32) <= "00000000000000000000000000000000";
    f_1_cast_reg_4402(8 downto 3) <= "000000";
    phi_mul4_cast_reg_4425(13) <= '0';
    tmp_21_reg_4443(2 downto 0) <= "000";
    b_k_5_cast_reg_4463(0) <= '0';
    b_k_5_cast_reg_4463(7 downto 5) <= "000";
    f_2_cast_reg_4507(7 downto 5) <= "000";
    tmp13_reg_4538(4 downto 0) <= "00000";
    tmp_75_reg_4559(1 downto 0) <= "00";
    tmp_76_reg_4564(0) <= '0';
    tmp_79_reg_4569(4 downto 0) <= "00000";
    tmp_87_reg_4582(0) <= '0';
    tmp_88_reg_4587(0) <= '0';
    tmp_89_reg_4592(4 downto 0) <= "00000";
    tmp8_reg_4646(4 downto 0) <= "00000";
    tmp_33_reg_4659(3 downto 0) <= "0000";
    tmp_72_reg_4672(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    f_3_cast_reg_4704(7 downto 5) <= "000";
    p_shl35_cast_reg_4735(5 downto 0) <= "000000";
    p_shl35_cast_reg_4735(10 downto 9) <= "00";
    p_shl36_cast_reg_4740(7 downto 0) <= "10000000";
    p_shl36_cast_reg_4740(11) <= '0';
    p_shl37_cast_reg_4745(5 downto 0) <= "100000";
    p_shl37_cast_reg_4745(11 downto 9) <= "000";
    tmp23_reg_4825(3 downto 0) <= "0000";
    tmp_96_reg_4838(3 downto 0) <= "0000";
    tmp_109_reg_4843(6 downto 0) <= "0000000";
    tmp_148_reg_4856(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_52_reg_4889(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_49_reg_4907(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_91_reg_4925(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_92_reg_4931(2 downto 0) <= "000";
    tmp_93_reg_4972(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state21, exitcond23_fu_2064_p2, ap_CS_fsm_state47, exitcond10_fu_3257_p2, ap_CS_fsm_state2, exitcond33_fu_1521_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond30_fu_1580_p2, ap_CS_fsm_state7, exitcond29_fu_1640_p2, ap_CS_fsm_state12, exitcond_i_fu_1743_p2, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond27_fu_1835_p2, ap_CS_fsm_state16, exitcond26_fu_1881_p2, ap_CS_fsm_state18, ap_CS_fsm_state19, exitcond25_fu_1992_p2, ap_CS_fsm_state20, exitcond24_fu_2024_p2, ap_CS_fsm_state22, exitcond22_fu_2092_p2, ap_CS_fsm_state25, exitcond21_fu_2575_p2, ap_CS_fsm_state27, exitcond20_fu_2592_p2, ap_CS_fsm_state28, ap_CS_fsm_state29, exitcond18_fu_2646_p2, ap_CS_fsm_state30, exitcond17_fu_2730_p2, ap_CS_fsm_state31, exitcond16_fu_2846_p2, ap_CS_fsm_state38, exitcond_i1_fu_2956_p2, ap_CS_fsm_state40, exitcond15_fu_3000_p2, ap_CS_fsm_state41, exitcond14_fu_3038_p2, ap_CS_fsm_state42, exitcond13_fu_3062_p2, ap_CS_fsm_state44, ap_CS_fsm_state45, exitcond12_fu_3173_p2, ap_CS_fsm_state46, exitcond11_fu_3191_p2, ap_CS_fsm_state48, exitcond9_fu_3269_p2, ap_CS_fsm_state51, ap_CS_fsm_state52, exitcond7_fu_3758_p2, ap_CS_fsm_state53, exitcond6_fu_3796_p2, ap_CS_fsm_state54, exitcond5_fu_3850_p2, ap_CS_fsm_state61, exitcond_i2_fu_3965_p2, ap_CS_fsm_state64, exitcond4_fu_3987_p2, ap_CS_fsm_state66, exitcond3_fu_4055_p2, ap_CS_fsm_state67, exitcond2_fu_4105_p2, ap_CS_fsm_state70, exitcond1_fu_4142_p2, ap_CS_fsm_state71, exitcond_fu_4162_p2, grp_c_sum_fu_1398_ap_done, grp_f_sum_fu_1404_ap_done, grp_d_sum_fu_1410_ap_done, grp_g_sum_fu_1416_ap_done, grp_sum_fu_1422_ap_done, exitcond32_fu_1548_p2, exitcond31_fu_1564_p2, exitcond28_fu_1823_p2, tmp_3_fu_1978_p2, exitcond19_fu_2630_p2, tmp_20_fu_3155_p2, exitcond8_fu_3740_p2, ap_CS_fsm_state33, ap_CS_fsm_state56, ap_CS_fsm_state35, ap_CS_fsm_state58, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond33_fu_1521_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond32_fu_1548_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond31_fu_1564_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond30_fu_1580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond29_fu_1640_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sum_fu_1422_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_1743_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond28_fu_1823_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond27_fu_1835_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond26_fu_1881_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_3_fu_1978_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond25_fu_1992_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond24_fu_2024_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond23_fu_2064_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond22_fu_2092_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond21_fu_2575_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond20_fu_2592_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond19_fu_2630_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((exitcond18_fu_2646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond17_fu_2730_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond16_fu_2846_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state33 => 
                if (((grp_c_sum_fu_1398_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_d_sum_fu_1410_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i1_fu_2956_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond15_fu_3000_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond14_fu_3038_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond13_fu_3062_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (tmp_20_fu_3155_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond12_fu_3173_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond11_fu_3191_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond10_fu_3257_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (exitcond9_fu_3269_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond8_fu_3740_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((exitcond7_fu_3758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond6_fu_3796_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond5_fu_3850_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_f_sum_fu_1404_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (grp_g_sum_fu_1416_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_i2_fu_3965_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (exitcond4_fu_3987_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (exitcond3_fu_4055_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (exitcond2_fu_4105_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (exitcond1_fu_4142_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (exitcond_fu_4162_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state70, exitcond1_fu_4142_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) and (exitcond1_fu_4142_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_y3_i_phi_fu_1109_p4 <= y3_i_reg_1106;
    ap_phi_mux_y5_i_phi_fu_896_p4 <= y5_i_reg_893;

    ap_ready_assign_proc : process(ap_CS_fsm_state70, exitcond1_fu_4142_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) and (exitcond1_fu_4142_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_k_1_cast1_fu_2842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_1_reg_1095),7));
    b_k_1_cast_fu_2838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_1_reg_1095),8));
    b_k_2_cast_fu_3058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_2_reg_1149),8));
    b_k_3_cast_fu_3846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_3_reg_1275),7));
    b_k_4_fu_1887_p2 <= std_logic_vector(unsigned(b_k_reg_947) + unsigned(ap_const_lv3_1));
    b_k_5_cast_fu_2084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_5_fu_2076_p3),8));
    b_k_5_fu_2076_p3 <= (c_1_reg_1014 & ap_const_lv1_0);
    b_k_6_fu_3068_p2 <= std_logic_vector(unsigned(b_k_2_reg_1149) + unsigned(ap_const_lv5_1));
    b_k_7_fu_3856_p2 <= std_logic_vector(unsigned(b_k_3_reg_1275) + unsigned(ap_const_lv5_1));
    b_k_8_fu_2852_p2 <= std_logic_vector(unsigned(b_k_1_reg_1095) + unsigned(ap_const_lv3_1));
    b_k_cast_fu_1877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_reg_947),9));
    b_maxval_1_to_int_fu_2466_p1 <= relu1ActivationMap_q1;
    b_maxval_3_to_int_fu_3620_p1 <= relu2ActivationMap_q0;
    b_maxval_4_to_int_fu_3638_p1 <= relu2ActivationMap_q1;
        b_maxval_6_cast1_fu_2538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_maxval_6_fu_2532_p3),32));

    b_maxval_6_cast_fu_2542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_maxval_6_cast1_fu_2538_p1),64));
    b_maxval_6_fu_2532_p3 <= 
        tmp_51_reg_4492 when (tmp_73_fu_2526_p2(0) = '1') else 
        tmp_45_reg_4482;
    b_maxval_7_cast_fu_3711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_maxval_7_fu_3704_p3),64));
    b_maxval_7_fu_3704_p3 <= 
        tmp_131_reg_4789 when (tmp_163_fu_3698_p2(0) = '1') else 
        tmp_122_cast_cast_fu_3617_p1;
    b_maxval_to_int_fu_2448_p1 <= relu1ActivationMap_q0;

    b_pool2ActivationMap_address0_assign_proc : process(tmp_148_reg_4856, grp_f_sum_fu_1404_x_address0, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            b_pool2ActivationMap_address0 <= tmp_148_reg_4856(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            b_pool2ActivationMap_address0 <= grp_f_sum_fu_1404_x_address0;
        else 
            b_pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_pool2ActivationMap_ce0_assign_proc : process(grp_f_sum_fu_1404_x_ce0, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            b_pool2ActivationMap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            b_pool2ActivationMap_ce0 <= grp_f_sum_fu_1404_x_ce0;
        else 
            b_pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            b_pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            b_pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    biasConv1_address0 <= tmp_fu_1533_p1(3 - 1 downto 0);

    biasConv1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            biasConv1_ce0 <= ap_const_logic_1;
        else 
            biasConv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biasConv2_address0 <= tmp_10_fu_2587_p1(4 - 1 downto 0);

    biasConv2_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            biasConv2_ce0 <= ap_const_logic_1;
        else 
            biasConv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biasFC1_address0 <= tmp_52_fu_3982_p1(7 - 1 downto 0);

    biasFC1_ce0_assign_proc : process(ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            biasFC1_ce0 <= ap_const_logic_1;
        else 
            biasFC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biasFC2_address0 <= tmp_91_reg_4925(7 - 1 downto 0);

    biasFC2_ce0_assign_proc : process(ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            biasFC2_ce0 <= ap_const_logic_1;
        else 
            biasFC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biasFC3_address0 <= tmp_93_reg_4972(4 - 1 downto 0);

    biasFC3_ce0_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            biasFC3_ce0 <= ap_const_logic_1;
        else 
            biasFC3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_4_fu_1570_p2 <= std_logic_vector(unsigned(c_reg_859) + unsigned(ap_const_lv5_1));
    c_5_fu_2636_p2 <= std_logic_vector(unsigned(c_2_reg_1061) + unsigned(ap_const_lv4_1));
    c_cast1_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_859),10));
    colOutIdx1_cast1_fu_1636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx1_reg_882),5));
    colOutIdx_10_fu_2736_p2 <= std_logic_vector(unsigned(colOutIdx_3_reg_1084) + unsigned(ap_const_lv3_1));
    colOutIdx_13_fu_4111_p2 <= std_logic_vector(unsigned(colOutIdx_7_reg_1341) + unsigned(ap_const_lv7_1));
    colOutIdx_14_fu_4168_p2 <= std_logic_vector(unsigned(colOutIdx_8_reg_1387) + unsigned(ap_const_lv7_1));
    colOutIdx_15_fu_2070_p2 <= std_logic_vector(unsigned(c_1_reg_1014) + unsigned(ap_const_lv4_1));
    colOutIdx_16_fu_3263_p2 <= std_logic_vector(unsigned(c_3_reg_1206) + unsigned(ap_const_lv3_1));
    colOutIdx_2_fu_1646_p2 <= std_logic_vector(unsigned(colOutIdx1_reg_882) + unsigned(ap_const_lv3_1));
    colOutIdx_3_cast_fu_2726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_3_reg_1084),4));
    colOutIdx_5_fu_3044_p2 <= std_logic_vector(unsigned(colOutIdx_4_reg_1138) + unsigned(ap_const_lv4_1));
    colOutIdx_7_cast_fu_4101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_7_reg_1341),15));
    colOutIdx_8_cast_fu_4158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_8_reg_1387),10));
    colOutIdx_9_fu_3802_p2 <= std_logic_vector(unsigned(colOutIdx_6_reg_1264) + unsigned(ap_const_lv3_1));
    colOutIdx_fu_1841_p2 <= std_logic_vector(unsigned(colOutIdx_1_reg_936) + unsigned(ap_const_lv5_1));

    conv1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, tmp_8_fu_1911_p1, tmp_15_fu_1808_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv1ActivationMap_address0 <= tmp_8_fu_1911_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1ActivationMap_address0 <= tmp_15_fu_1808_p1(13 - 1 downto 0);
        else 
            conv1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            conv1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state12, exitcond_i_fu_1743_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_1743_p2 = ap_const_lv1_1))) then 
            conv1ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state42, tmp_72_fu_3088_p1, tmp_81_fu_2995_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            conv2ActivationMap_address0 <= tmp_72_fu_3088_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            conv2ActivationMap_address0 <= tmp_81_fu_2995_p1(11 - 1 downto 0);
        else 
            conv2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            conv2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state38, exitcond_i1_fu_2956_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i1_fu_2956_p2 = ap_const_lv1_1))) then 
            conv2ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    d_relu3ActivationMap_address0_assign_proc : process(tmp_91_reg_4925, ap_CS_fsm_state71, ap_CS_fsm_state69, tmp_125_fu_4174_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            d_relu3ActivationMap_address0 <= tmp_125_fu_4174_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            d_relu3ActivationMap_address0 <= tmp_91_reg_4925(7 - 1 downto 0);
        else 
            d_relu3ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    d_relu3ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state69)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            d_relu3ActivationMap_ce0 <= ap_const_logic_1;
        else 
            d_relu3ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_relu3ActivationMap_we0_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            d_relu3ActivationMap_we0 <= ap_const_logic_1;
        else 
            d_relu3ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_3257_p2 <= "1" when (c_3_reg_1206 = ap_const_lv3_5) else "0";
    exitcond11_fu_3191_p2 <= "1" when (r_3_reg_1194 = ap_const_lv3_5) else "0";
    exitcond12_fu_3173_p2 <= "1" when (f_3_reg_1171 = ap_const_lv5_10) else "0";
    exitcond13_fu_3062_p2 <= "1" when (b_k_2_reg_1149 = ap_const_lv5_10) else "0";
    exitcond14_fu_3038_p2 <= "1" when (colOutIdx_4_reg_1138 = ap_const_lv4_A) else "0";
    exitcond15_fu_3000_p2 <= "1" when (k_3_reg_1127 = ap_const_lv4_A) else "0";
    exitcond16_fu_2846_p2 <= "1" when (b_k_1_reg_1095 = ap_const_lv3_6) else "0";
    exitcond17_fu_2730_p2 <= "1" when (colOutIdx_3_reg_1084 = ap_const_lv3_5) else "0";
    exitcond18_fu_2646_p2 <= "1" when (k_2_reg_1073 = ap_const_lv3_5) else "0";
    exitcond19_fu_2630_p2 <= "1" when (c_2_reg_1061 = ap_const_lv4_A) else "0";
    exitcond1_fu_4142_p2 <= "1" when (k_7_reg_1352 = ap_const_lv4_A) else "0";
    exitcond20_fu_2592_p2 <= "1" when (r_2_reg_1049 = ap_const_lv4_A) else "0";
    exitcond21_fu_2575_p2 <= "1" when (f_2_reg_1037 = ap_const_lv5_10) else "0";
    exitcond22_fu_2092_p2 <= "1" when (j_reg_1026 = ap_const_lv2_2) else "0";
    exitcond23_fu_2064_p2 <= "1" when (c_1_reg_1014 = ap_const_lv4_E) else "0";
    exitcond24_fu_2024_p2 <= "1" when (r_1_reg_992 = ap_const_lv4_E) else "0";
    exitcond25_fu_1992_p2 <= "1" when (f_1_reg_969 = ap_const_lv3_6) else "0";
    exitcond26_fu_1881_p2 <= "1" when (b_k_reg_947 = ap_const_lv3_6) else "0";
    exitcond27_fu_1835_p2 <= "1" when (colOutIdx_1_reg_936 = ap_const_lv5_1C) else "0";
    exitcond28_fu_1823_p2 <= "1" when (k_1_reg_914 = ap_const_lv5_1C) else "0";
    exitcond29_fu_1640_p2 <= "1" when (colOutIdx1_reg_882 = ap_const_lv3_5) else "0";
    exitcond2_fu_4105_p2 <= "1" when (colOutIdx_7_reg_1341 = ap_const_lv7_78) else "0";
    exitcond30_fu_1580_p2 <= "1" when (k4_reg_871 = ap_const_lv3_5) else "0";
    exitcond31_fu_1564_p2 <= "1" when (c_reg_859 = ap_const_lv5_1C) else "0";
    exitcond32_fu_1548_p2 <= "1" when (r_reg_836 = ap_const_lv5_1C) else "0";
    exitcond33_fu_1521_p2 <= "1" when (f_reg_825 = ap_const_lv3_6) else "0";
    exitcond3_fu_4055_p2 <= "1" when (k_6_reg_1318 = ap_const_lv7_54) else "0";
    exitcond4_fu_3987_p2 <= "1" when (k_5_reg_1307 = ap_const_lv7_78) else "0";
    exitcond5_fu_3850_p2 <= "1" when (b_k_3_reg_1275 = ap_const_lv5_10) else "0";
    exitcond6_fu_3796_p2 <= "1" when (colOutIdx_6_reg_1264 = ap_const_lv3_5) else "0";
    exitcond7_fu_3758_p2 <= "1" when (k_4_reg_1241 = ap_const_lv3_5) else "0";
    exitcond8_fu_3740_p2 <= "1" when (f_4_reg_1229 = ap_const_lv7_78) else "0";
    exitcond9_fu_3269_p2 <= "1" when (j_1_reg_1218 = ap_const_lv2_2) else "0";
    exitcond_fu_4162_p2 <= "1" when (colOutIdx_8_reg_1387 = ap_const_lv7_54) else "0";
    exitcond_i1_fu_2956_p2 <= "1" when (k_i1_reg_1116 = ap_const_lv3_5) else "0";
    exitcond_i2_fu_3965_p2 <= "1" when (k_i2_reg_1296 = ap_const_lv4_F) else "0";
    exitcond_i_fu_1743_p2 <= "1" when (k_i_reg_903 = ap_const_lv3_4) else "0";
    f_1_cast1_fu_1988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_1_reg_969),8));
    f_1_cast_fu_1984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_1_reg_969),9));
    f_2_cast_fu_2571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_2_reg_1037),8));
    f_3_cast_fu_3169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_3_reg_1171),8));
    f_5_fu_1527_p2 <= std_logic_vector(unsigned(f_reg_825) + unsigned(ap_const_lv3_1));
    f_6_fu_1998_p2 <= std_logic_vector(unsigned(f_1_reg_969) + unsigned(ap_const_lv3_1));
    f_7_fu_2581_p2 <= std_logic_vector(unsigned(f_2_reg_1037) + unsigned(ap_const_lv5_1));
    f_8_fu_3179_p2 <= std_logic_vector(unsigned(f_3_reg_1171) + unsigned(ap_const_lv5_1));
    f_9_fu_3746_p2 <= std_logic_vector(unsigned(f_4_reg_1229) + unsigned(ap_const_lv7_1));
    f_cast1_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_825),9));
    f_cast_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_825),14));

    fc1ActivationMap_address0_assign_proc : process(tmp_52_reg_4889, ap_CS_fsm_state64, tmp_49_fu_3999_p1, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            fc1ActivationMap_address0 <= tmp_49_fu_3999_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            fc1ActivationMap_address0 <= tmp_52_reg_4889(7 - 1 downto 0);
        else 
            fc1ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state64, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            fc1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            fc1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            fc1ActivationMap_we0 <= ap_const_logic_1;
        else 
            fc1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv10_address0_assign_proc : process(grp_sum_fu_1422_x_address0, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_25_fu_1734_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fv10_address0 <= tmp_25_fu_1734_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fv10_address0 <= grp_sum_fu_1422_x_address0;
        else 
            fv10_address0 <= "XXXXX";
        end if; 
    end process;


    fv10_ce0_assign_proc : process(grp_sum_fu_1422_x_ce0, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fv10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fv10_ce0 <= grp_sum_fu_1422_x_ce0;
        else 
            fv10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv10_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fv10_we0 <= ap_const_logic_1;
        else 
            fv10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv11_address0_assign_proc : process(ap_CS_fsm_state12, grp_sum_fu_1422_y_address0, ap_CS_fsm_state9, tmp_i_fu_1755_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            fv11_address0 <= tmp_i_fu_1755_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            fv11_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fv11_address0 <= grp_sum_fu_1422_y_address0;
        else 
            fv11_address0 <= "XXX";
        end if; 
    end process;


    fv11_ce0_assign_proc : process(ap_CS_fsm_state12, grp_sum_fu_1422_y_ce0, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fv11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fv11_ce0 <= grp_sum_fu_1422_y_ce0;
        else 
            fv11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv11_we0_assign_proc : process(grp_sum_fu_1422_y_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            fv11_we0 <= grp_sum_fu_1422_y_we0;
        else 
            fv11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv12_address0_assign_proc : process(grp_c_sum_fu_1398_x_address0, ap_CS_fsm_state32, ap_CS_fsm_state33, tmp_102_fu_2951_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fv12_address0 <= tmp_102_fu_2951_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fv12_address0 <= grp_c_sum_fu_1398_x_address0;
        else 
            fv12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    fv12_ce0_assign_proc : process(grp_c_sum_fu_1398_x_ce0, ap_CS_fsm_state32, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fv12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fv12_ce0 <= grp_c_sum_fu_1398_x_ce0;
        else 
            fv12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv12_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fv12_we0 <= ap_const_logic_1;
        else 
            fv12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv13_address0_assign_proc : process(grp_c_sum_fu_1398_y_address0, grp_d_sum_fu_1410_x_address0, ap_CS_fsm_state33, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fv13_address0 <= grp_d_sum_fu_1410_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fv13_address0 <= grp_c_sum_fu_1398_y_address0;
        else 
            fv13_address0 <= "XXXXX";
        end if; 
    end process;


    fv13_ce0_assign_proc : process(grp_c_sum_fu_1398_y_ce0, grp_d_sum_fu_1410_x_ce0, ap_CS_fsm_state33, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fv13_ce0 <= grp_d_sum_fu_1410_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fv13_ce0 <= grp_c_sum_fu_1398_y_ce0;
        else 
            fv13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv13_we0_assign_proc : process(grp_c_sum_fu_1398_y_we0, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            fv13_we0 <= grp_c_sum_fu_1398_y_we0;
        else 
            fv13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv14_address0_assign_proc : process(ap_CS_fsm_state38, grp_d_sum_fu_1410_y_address0, ap_CS_fsm_state35, tmp_i1_fu_2968_p1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            fv14_address0 <= tmp_i1_fu_2968_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fv14_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fv14_address0 <= grp_d_sum_fu_1410_y_address0;
        else 
            fv14_address0 <= "XXX";
        end if; 
    end process;


    fv14_ce0_assign_proc : process(ap_CS_fsm_state38, grp_d_sum_fu_1410_y_ce0, ap_CS_fsm_state35, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            fv14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fv14_ce0 <= grp_d_sum_fu_1410_y_ce0;
        else 
            fv14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv14_we0_assign_proc : process(grp_d_sum_fu_1410_y_we0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            fv14_we0 <= grp_d_sum_fu_1410_y_we0;
        else 
            fv14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv15_address0_assign_proc : process(grp_f_sum_fu_1404_y_address0, grp_g_sum_fu_1416_x_address0, ap_CS_fsm_state56, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            fv15_address0 <= grp_g_sum_fu_1416_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            fv15_address0 <= grp_f_sum_fu_1404_y_address0;
        else 
            fv15_address0 <= "XXXXXXX";
        end if; 
    end process;


    fv15_ce0_assign_proc : process(grp_f_sum_fu_1404_y_ce0, grp_g_sum_fu_1416_x_ce0, ap_CS_fsm_state56, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            fv15_ce0 <= grp_g_sum_fu_1416_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            fv15_ce0 <= grp_f_sum_fu_1404_y_ce0;
        else 
            fv15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv15_we0_assign_proc : process(grp_f_sum_fu_1404_y_we0, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            fv15_we0 <= grp_f_sum_fu_1404_y_we0;
        else 
            fv15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fv16_address0_assign_proc : process(ap_CS_fsm_state61, grp_g_sum_fu_1416_y_address0, ap_CS_fsm_state58, tmp_i2_fu_3977_p1, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            fv16_address0 <= tmp_i2_fu_3977_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            fv16_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            fv16_address0 <= grp_g_sum_fu_1416_y_address0;
        else 
            fv16_address0 <= "XXXX";
        end if; 
    end process;


    fv16_ce0_assign_proc : process(ap_CS_fsm_state61, grp_g_sum_fu_1416_y_ce0, ap_CS_fsm_state58, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            fv16_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            fv16_ce0 <= grp_g_sum_fu_1416_y_ce0;
        else 
            fv16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fv16_we0_assign_proc : process(grp_g_sum_fu_1416_y_we0, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            fv16_we0 <= grp_g_sum_fu_1416_y_we0;
        else 
            fv16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_c_sum_fu_1398_ap_start <= grp_c_sum_fu_1398_ap_start_reg;
    grp_d_sum_fu_1410_ap_start <= grp_d_sum_fu_1410_ap_start_reg;
    grp_f_sum_fu_1404_ap_start <= grp_f_sum_fu_1404_ap_start_reg;

    grp_fu_1428_p0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state72, ap_CS_fsm_state12, ap_CS_fsm_state38, ap_phi_mux_y5_i_phi_fu_896_p4, y5_i_reg_893, x_assign_reg_980, ap_phi_mux_y3_i_phi_fu_1109_p4, y3_i_reg_1106, x_assign_5_reg_1182, ap_CS_fsm_state63, y1_i_reg_1286, ap_CS_fsm_state69, tmp_95_reg_1329, ap_CS_fsm_state73, tmp_111_reg_1375)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_1428_p0 <= tmp_111_reg_1375;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_1428_p0 <= tmp_95_reg_1329;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            grp_fu_1428_p0 <= y1_i_reg_1286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1428_p0 <= x_assign_5_reg_1182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1428_p0 <= y3_i_reg_1106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1428_p0 <= ap_phi_mux_y3_i_phi_fu_1109_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1428_p0 <= x_assign_reg_980;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_1428_p0 <= y5_i_reg_893;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1428_p0 <= ap_phi_mux_y5_i_phi_fu_896_p4;
        else 
            grp_fu_1428_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1428_p1_assign_proc : process(biasFC1_q0, biasFC2_q0, biasFC3_q0, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state39, ap_CS_fsm_state47, ap_CS_fsm_state62, ap_CS_fsm_state68, ap_CS_fsm_state72, biasConv1_load_reg_4218, fv11_q0, ap_CS_fsm_state12, biasConv2_load_reg_4525, fv14_q0, ap_CS_fsm_state38, fv16_q0, ap_CS_fsm_state63, ap_CS_fsm_state69, ap_CS_fsm_state73, grp_fu_1453_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_1428_p1 <= biasFC3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_1428_p1 <= biasFC2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_1428_p1 <= grp_fu_1453_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_1428_p1 <= biasFC1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_1428_p1 <= fv16_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1428_p1 <= fv14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_1428_p1 <= biasConv2_load_reg_4525;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_1428_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_1428_p1 <= fv11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1428_p1 <= biasConv1_load_reg_4218;
        else 
            grp_fu_1428_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1453_p0_assign_proc : process(weightsConv1_q0, weightsConv2_q0, ap_CS_fsm_state68, ap_CS_fsm_state72, pool2ActivationMap_q0, relu3ActivationMap_q0, d_relu3ActivationMap_q0, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_1453_p0 <= d_relu3ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_1453_p0 <= relu3ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_1453_p0 <= pool2ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1453_p0 <= weightsConv2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_1453_p0 <= weightsConv1_q0;
        else 
            grp_fu_1453_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1453_p1_assign_proc : process(weightsFC1_q0, weightsFC2_q0, weightsFC3_q0, ap_CS_fsm_state68, ap_CS_fsm_state72, pool1ActivationMap_q0, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state55, tmp_30_fu_1470_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_1453_p1 <= weightsFC3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_1453_p1 <= weightsFC2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_1453_p1 <= weightsFC1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_1453_p1 <= pool1ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_1453_p1 <= tmp_30_fu_1470_p1;
        else 
            grp_fu_1453_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1474_p0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state48, ap_CS_fsm_state49, conv1ActivationMap_q0, relu1ActivationMap_q0, conv2ActivationMap_q0, relu2ActivationMap_q0, fc1ActivationMap_q0, ap_CS_fsm_state17, ap_CS_fsm_state43, ap_CS_fsm_state65, maxval_1_fu_336, maxval_1_6_fu_344)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_1474_p0 <= fc1ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1474_p0 <= relu2ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1474_p0 <= maxval_1_6_fu_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_1474_p0 <= conv2ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1474_p0 <= relu1ActivationMap_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1474_p0 <= maxval_1_fu_336;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_1474_p0 <= conv1ActivationMap_q0;
        else 
            grp_fu_1474_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1474_p1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state48, ap_CS_fsm_state49, relu1ActivationMap_q1, relu2ActivationMap_q1, ap_CS_fsm_state17, ap_CS_fsm_state43, ap_CS_fsm_state65, maxval_1_3_fu_340, maxval_1_7_fu_348)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1474_p1 <= relu2ActivationMap_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1474_p1 <= maxval_1_7_fu_348;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_1474_p1 <= relu1ActivationMap_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1474_p1 <= maxval_1_3_fu_340;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_1474_p1 <= ap_const_lv32_0;
        else 
            grp_fu_1474_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_g_sum_fu_1416_ap_start <= grp_g_sum_fu_1416_ap_start_reg;
    grp_sum_fu_1422_ap_start <= grp_sum_fu_1422_ap_start_reg;
    indvarinc1_fu_3144_p2 <= std_logic_vector(unsigned(invdar1_reg_1160) + unsigned(ap_const_lv9_1));
    indvarinc_fu_1967_p2 <= std_logic_vector(unsigned(invdar_reg_958) + unsigned(ap_const_lv11_1));
    inputImg_address0 <= tmp_23_fu_1666_p1(10 - 1 downto 0);

    inputImg_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inputImg_ce0 <= ap_const_logic_1;
        else 
            inputImg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_2098_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_reg_1026));
    j_3_fu_3275_p2 <= std_logic_vector(unsigned(j_1_reg_1218) + unsigned(ap_const_lv2_1));
    k4_cast2_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k4_reg_871),5));
    k_10_fu_1749_p2 <= std_logic_vector(unsigned(k_i_reg_903) + unsigned(ap_const_lv3_1));
    k_11_fu_3006_p2 <= std_logic_vector(unsigned(k_3_reg_1127) + unsigned(ap_const_lv4_1));
    k_12_fu_3203_p3 <= (r_3_reg_1194 & ap_const_lv1_0);
    k_13_fu_3764_p2 <= std_logic_vector(unsigned(k_4_reg_1241) + unsigned(ap_const_lv3_1));
    k_14_fu_2652_p2 <= std_logic_vector(unsigned(k_2_reg_1073) + unsigned(ap_const_lv3_1));
    k_15_fu_3971_p2 <= std_logic_vector(unsigned(k_i2_reg_1296) + unsigned(ap_const_lv4_1));
    k_16_fu_4148_p2 <= std_logic_vector(unsigned(k_7_reg_1352) + unsigned(ap_const_lv4_1));
    k_20_fu_2962_p2 <= std_logic_vector(unsigned(k_i1_reg_1116) + unsigned(ap_const_lv3_1));
    k_21_fu_3993_p2 <= std_logic_vector(unsigned(k_5_reg_1307) + unsigned(ap_const_lv7_1));
    k_22_fu_4061_p2 <= std_logic_vector(unsigned(k_6_reg_1318) + unsigned(ap_const_lv7_1));
    k_2_cast_fu_2642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_1073),4));
    k_8_fu_2036_p3 <= (r_1_reg_992 & ap_const_lv1_0);
    k_9_fu_1586_p2 <= std_logic_vector(unsigned(k4_reg_871) + unsigned(ap_const_lv3_1));
    k_fu_1829_p2 <= std_logic_vector(unsigned(k_1_reg_914) + unsigned(ap_const_lv5_1));
    loc_V_2_fu_3440_p4 <= p_Val2_s_41_reg_4750(30 downto 23);
    loc_V_fu_2287_p4 <= p_Val2_s_reg_4448(30 downto 23);
    maxval_0_3_to_int_fu_2175_p1 <= maxval_1_fu_336;
    maxval_0_8_to_int_fu_3337_p1 <= maxval_1_6_fu_344;
    maxval_1_1_fu_2547_p3 <= 
        relu1ActivationMap_q1 when (tmp_32_reg_4468(0) = '1') else 
        maxval_1_3_fu_340;
    maxval_1_2_fu_2554_p3 <= 
        maxval_1_fu_336 when (tmp_32_reg_4468(0) = '1') else 
        relu1ActivationMap_q1;
    maxval_1_3_maxval_0_3_fu_2439_p3 <= 
        maxval_1_3_fu_340 when (tmp_43_fu_2253_p2(0) = '1') else 
        maxval_1_fu_336;
    maxval_1_3_to_int_fu_2193_p1 <= maxval_1_3_fu_340;
    maxval_1_4_fu_3716_p3 <= 
        relu2ActivationMap_q1 when (tmp_165_reg_4773(0) = '1') else 
        maxval_1_7_fu_348;
    maxval_1_5_fu_3723_p3 <= 
        maxval_1_6_fu_344 when (tmp_165_reg_4773(0) = '1') else 
        relu2ActivationMap_q1;
    maxval_1_8_maxval_0_8_fu_3608_p3 <= 
        maxval_1_7_fu_348 when (tmp_142_fu_3415_p2(0) = '1') else 
        maxval_1_6_fu_344;
    maxval_1_8_to_int_fu_3355_p1 <= maxval_1_7_fu_348;
    netScores_address0 <= tmp_93_reg_4972(4 - 1 downto 0);

    netScores_ce0_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            netScores_ce0 <= ap_const_logic_1;
        else 
            netScores_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    netScores_d0 <= grp_fu_1428_p2;

    netScores_we0_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            netScores_we0 <= ap_const_logic_1;
        else 
            netScores_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_1817_p2 <= std_logic_vector(unsigned(phi_mul2_reg_925) + unsigned(ap_const_lv13_A8));
    next_mul5_fu_2018_p2 <= std_logic_vector(unsigned(phi_mul4_reg_1003) + unsigned(ap_const_lv13_150));
    next_mul7_fu_3752_p2 <= std_logic_vector(unsigned(phi_mul6_reg_1252) + unsigned(ap_const_lv16_2580));
    next_mul9_fu_4136_p2 <= std_logic_vector(unsigned(phi_mul8_reg_1363) + unsigned(ap_const_lv10_54));
    next_mul_fu_1542_p2 <= std_logic_vector(unsigned(phi_mul_reg_848) + unsigned(ap_const_lv13_A8));
    notlhs10_fu_3674_p2 <= "0" when (tmp_157_fu_3642_p4 = ap_const_lv8_FF) else "1";
    notlhs1_fu_2211_p2 <= "0" when (tmp_34_fu_2179_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_2229_p2 <= "0" when (tmp_36_fu_2197_p4 = ap_const_lv8_FF) else "1";
    notlhs3_fu_2484_p2 <= "0" when (tmp_55_fu_2452_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_2502_p2 <= "0" when (tmp_57_fu_2470_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_3111_p2 <= "0" when (tmp_82_fu_3097_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_4022_p2 <= "0" when (tmp_97_fu_4008_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_3373_p2 <= "0" when (tmp_119_fu_3341_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_3391_p2 <= "0" when (tmp_133_fu_3359_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_3656_p2 <= "0" when (tmp_155_fu_3624_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1934_p2 <= "0" when (tmp_6_fu_1920_p4 = ap_const_lv8_FF) else "1";
    notrhs10_fu_3680_p2 <= "1" when (tmp_167_fu_3652_p1 = ap_const_lv23_0) else "0";
    notrhs1_fu_2217_p2 <= "1" when (tmp_35_fu_2189_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_2235_p2 <= "1" when (tmp_37_fu_2207_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_2490_p2 <= "1" when (tmp_67_fu_2462_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_2508_p2 <= "1" when (tmp_71_fu_2480_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_3117_p2 <= "1" when (tmp_83_fu_3107_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_4028_p2 <= "1" when (tmp_100_fu_4018_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_3379_p2 <= "1" when (tmp_129_fu_3351_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_3397_p2 <= "1" when (tmp_134_fu_3369_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_3662_p2 <= "1" when (tmp_166_fu_3634_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1940_p2 <= "1" when (tmp_9_fu_1930_p1 = ap_const_lv23_0) else "0";
    p_Val2_1_fu_3562_p3 <= 
        p_Val2_6_i_i_i2_fu_3556_p2 when (tmp_143_fu_3433_p3(0) = '1') else 
        p_Val2_9_fu_3548_p3;
    p_Val2_2_fu_2395_p3 <= 
        tmp_64_fu_2381_p1 when (tmp_58_fu_2323_p3(0) = '1') else 
        tmp_65_fu_2385_p4;
    p_Val2_6_fu_2409_p3 <= 
        p_Val2_6_i_i_i_fu_2403_p2 when (tmp_50_fu_2280_p3(0) = '1') else 
        p_Val2_2_fu_2395_p3;
    p_Val2_6_i_i_i2_fu_3556_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_9_fu_3548_p3));
    p_Val2_6_i_i_i_fu_2403_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_2_fu_2395_p3));
    p_Val2_9_fu_3548_p3 <= 
        tmp_145_fu_3534_p1 when (tmp_150_fu_3476_p3(0) = '1') else 
        tmp_146_fu_3538_p4;
    p_Val2_s_41_fu_3253_p1 <= x_assign_5_reg_1182;
    p_Val2_s_fu_2060_p1 <= x_assign_reg_980;
    p_shl10_cast_fu_2620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_2612_p3),11));
    p_shl10_fu_2612_p3 <= (r_2_reg_1049 & ap_const_lv5_0);
    p_shl11_cast_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl11_fu_1681_p3),7));
    p_shl11_fu_1681_p3 <= (colOutIdx1_reg_882 & ap_const_lv3_0);
    p_shl12_cast_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl12_fu_1693_p3),7));
    p_shl12_fu_1693_p3 <= (colOutIdx1_reg_882 & ap_const_lv1_0);
    p_shl13_fu_3770_p3 <= (k_4_reg_1241 & ap_const_lv6_0);
    p_shl14_cast_fu_3786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_fu_3778_p3),9));
    p_shl14_fu_3778_p3 <= (k_4_reg_1241 & ap_const_lv4_0);
    p_shl15_cast1_fu_2682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl15_fu_2674_p3),13));
    p_shl15_cast_fu_2686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl15_fu_2674_p3),9));
    p_shl15_fu_2674_p3 <= (k_2_reg_1073 & ap_const_lv5_0);
    p_shl16_cast_fu_2698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_fu_2690_p3),9));
    p_shl16_fu_2690_p3 <= (k_2_reg_1073 & ap_const_lv1_0);
    p_shl17_cast_fu_2716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_fu_2708_p3),13));
    p_shl17_fu_2708_p3 <= (k_2_reg_1073 & ap_const_lv9_0);
    p_shl18_cast_fu_2114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_fu_2104_p4),9));
    p_shl18_fu_2104_p4 <= ((c_1_reg_1014 & tmp_32_fu_2088_p1) & ap_const_lv3_0);
    p_shl19_cast_fu_2128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_fu_2118_p4),9));
    p_shl19_fu_2118_p4 <= ((c_1_reg_1014 & tmp_32_fu_2088_p1) & ap_const_lv1_0);
    p_shl1_cast_fu_1855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_1847_p3),9));
    p_shl1_fu_1847_p3 <= (colOutIdx_1_reg_936 & ap_const_lv3_0);
    p_shl20_cast_fu_4079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_fu_4071_p3),15));
    p_shl20_fu_4071_p3 <= (k_6_reg_1318 & ap_const_lv7_0);
    p_shl21_cast_fu_4091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl21_fu_4083_p3),15));
    p_shl21_fu_4083_p3 <= (k_6_reg_1318 & ap_const_lv3_0);
    p_shl22_cast_fu_2267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl22_fu_2259_p3),8));
    p_shl22_fu_2259_p3 <= (c_1_reg_1014 & ap_const_lv3_0);
    p_shl23_fu_3211_p3 <= (r_3_reg_1194 & ap_const_lv6_0);
    p_shl24_cast_fu_3824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl24_fu_3816_p3),15));
    p_shl24_fu_3816_p3 <= (colOutIdx_6_reg_1264 & ap_const_lv11_0);
    p_shl25_cast_fu_3836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl25_fu_3828_p3),15));
    p_shl25_fu_3828_p3 <= (colOutIdx_6_reg_1264 & ap_const_lv7_0);
    p_shl26_cast_fu_2756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl26_fu_2748_p3),8));
    p_shl26_fu_2748_p3 <= (tmp_86_fu_2742_p2 & ap_const_lv3_0);
    p_shl27_cast_fu_2768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl27_fu_2760_p3),8));
    p_shl27_fu_2760_p3 <= (tmp_86_fu_2742_p2 & ap_const_lv1_0);
    p_shl28_cast_fu_2786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl28_fu_2778_p3),7));
    p_shl28_fu_2778_p3 <= (colOutIdx_3_reg_1084 & ap_const_lv3_0);
    p_shl29_cast_fu_2798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl29_fu_2790_p3),7));
    p_shl29_fu_2790_p3 <= (colOutIdx_3_reg_1084 & ap_const_lv1_0);
    p_shl2_cast_fu_1867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_1859_p3),9));
    p_shl2_fu_1859_p3 <= (colOutIdx_1_reg_936 & ap_const_lv1_0);
    p_shl30_cast_fu_2816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl30_fu_2808_p3),11));
    p_shl30_fu_2808_p3 <= (colOutIdx_3_reg_1084 & ap_const_lv7_0);
    p_shl31_cast_fu_2828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl31_fu_2820_p3),11));
    p_shl31_fu_2820_p3 <= (colOutIdx_3_reg_1084 & ap_const_lv5_0);
    p_shl32_cast_fu_3893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl32_fu_3885_p3),12));
    p_shl32_fu_3885_p3 <= (tmp_168_fu_3881_p1 & ap_const_lv7_0);
    p_shl33_cast_fu_3905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl33_fu_3897_p3),12));
    p_shl33_fu_3897_p3 <= (tmp_168_fu_3881_p1 & ap_const_lv3_0);
    p_shl34_fu_3229_p3 <= (tmp_84_fu_3223_p2 & ap_const_lv7_0);
    p_shl35_cast_fu_3219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl23_fu_3211_p3),11));
    p_shl35_fu_3241_p3 <= (tmp_84_fu_3223_p2 & ap_const_lv5_0);
    p_shl36_cast_fu_3237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl34_fu_3229_p3),12));
    p_shl37_cast_fu_3249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl35_fu_3241_p3),12));
    p_shl3_fu_3012_p3 <= (k_3_reg_1127 & ap_const_lv7_0);
    p_shl4_cast_fu_3028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_3020_p3),11));
    p_shl4_fu_3020_p3 <= (k_3_reg_1127 & ap_const_lv5_0);
    p_shl5_cast_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_1618_p3),9));
    p_shl5_fu_1618_p3 <= (k4_reg_871 & ap_const_lv1_0);
    p_shl6_fu_1598_p3 <= (k4_reg_871 & ap_const_lv2_0);
    p_shl7_cast_fu_1768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_1760_p3),9));
    p_shl7_fu_1760_p3 <= (c_reg_859 & ap_const_lv3_0);
    p_shl8_cast_fu_1780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_1772_p3),9));
    p_shl8_fu_1772_p3 <= (c_reg_859 & ap_const_lv1_0);
    p_shl9_fu_2604_p3 <= (r_2_reg_1049 & ap_const_lv7_0);
    p_shl_cast_fu_1614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_1606_p3),9));
    p_shl_fu_1606_p3 <= (k4_reg_871 & ap_const_lv5_0);
    phi_mul2_cast_fu_1813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul2_reg_925),14));
    phi_mul4_cast_fu_2014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul4_reg_1003),14));
    phi_mul_cast_fu_1538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_848),14));

    pool1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state31, tmp_2_fu_1973_p1, tmp_63_fu_2434_p1, tmp_99_fu_2876_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            pool1ActivationMap_address0 <= tmp_99_fu_2876_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pool1ActivationMap_address0 <= tmp_63_fu_2434_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pool1ActivationMap_address0 <= tmp_2_fu_1973_p1(11 - 1 downto 0);
        else 
            pool1ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            pool1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            pool1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool1ActivationMap_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, maxval_1_3_maxval_0_3_fu_2439_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pool1ActivationMap_d0 <= maxval_1_3_maxval_0_3_fu_2439_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pool1ActivationMap_d0 <= ap_const_lv32_0;
        else 
            pool1ActivationMap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, exitcond22_fu_2092_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond22_fu_2092_p2 = ap_const_lv1_1)))) then 
            pool1ActivationMap_we0 <= ap_const_logic_1;
        else 
            pool1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state54, tmp_148_fu_3876_p1, tmp_16_fu_3150_p1, tmp_140_fu_3603_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            pool2ActivationMap_address0 <= tmp_148_fu_3876_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            pool2ActivationMap_address0 <= tmp_140_fu_3603_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            pool2ActivationMap_address0 <= tmp_16_fu_3150_p1(9 - 1 downto 0);
        else 
            pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pool2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            pool2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2ActivationMap_d0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state48, maxval_1_8_maxval_0_8_fu_3608_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            pool2ActivationMap_d0 <= maxval_1_8_maxval_0_8_fu_3608_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            pool2ActivationMap_d0 <= ap_const_lv32_0;
        else 
            pool2ActivationMap_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state48, exitcond9_fu_3269_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (exitcond9_fu_3269_p2 = ap_const_lv1_1)))) then 
            pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_4_fu_1554_p2 <= std_logic_vector(unsigned(r_reg_836) + unsigned(ap_const_lv5_1));
    r_5_fu_2030_p2 <= std_logic_vector(unsigned(r_1_reg_992) + unsigned(ap_const_lv4_1));
    r_6_fu_2598_p2 <= std_logic_vector(unsigned(r_2_reg_1049) + unsigned(ap_const_lv4_1));
    r_7_fu_3197_p2 <= std_logic_vector(unsigned(r_3_reg_1194) + unsigned(ap_const_lv3_1));

    relu1ActivationMap_address0_assign_proc : process(tmp_8_reg_4362, ap_CS_fsm_state22, ap_CS_fsm_state17, tmp_46_fu_2156_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            relu1ActivationMap_address0 <= tmp_46_fu_2156_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            relu1ActivationMap_address0 <= tmp_8_reg_4362(13 - 1 downto 0);
        else 
            relu1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    relu1ActivationMap_address1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, tmp_53_fu_2170_p1, b_maxval_6_cast_fu_2542_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            relu1ActivationMap_address1 <= b_maxval_6_cast_fu_2542_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            relu1ActivationMap_address1 <= tmp_53_fu_2170_p1(13 - 1 downto 0);
        else 
            relu1ActivationMap_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    relu1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            relu1ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu1ActivationMap_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            relu1ActivationMap_ce1 <= ap_const_logic_1;
        else 
            relu1ActivationMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    relu1ActivationMap_d0 <= 
        ap_const_lv32_0 when (tmp_13_fu_1952_p2(0) = '1') else 
        conv1ActivationMap_q0;

    relu1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            relu1ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_address0_assign_proc : process(tmp_72_reg_4672, ap_CS_fsm_state48, ap_CS_fsm_state43, tmp_122_fu_3317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            relu2ActivationMap_address0 <= tmp_122_fu_3317_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            relu2ActivationMap_address0 <= tmp_72_reg_4672(11 - 1 downto 0);
        else 
            relu2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    relu2ActivationMap_address1_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state49, tmp_132_fu_3332_p1, b_maxval_7_cast_fu_3711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            relu2ActivationMap_address1 <= b_maxval_7_cast_fu_3711_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            relu2ActivationMap_address1 <= tmp_132_fu_3332_p1(11 - 1 downto 0);
        else 
            relu2ActivationMap_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    relu2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            relu2ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu2ActivationMap_ce1_assign_proc : process(ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            relu2ActivationMap_ce1 <= ap_const_logic_1;
        else 
            relu2ActivationMap_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    relu2ActivationMap_d0 <= 
        ap_const_lv32_0 when (tmp_94_fu_3129_p2(0) = '1') else 
        conv2ActivationMap_q0;

    relu2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            relu2ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu3ActivationMap_address0_assign_proc : process(tmp_49_reg_4907, ap_CS_fsm_state67, ap_CS_fsm_state65, tmp_114_fu_4117_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            relu3ActivationMap_address0 <= tmp_114_fu_4117_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            relu3ActivationMap_address0 <= tmp_49_reg_4907(7 - 1 downto 0);
        else 
            relu3ActivationMap_address0 <= "XXXXXXX";
        end if; 
    end process;


    relu3ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state67, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            relu3ActivationMap_ce0 <= ap_const_logic_1;
        else 
            relu3ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    relu3ActivationMap_d0 <= 
        ap_const_lv32_0 when (tmp_110_fu_4040_p2(0) = '1') else 
        fc1ActivationMap_q0;

    relu3ActivationMap_we0_assign_proc : process(ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            relu3ActivationMap_we0 <= ap_const_logic_1;
        else 
            relu3ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rowOutIdx_7_to_int_fu_3093_p1 <= conv2ActivationMap_q0;
    rowOutIdx_8_to_int_fu_4004_p1 <= fc1ActivationMap_q0;
    rowOutIdx_to_int_fu_1916_p1 <= conv1ActivationMap_q0;
        sh_assign_1_cast_cas_fu_2353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_2341_p3),25));

        sh_assign_1_cast_fu_2349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_2341_p3),32));

    sh_assign_1_fu_2341_p3 <= 
        tmp_162_i_i_i_cast_fu_2337_p1 when (tmp_58_fu_2323_p3(0) = '1') else 
        sh_assign_fu_2317_p2;
    sh_assign_4_fu_3470_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i2_cast_fu_3466_p1));
        sh_assign_5_cast_cas_fu_3506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_3494_p3),25));

        sh_assign_5_cast_fu_3502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_fu_3494_p3),32));

    sh_assign_5_fu_3494_p3 <= 
        tmp_162_i_i_i2_cast_fu_3490_p1 when (tmp_150_fu_3476_p3(0) = '1') else 
        sh_assign_4_fu_3470_p2;
    sh_assign_fu_2317_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_2313_p1));
        tmp10_cast_fu_2886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_fu_2881_p2),9));

    tmp10_fu_2881_p2 <= std_logic_vector(unsigned(tmp_88_reg_4587) + unsigned(b_k_1_cast1_fu_2842_p1));
    tmp11_fu_2916_p3 <= (tmp_113_fu_2907_p4 & f_2_reg_1037);
        tmp12_cast_fu_2929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_2924_p2),13));

    tmp12_fu_2924_p2 <= std_logic_vector(unsigned(tmp_89_reg_4592) + unsigned(tmp_103_cast_fu_2903_p1));
    tmp13_fu_2624_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_2620_p1) + unsigned(p_shl9_fu_2604_p3));
    tmp14_cast_fu_2986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp14_fu_2981_p2),11));
    tmp14_fu_2981_p2 <= std_logic_vector(unsigned(tmp_78_fu_2973_p3) + unsigned(f_2_cast_reg_4507));
    tmp16_cast_fu_3079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp16_fu_3074_p2),11));
    tmp16_fu_3074_p2 <= std_logic_vector(unsigned(tmp_33_reg_4659) + unsigned(b_k_2_cast_fu_3058_p1));
    tmp17_fu_3304_p3 <= (r_3_reg_1194 & tmp_120_fu_3295_p2);
    tmp18_fu_3322_p2 <= std_logic_vector(unsigned(tmp_120_cast_fu_3300_p1) + unsigned(p_shl36_cast_reg_4740));
    tmp19_fu_3582_p2 <= std_logic_vector(unsigned(tmp_158_fu_3576_p2) + unsigned(tmp_156_fu_3570_p2));
        tmp20_cast_fu_3593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp20_fu_3588_p2),32));

    tmp20_fu_3588_p2 <= std_logic_vector(unsigned(tmp_48_reg_4717) + unsigned(tmp_135_cast_fu_3429_p1));
    tmp23_fu_3790_p2 <= std_logic_vector(unsigned(p_shl13_fu_3770_p3) + unsigned(p_shl14_cast_fu_3786_p1));
    tmp24_cast_fu_3867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp24_fu_3862_p2),9));
    tmp24_fu_3862_p2 <= std_logic_vector(unsigned(tmp_96_reg_4838) + unsigned(b_k_3_cast_fu_3846_p1));
    tmp25_cast_fu_3937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp25_fu_3929_p3),17));
    tmp25_fu_3929_p3 <= (tmp_164_fu_3919_p4 & f_4_reg_1229);
        tmp26_cast_fu_3946_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp26_fu_3941_p2),17));

    tmp26_fu_3941_p2 <= std_logic_vector(unsigned(tmp_109_reg_4843) + unsigned(tmp_149_cast_fu_3915_p1));
    tmp2_fu_1652_p4 <= ((tmp_17_reg_4267 & ap_const_lv2_0) & colOutIdx1_reg_882);
    tmp3_fu_1671_p2 <= std_logic_vector(unsigned(colOutIdx1_cast1_fu_1636_p1) + unsigned(p_shl6_reg_4272));
    tmp4_fu_1715_p2 <= std_logic_vector(signed(tmp_26_cast_fu_1711_p1) + signed(tmp_18_reg_4277));
    tmp5_fu_1794_p2 <= std_logic_vector(signed(tmp_12_cast_fu_1790_p1) + signed(phi_mul_cast_reg_4223));
        tmp6_cast_fu_1898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_1893_p2),14));

    tmp6_fu_1893_p2 <= std_logic_vector(unsigned(tmp_4_reg_4349) + unsigned(b_k_cast_fu_1877_p1));
    tmp7_fu_2423_p2 <= std_logic_vector(unsigned(tmp_60_fu_2417_p2) + unsigned(tmp_58_cast_fu_2276_p1));
    tmp8_fu_3032_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_3028_p1) + unsigned(p_shl3_fu_3012_p3));
        tmp9_cast_fu_2863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_fu_2858_p2),12));

    tmp9_fu_2858_p2 <= std_logic_vector(unsigned(tmp_87_reg_4582) + unsigned(b_k_1_cast_fu_2838_p1));
    tmp_100_fu_4018_p1 <= rowOutIdx_8_to_int_fu_4004_p1(23 - 1 downto 0);
        tmp_101_cast_fu_2948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_101_reg_4610),32));

    tmp_101_fu_2890_p2 <= std_logic_vector(signed(tmp10_cast_fu_2886_p1) + signed(tmp_76_reg_4564));
    tmp_102_fu_2951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_cast_fu_2948_p1),64));
    tmp_103_cast_fu_2903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_2895_p3),11));
    tmp_103_fu_2895_p3 <= (b_k_1_reg_1095 & ap_const_lv4_0);
    tmp_104_fu_4034_p2 <= (notrhs6_fu_4028_p2 or notlhs6_fu_4022_p2);
        tmp_106_cast_fu_2939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_106_fu_2933_p2),32));

    tmp_106_fu_2933_p2 <= std_logic_vector(signed(tmp12_cast_fu_2929_p1) + signed(tmp11_fu_2916_p3));
    tmp_107_fu_2943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_cast_fu_2939_p1),64));
    tmp_109_fu_3840_p2 <= std_logic_vector(unsigned(p_shl24_cast_fu_3824_p1) - unsigned(p_shl25_cast_fu_3836_p1));
    tmp_10_fu_2587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_2_reg_1037),64));
    tmp_110_fu_4040_p2 <= (tmp_104_fu_4034_p2 and grp_fu_1474_p2);
    tmp_113_fu_2907_p4 <= tmp_79_reg_4569(12 downto 5);
    tmp_114_fu_4117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_7_reg_1341),64));
        tmp_115_cast_fu_4127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_115_fu_4122_p2),32));

    tmp_115_fu_4122_p2 <= std_logic_vector(unsigned(tmp_92_reg_4931) + unsigned(colOutIdx_7_cast_fu_4101_p1));
    tmp_116_fu_3285_p4 <= ((c_3_reg_1206 & tmp_165_fu_3281_p1) & ap_const_lv4_0);
    tmp_117_fu_4131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_cast_fu_4127_p1),64));
    tmp_119_fu_3341_p4 <= maxval_0_8_to_int_fu_3337_p1(30 downto 23);
    tmp_120_cast_fu_3300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_3295_p2),12));
    tmp_120_fu_3295_p2 <= std_logic_vector(unsigned(tmp_116_fu_3285_p4) + unsigned(f_3_cast_reg_4704));
    tmp_121_fu_3312_p2 <= std_logic_vector(unsigned(p_shl35_cast_reg_4735) + unsigned(tmp17_fu_3304_p3));
    tmp_122_cast_cast_fu_3617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_reg_4779),12));
    tmp_122_fu_3317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_3312_p2),64));
    tmp_125_fu_4174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOutIdx_8_reg_1387),64));
    tmp_126_fu_4179_p2 <= std_logic_vector(unsigned(phi_mul8_reg_1363) + unsigned(colOutIdx_8_cast_fu_4158_p1));
    tmp_127_fu_4185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_4179_p2),64));
    tmp_129_fu_3351_p1 <= maxval_0_8_to_int_fu_3337_p1(23 - 1 downto 0);
        tmp_12_cast_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_1784_p2),14));

    tmp_12_fu_1784_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1768_p1) - unsigned(p_shl8_cast_fu_1780_p1));
    tmp_131_fu_3327_p2 <= std_logic_vector(unsigned(p_shl37_cast_reg_4745) + unsigned(tmp18_fu_3322_p2));
    tmp_132_fu_3332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_3327_p2),64));
    tmp_133_fu_3359_p4 <= maxval_1_8_to_int_fu_3355_p1(30 downto 23);
    tmp_134_fu_3369_p1 <= maxval_1_8_to_int_fu_3355_p1(23 - 1 downto 0);
    tmp_135_cast_fu_3429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_3421_p3),8));
    tmp_135_fu_3421_p3 <= (c_3_reg_1206 & ap_const_lv4_0);
    tmp_136_fu_3385_p2 <= (notrhs7_fu_3379_p2 or notlhs7_fu_3373_p2);
    tmp_137_fu_3403_p2 <= (notrhs8_fu_3397_p2 or notlhs8_fu_3391_p2);
    tmp_138_fu_3409_p2 <= (tmp_137_fu_3403_p2 and tmp_136_fu_3385_p2);
    tmp_139_fu_3597_p2 <= std_logic_vector(unsigned(tmp19_fu_3582_p2) + unsigned(tmp20_cast_fu_3593_p1));
    tmp_13_fu_1952_p2 <= (tmp_s_fu_1946_p2 and grp_fu_1474_p2);
        tmp_140_fu_3603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_139_fu_3597_p2),64));

    tmp_142_fu_3415_p2 <= (tmp_138_fu_3409_p2 and grp_fu_1474_p2);
    tmp_143_fu_3433_p3 <= p_Val2_s_41_reg_4750(31 downto 31);
    tmp_144_fu_3449_p1 <= p_Val2_s_41_reg_4750(23 - 1 downto 0);
    tmp_145_fu_3534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_3526_p3),32));
    tmp_146_fu_3538_p4 <= tmp_165_i_i_i2_fu_3520_p2(55 downto 24);
    tmp_147_fu_3871_p2 <= std_logic_vector(unsigned(tmp24_cast_fu_3867_p1) + unsigned(tmp23_reg_4825));
    tmp_148_fu_3876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_3871_p2),64));
        tmp_149_cast_fu_3915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_149_fu_3909_p2),15));

    tmp_149_fu_3909_p2 <= std_logic_vector(unsigned(p_shl32_cast_fu_3893_p1) - unsigned(p_shl33_cast_fu_3905_p1));
        tmp_14_cast_fu_1804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_1799_p2),32));

    tmp_14_fu_1799_p2 <= std_logic_vector(unsigned(f_cast_reg_4195) + unsigned(tmp5_fu_1794_p2));
    tmp_150_fu_3476_p3 <= sh_assign_4_fu_3470_p2(8 downto 8);
        tmp_151_cast_fu_3956_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_151_fu_3950_p2),32));

    tmp_151_fu_3950_p2 <= std_logic_vector(signed(tmp26_cast_fu_3946_p1) + signed(tmp25_cast_fu_3937_p1));
    tmp_152_fu_3960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_cast_fu_3956_p1),64));
    tmp_154_fu_3526_p3 <= tmp_164_i_i_i2_fu_3514_p2(24 downto 24);
    tmp_155_fu_3624_p4 <= b_maxval_3_to_int_fu_3620_p1(30 downto 23);
    tmp_156_fu_3570_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_1_fu_3562_p3),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_157_fu_3642_p4 <= b_maxval_4_to_int_fu_3638_p1(30 downto 23);
    tmp_158_fu_3576_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_1_fu_3562_p3),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_159_fu_3668_p2 <= (notrhs9_fu_3662_p2 or notlhs9_fu_3656_p2);
    tmp_15_fu_1808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_cast_fu_1804_p1),64));
    tmp_160_fu_3686_p2 <= (notrhs10_fu_3680_p2 or notlhs10_fu_3674_p2);
    tmp_161_fu_3692_p2 <= (tmp_160_fu_3686_p2 and tmp_159_fu_3668_p2);
    tmp_161_i_i_i2_cast1_fu_3462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_i_i_i2_fu_3452_p4),79));
    tmp_161_i_i_i2_fu_3452_p4 <= ((ap_const_lv1_1 & tmp_144_fu_3449_p1) & ap_const_lv1_0);
    tmp_161_i_i_i_cast1_fu_2309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_i_i_i_fu_2299_p4),79));
    tmp_161_i_i_i_fu_2299_p4 <= ((ap_const_lv1_1 & tmp_56_fu_2296_p1) & ap_const_lv1_0);
        tmp_162_i_i_i2_cast_fu_3490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_162_i_i_i2_fu_3484_p2),9));

    tmp_162_i_i_i2_fu_3484_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_3440_p4));
        tmp_162_i_i_i_cast_fu_2337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_162_i_i_i_fu_2331_p2),9));

    tmp_162_i_i_i_fu_2331_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_2287_p4));
    tmp_163_fu_3698_p2 <= (tmp_161_fu_3692_p2 and grp_fu_1474_p2);
    tmp_163_i_i_i2_fu_3510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_3502_p1),79));
    tmp_163_i_i_i_fu_2357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_2349_p1),79));
    tmp_164_fu_3919_p4 <= phi_mul6_reg_1252(15 downto 7);
    tmp_164_i_i_i2_fu_3514_p2 <= std_logic_vector(shift_right(unsigned(tmp_161_i_i_i2_fu_3452_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_3506_p1(25-1 downto 0)))));
    tmp_164_i_i_i_fu_2361_p2 <= std_logic_vector(shift_right(unsigned(tmp_161_i_i_i_fu_2299_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_2353_p1(25-1 downto 0)))));
    tmp_165_fu_3281_p1 <= j_1_reg_1218(1 - 1 downto 0);
    tmp_165_i_i_i2_fu_3520_p2 <= std_logic_vector(shift_left(unsigned(tmp_161_i_i_i2_cast1_fu_3462_p1),to_integer(unsigned('0' & tmp_163_i_i_i2_fu_3510_p1(31-1 downto 0)))));
    tmp_165_i_i_i_fu_2367_p2 <= std_logic_vector(shift_left(unsigned(tmp_161_i_i_i_cast1_fu_2309_p1),to_integer(unsigned('0' & tmp_163_i_i_i_fu_2357_p1(31-1 downto 0)))));
    tmp_166_fu_3634_p1 <= b_maxval_3_to_int_fu_3620_p1(23 - 1 downto 0);
    tmp_167_fu_3652_p1 <= b_maxval_4_to_int_fu_3638_p1(23 - 1 downto 0);
    tmp_168_fu_3881_p1 <= b_k_3_reg_1275(4 - 1 downto 0);
    tmp_16_fu_3150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_1160),64));
    tmp_17_fu_1592_p2 <= std_logic_vector(unsigned(k4_cast2_fu_1576_p1) + unsigned(r_reg_836));
    tmp_18_fu_1630_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1614_p1) - unsigned(p_shl5_cast_fu_1626_p1));
    tmp_19_fu_2044_p2 <= (k_8_fu_2036_p3 or ap_const_lv5_1);
    tmp_20_fu_3155_p2 <= "1" when (invdar1_reg_1160 = ap_const_lv9_18F) else "0";
    tmp_21_fu_2054_p0 <= tmp_21_fu_2054_p00(5 - 1 downto 0);
    tmp_21_fu_2054_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_2044_p2),14));
    tmp_21_fu_2054_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_2054_p0) * unsigned(ap_const_lv14_A8), 14));
    tmp_22_fu_1661_p2 <= std_logic_vector(unsigned(c_cast1_reg_4241) + unsigned(tmp2_fu_1652_p4));
    tmp_23_fu_1666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1661_p2),64));
    tmp_24_fu_1676_p2 <= std_logic_vector(unsigned(k4_cast2_reg_4254) + unsigned(tmp3_fu_1671_p2));
    tmp_25_fu_1734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_4295),64));
        tmp_26_cast_fu_1711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_1705_p2),9));

    tmp_26_fu_1705_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_1689_p1) - unsigned(p_shl12_cast_fu_1701_p1));
    tmp_27_fu_1720_p2 <= std_logic_vector(unsigned(f_cast1_reg_4200) + unsigned(tmp4_fu_1715_p2));
        tmp_28_cast_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_1720_p2),32));

    tmp_28_fu_1729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_cast_fu_1725_p1),64));
    tmp_2_fu_1973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_958),64));
    tmp_30_fu_1470_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputImg_q0),32));
    tmp_32_fu_2088_p1 <= j_reg_1026(1 - 1 downto 0);
    tmp_33_fu_3050_p3 <= (colOutIdx_4_reg_1138 & ap_const_lv4_0);
    tmp_34_fu_2179_p4 <= maxval_0_3_to_int_fu_2175_p1(30 downto 23);
    tmp_35_fu_2189_p1 <= maxval_0_3_to_int_fu_2175_p1(23 - 1 downto 0);
    tmp_36_fu_2197_p4 <= maxval_1_3_to_int_fu_2193_p1(30 downto 23);
    tmp_37_fu_2207_p1 <= maxval_1_3_to_int_fu_2193_p1(23 - 1 downto 0);
    tmp_38_fu_2223_p2 <= (notrhs1_fu_2217_p2 or notlhs1_fu_2211_p2);
    tmp_39_fu_2241_p2 <= (notrhs2_fu_2235_p2 or notlhs2_fu_2229_p2);
    tmp_3_fu_1978_p2 <= "1" when (invdar_reg_958 = ap_const_lv11_497) else "0";
    tmp_40_fu_2132_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_2114_p1) - unsigned(p_shl19_cast_fu_2128_p1));
    tmp_41_fu_2247_p2 <= (tmp_39_fu_2241_p2 and tmp_38_fu_2223_p2);
    tmp_43_fu_2253_p2 <= (tmp_41_fu_2247_p2 and grp_fu_1474_p2);
        tmp_44_cast_fu_2143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_2138_p2),14));

    tmp_44_fu_2138_p2 <= std_logic_vector(unsigned(tmp_40_fu_2132_p2) + unsigned(f_1_cast_reg_4402));
        tmp_45_cast_fu_2152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_fu_2147_p2),32));

    tmp_45_fu_2147_p2 <= std_logic_vector(signed(tmp_44_cast_fu_2143_p1) + signed(phi_mul4_cast_reg_4425));
    tmp_46_fu_2156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_cast_fu_2152_p1),64));
    tmp_47_fu_2271_p2 <= std_logic_vector(unsigned(p_shl22_cast_fu_2267_p1) - unsigned(b_k_5_cast_reg_4463));
    tmp_48_fu_3185_p2 <= std_logic_vector(unsigned(f_3_cast_fu_3169_p1) + unsigned(ap_const_lv8_B0));
    tmp_49_fu_3999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_5_reg_1307),64));
    tmp_4_fu_1871_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_1855_p1) - unsigned(p_shl2_cast_fu_1867_p1));
    tmp_50_fu_2280_p3 <= p_Val2_s_reg_4448(31 downto 31);
    tmp_51_fu_2161_p2 <= std_logic_vector(signed(tmp_44_cast_fu_2143_p1) + signed(tmp_21_reg_4443));
    tmp_52_fu_3982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_4_reg_1229),64));
    tmp_53_fu_2170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_cast_fu_2166_p1),64));
        tmp_55_cast_fu_2166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_fu_2161_p2),32));

    tmp_55_fu_2452_p4 <= b_maxval_to_int_fu_2448_p1(30 downto 23);
    tmp_56_fu_2296_p1 <= p_Val2_s_reg_4448(23 - 1 downto 0);
    tmp_57_fu_2470_p4 <= b_maxval_1_to_int_fu_2466_p1(30 downto 23);
        tmp_58_cast_fu_2276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_fu_2271_p2),32));

    tmp_58_fu_2323_p3 <= sh_assign_fu_2317_p2(8 downto 8);
    tmp_59_fu_2373_p3 <= tmp_164_i_i_i_fu_2361_p2(24 downto 24);
        tmp_5_cast_fu_2010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_2004_p2),32));

    tmp_5_fu_2004_p2 <= std_logic_vector(unsigned(f_1_cast1_fu_1988_p1) + unsigned(ap_const_lv8_AC));
    tmp_60_fu_2417_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_54) * signed(p_Val2_6_fu_2409_p3))), 32));
    tmp_61_fu_2496_p2 <= (notrhs3_fu_2490_p2 or notlhs3_fu_2484_p2);
    tmp_62_fu_2429_p2 <= std_logic_vector(signed(tmp_5_cast_reg_4415) + signed(tmp7_fu_2423_p2));
        tmp_63_fu_2434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_fu_2429_p2),64));

    tmp_64_fu_2381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_2373_p3),32));
    tmp_65_fu_2385_p4 <= tmp_165_i_i_i_fu_2367_p2(55 downto 24);
    tmp_66_fu_2514_p2 <= (notrhs4_fu_2508_p2 or notlhs4_fu_2502_p2);
    tmp_67_fu_2462_p1 <= b_maxval_to_int_fu_2448_p1(23 - 1 downto 0);
    tmp_68_fu_2520_p2 <= (tmp_66_fu_2514_p2 and tmp_61_fu_2496_p2);
    tmp_69_fu_3083_p2 <= std_logic_vector(unsigned(tmp16_cast_fu_3079_p1) + unsigned(tmp8_reg_4646));
    tmp_6_fu_1920_p4 <= rowOutIdx_to_int_fu_1916_p1(30 downto 23);
    tmp_71_fu_2480_p1 <= b_maxval_1_to_int_fu_2466_p1(23 - 1 downto 0);
    tmp_72_fu_3088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_3083_p2),64));
    tmp_73_fu_2526_p2 <= (tmp_68_fu_2520_p2 and grp_fu_1474_p2);
    tmp_74_fu_2658_p2 <= std_logic_vector(unsigned(k_2_cast_fu_2642_p1) + unsigned(r_2_reg_1049));
    tmp_75_fu_2668_p0 <= tmp_75_fu_2668_p00(4 - 1 downto 0);
    tmp_75_fu_2668_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_2658_p2),12));
    tmp_75_fu_2668_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_2668_p0) * unsigned(ap_const_lv12_54), 12));
    tmp_76_fu_2702_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_2686_p1) - unsigned(p_shl16_cast_fu_2698_p1));
    tmp_78_fu_2973_p3 <= (c_2_reg_1061 & ap_const_lv4_0);
    tmp_79_fu_2720_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_2716_p1) - unsigned(p_shl15_cast1_fu_2682_p1));
        tmp_7_cast_fu_1907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1902_p2),32));

    tmp_7_fu_1902_p2 <= std_logic_vector(signed(tmp6_cast_fu_1898_p1) + signed(phi_mul2_cast_reg_4323));
    tmp_80_fu_2990_p2 <= std_logic_vector(unsigned(tmp13_reg_4538) + unsigned(tmp14_cast_fu_2986_p1));
    tmp_81_fu_2995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_2990_p2),64));
    tmp_82_fu_3097_p4 <= rowOutIdx_7_to_int_fu_3093_p1(30 downto 23);
    tmp_83_fu_3107_p1 <= rowOutIdx_7_to_int_fu_3093_p1(23 - 1 downto 0);
    tmp_84_fu_3223_p2 <= (k_12_fu_3203_p3 or ap_const_lv4_1);
    tmp_85_fu_3123_p2 <= (notrhs5_fu_3117_p2 or notlhs5_fu_3111_p2);
    tmp_86_fu_2742_p2 <= std_logic_vector(unsigned(colOutIdx_3_cast_fu_2726_p1) + unsigned(c_2_reg_1061));
    tmp_87_fu_2772_p2 <= std_logic_vector(unsigned(p_shl26_cast_fu_2756_p1) - unsigned(p_shl27_cast_fu_2768_p1));
    tmp_88_fu_2802_p2 <= std_logic_vector(unsigned(p_shl28_cast_fu_2786_p1) - unsigned(p_shl29_cast_fu_2798_p1));
    tmp_89_fu_2832_p2 <= std_logic_vector(unsigned(p_shl30_cast_fu_2816_p1) - unsigned(p_shl31_cast_fu_2828_p1));
    tmp_8_fu_1911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_1907_p1),64));
    tmp_91_fu_4067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_6_reg_1318),64));
    tmp_92_fu_4095_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_4079_p1) - unsigned(p_shl21_cast_fu_4091_p1));
    tmp_93_fu_4154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_7_reg_1352),64));
    tmp_94_fu_3129_p2 <= (tmp_85_fu_3123_p2 and grp_fu_1474_p2);
    tmp_96_fu_3808_p3 <= (colOutIdx_6_reg_1264 & ap_const_lv4_0);
    tmp_97_fu_4008_p4 <= rowOutIdx_8_to_int_fu_4004_p1(30 downto 23);
        tmp_98_cast_fu_2872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_98_fu_2867_p2),32));

    tmp_98_fu_2867_p2 <= std_logic_vector(signed(tmp9_cast_fu_2863_p1) + signed(tmp_75_reg_4559));
    tmp_99_fu_2876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_cast_fu_2872_p1),64));
    tmp_9_fu_1930_p1 <= rowOutIdx_to_int_fu_1916_p1(23 - 1 downto 0);
    tmp_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_825),64));
    tmp_i1_fu_2968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_20_fu_2962_p2),64));
    tmp_i2_fu_3977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_15_fu_3971_p2),64));
    tmp_i_fu_1755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_10_fu_1749_p2),64));
    tmp_i_i_i_i2_cast_fu_3466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_fu_3440_p4),9));
    tmp_i_i_i_i_cast_fu_2313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_2287_p4),9));
    tmp_s_fu_1946_p2 <= (notrhs_fu_1940_p2 or notlhs_fu_1934_p2);
    weightsConv1_address0 <= tmp_28_fu_1729_p1(8 - 1 downto 0);

    weightsConv1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weightsConv1_ce0 <= ap_const_logic_1;
        else 
            weightsConv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weightsConv2_address0 <= tmp_107_fu_2943_p1(12 - 1 downto 0);

    weightsConv2_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            weightsConv2_ce0 <= ap_const_logic_1;
        else 
            weightsConv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weightsFC1_address0 <= tmp_152_fu_3960_p1(16 - 1 downto 0);

    weightsFC1_ce0_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            weightsFC1_ce0 <= ap_const_logic_1;
        else 
            weightsFC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weightsFC2_address0 <= tmp_117_fu_4131_p1(14 - 1 downto 0);

    weightsFC2_ce0_assign_proc : process(ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            weightsFC2_ce0 <= ap_const_logic_1;
        else 
            weightsFC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weightsFC3_address0 <= tmp_127_fu_4185_p1(10 - 1 downto 0);

    weightsFC3_ce0_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            weightsFC3_ce0 <= ap_const_logic_1;
        else 
            weightsFC3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
