-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity f_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of f_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_25_fu_144_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_25_reg_293 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_150_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_298 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_10_fu_168_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_k_10_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_158_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_158_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_26_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_26_reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_170_fu_196_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_170_reg_329 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_k_11_fu_206_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_11_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_159_fu_212_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_159_reg_343 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_cast_fu_220_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_162_cast_reg_348 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_k_1_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_k_1_reg_356 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_160_fu_271_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_160_reg_361 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_fu_277_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_162_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_addr_3_reg_376 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_load_3_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal y_load_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_164_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal k_reg_79 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_reg_90 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_1_reg_101 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_k_1_reg_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_k_reg_123 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_161_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_163_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal b_k_cast8_fu_158_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_174_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_240_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_k_cast4_fu_224_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_252_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_cast_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_cast_fu_267_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_248_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component lenetSynthMatlab_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lenetSynthMatlab_bkb_U11 : component lenetSynthMatlab_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_load_reg_386,
        din1 => x_load_3_reg_381,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b_k_1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_228_p2 = ap_const_lv1_1))) then 
                b_k_1_reg_112 <= b_k_11_reg_338;
            elsif (((exitcond2_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                b_k_1_reg_112 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    b_k_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                b_k_reg_90 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_k_reg_90 <= b_k_10_reg_306;
            end if; 
        end if;
    end process;

    c_k_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                c_k_reg_123 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                c_k_reg_123 <= c_k_1_reg_356;
            end if; 
        end if;
    end process;

    k_1_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_101 <= ap_const_lv3_0;
            elsif (((exitcond1_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_1_reg_101 <= k_26_reg_324;
            end if; 
        end if;
    end process;

    k_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_79 <= k_25_reg_293;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_79 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                b_k_10_reg_306 <= b_k_10_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                b_k_11_reg_338 <= b_k_11_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_k_1_reg_356 <= c_k_1_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_25_reg_293 <= k_25_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_26_reg_324 <= k_26_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_158_reg_311(6 downto 0) <= tmp_158_fu_179_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_159_reg_343(6 downto 4) <= tmp_159_fu_212_p3(6 downto 4);
                    tmp_162_cast_reg_348(6 downto 4) <= tmp_162_cast_fu_220_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_160_reg_361 <= tmp_160_fu_271_p2;
                tmp_162_reg_366 <= tmp_162_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_164_reg_391 <= grp_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_170_reg_329 <= tmp_170_fu_196_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_298(6 downto 4) <= tmp_fu_150_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                x_load_3_reg_381 <= x_q0;
                y_load_reg_386 <= y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                y_addr_3_reg_376 <= tmp_163_fu_286_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_298(3 downto 0) <= "0000";
    tmp_158_reg_311(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_159_reg_343(3 downto 0) <= "0000";
    tmp_162_cast_reg_348(3 downto 0) <= "0000";
    tmp_162_cast_reg_348(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_138_p2, ap_CS_fsm_state3, exitcond3_fu_162_p2, ap_CS_fsm_state5, exitcond2_fu_184_p2, ap_CS_fsm_state6, exitcond1_fu_200_p2, ap_CS_fsm_state7, exitcond_fu_228_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond1_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_228_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond2_fu_184_p2)
    begin
        if ((((exitcond2_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_184_p2)
    begin
        if (((exitcond2_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_k_10_fu_168_p2 <= std_logic_vector(unsigned(b_k_reg_90) + unsigned(ap_const_lv5_1));
    b_k_11_fu_206_p2 <= std_logic_vector(unsigned(b_k_1_reg_112) + unsigned(ap_const_lv3_1));
    b_k_cast8_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_k_reg_90),7));
    c_k_1_fu_234_p2 <= std_logic_vector(unsigned(c_k_reg_123) + unsigned(ap_const_lv5_1));
    c_k_cast4_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_k_reg_123),7));
    exitcond1_fu_200_p2 <= "1" when (b_k_1_reg_112 = ap_const_lv3_5) else "0";
    exitcond2_fu_184_p2 <= "1" when (k_1_reg_101 = ap_const_lv3_4) else "0";
    exitcond3_fu_162_p2 <= "1" when (b_k_reg_90 = ap_const_lv5_10) else "0";
    exitcond4_fu_138_p2 <= "1" when (k_reg_79 = ap_const_lv3_5) else "0";
    exitcond_fu_228_p2 <= "1" when (c_k_reg_123 = ap_const_lv5_10) else "0";
    k_25_fu_144_p2 <= std_logic_vector(unsigned(k_reg_79) + unsigned(ap_const_lv3_1));
    k_26_fu_190_p2 <= std_logic_vector(unsigned(k_1_reg_101) + unsigned(ap_const_lv3_1));
    tmp1_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_240_p4),9));
    tmp1_fu_240_p4 <= ((tmp_170_reg_329 & tmp_170_reg_329) & ap_const_lv4_0);
    tmp2_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_262_p2),9));
    tmp2_fu_262_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_258_p1) + unsigned(tmp_162_cast_reg_348));
    tmp3_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_252_p2),8));
    tmp3_fu_252_p2 <= std_logic_vector(unsigned(c_k_cast4_fu_224_p1) + unsigned(ap_const_lv7_50));
    tmp_158_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_174_p2),64));
    tmp_159_fu_212_p3 <= (b_k_1_reg_112 & ap_const_lv4_0);
    tmp_160_fu_271_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_267_p1) + unsigned(tmp1_cast_fu_248_p1));
    tmp_161_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_reg_361),64));
    tmp_162_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_fu_212_p3),8));
    tmp_162_fu_277_p2 <= std_logic_vector(unsigned(tmp_159_reg_343) + unsigned(c_k_cast4_fu_224_p1));
    tmp_163_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_162_reg_366),64));
    tmp_170_fu_196_p1 <= k_1_reg_101(2 - 1 downto 0);
    tmp_fu_150_p3 <= (k_reg_79 & ap_const_lv4_0);
    tmp_s_fu_174_p2 <= std_logic_vector(unsigned(tmp_reg_298) + unsigned(b_k_cast8_fu_158_p1));

    x_address0_assign_proc : process(ap_CS_fsm_state3, tmp_158_fu_179_p1, ap_CS_fsm_state8, tmp_161_fu_282_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_address0 <= tmp_161_fu_282_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address0 <= tmp_158_fu_179_p1(9 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_address0_assign_proc : process(tmp_158_reg_311, ap_CS_fsm_state8, y_addr_3_reg_376, ap_CS_fsm_state4, ap_CS_fsm_state15, tmp_163_fu_286_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_address0 <= y_addr_3_reg_376;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_address0 <= tmp_163_fu_286_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_address0 <= tmp_158_reg_311(7 - 1 downto 0);
        else 
            y_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_d0_assign_proc : process(x_q0, tmp_164_reg_391, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_d0 <= tmp_164_reg_391;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_d0 <= x_q0;
        else 
            y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
