-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenetSynthMatlab_hbi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenetSynthMatlab_hbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111001000010111100101010011000", 
    1 => "10110101111111011010111010101001", 
    2 => "00111001001000010010110100000010", 
    3 => "10111000100100010011100001101011", 
    4 => "00111001111100111110100111010001", 
    5 => "00111001100001101011111001110111", 
    6 => "00111000101000001110011010001110", 
    7 => "10111000111110010101000111110111", 
    8 => "00111000111101100111011010010011", 
    9 => "00111000001110100111110101100110", 
    10 => "00110101001101001000010000000110", 
    11 => "10111000000000101001010100111001", 
    12 => "10111000001111001011001000101101", 
    13 => "10111001110010111011001001101101", 
    14 => "10101111110100001000000000000111", 
    15 => "00110111001001011000101011011100", 
    16 => "10111000100000001110001110100101", 
    17 => "00111001001000000101101011101000", 
    18 => "10111000110101110110001010011000", 
    19 => "10110111011001101111001110010011", 
    20 => "10111000100100101111010110100111", 
    21 => "10111000100101111011100111000111", 
    22 => "00110110110010100000000000100010", 
    23 => "10111001000001001101101010010010", 
    24 => "00111001101011010011011111101000", 
    25 => "00111000010011011000011011000110", 
    26 => "10111000110101011111010011010111", 
    27 => "00111001010111010101011010010101", 
    28 => "00111000011101010101100000101110", 
    29 => "10111000011011101010110111101101", 
    30 => "00111001010011111111010011101001", 
    31 => "00111001100000100100100101111011", 
    32 => "10111001100101110000001001111000", 
    33 => "00111001001001011001011000011101", 
    34 => "10111001000100101010111000111100", 
    35 => "00111001100010011001100011001100", 
    36 => "00111000000100101111010110001101", 
    37 => "00110110101010111111101010111110", 
    38 => "10111000111111100101100001110100", 
    39 => "10110100000100000101101001100010", 
    40 => "00111000101001101001111001000010", 
    41 => "00111000111011011010011101000111", 
    42 => "10111001000111011001111110110101", 
    43 => "00111001000000000111111111000111", 
    44 => "00111000100011110001011111001001", 
    45 => "00111010000110010111011111011100", 
    46 => "10111001010010100001011001001111", 
    47 => "00111001111110100001111100011001", 
    48 => "00111001110101110010100100011100", 
    49 => "10111000001000100110110001000010", 
    50 => "10111001001100010110101010000101", 
    51 => "00111000001001111111011011101110", 
    52 => "00111010010001100001010111000011", 
    53 => "00111000100010111110010110101101", 
    54 => "00111001100010110110110011000101", 
    55 => "10110110100010011010010010101101", 
    56 => "00111001101100010110010111100000", 
    57 => "10110111100000010000010111010010", 
    58 => "00111001110001111001111010000011", 
    59 => "00111000101010011111100001000001", 
    60 => "10111001101110010011001101101111", 
    61 => "10110110101100101000011101010110", 
    62 => "00111000000001110001111101011111", 
    63 => "10111001000100100110101101100100", 
    64 => "00111001101010100001000010000101", 
    65 => "00110111100111100001100001010101", 
    66 => "10111001100110111010010010011100", 
    67 => "00111001100010100110001011100010", 
    68 => "00111001100101001110011011001001", 
    69 => "00111000000111001111000111001110", 
    70 => "10110111000111011000000000100010", 
    71 => "00111001111010000000110101101001", 
    72 => "00111010000011001110011011100000", 
    73 => "10110111011000100000001100110101", 
    74 => "10110110101100001100100001101101", 
    75 => "00111000110011010100011110010010", 
    76 => "10111000110011111011100011100110", 
    77 => "10111000100100000100110010110101", 
    78 => "00111000100010110000001101010010", 
    79 => "00111001000000100110110100000110", 
    80 => "00111000100110111111101011011110", 
    81 => "10111000011001111011100011111111", 
    82 => "00111000100000101101101010000000", 
    83 => "00111001100100011101001111101010", 
    84 => "00111001111100111011001111011001", 
    85 => "00111001111110101010001011001010", 
    86 => "00111001001001110000100011001010", 
    87 => "00110110001001010010101010100011", 
    88 => "00111000100101000110000000111010", 
    89 => "10110101101101000100101111000101", 
    90 => "10111000010101000110110001000010", 
    91 => "00111000000001100011111000110001", 
    92 => "00111001110000001000101001100100", 
    93 => "00111000110101010010010000001000", 
    94 => "10110110100100010110010000101100", 
    95 => "10111001000110101110111011010100", 
    96 => "10111000001000000110010110110001", 
    97 => "00111000111001000100100110111110", 
    98 => "00110110000010101110101010001010", 
    99 => "10111001101000100000100000110110", 
    100 => "00110111110010100110111101011000", 
    101 => "10111001101010100010001011110111", 
    102 => "10111001001010010100011111010111", 
    103 => "10110111001000110000000110000101", 
    104 => "00111001000010001000100000000011", 
    105 => "00111000111011011000011110101100", 
    106 => "10110111111111100001111011001110", 
    107 => "00111010000000010000001000101101", 
    108 => "00111000101000110001100000101001", 
    109 => "10111000001000001101101001010010", 
    110 => "00111010000100001111001100110100", 
    111 => "00110111110101110110010000000110", 
    112 => "10111001100111111100110010100110", 
    113 => "00111000100100101110011111111010", 
    114 => "00111001001110001001100100011111", 
    115 => "00111001110010111110011100101101", 
    116 => "00111001011110010011100101110010", 
    117 => "00110101111100000100111110101100", 
    118 => "10110110110001110111010011111100", 
    119 => "10111000011111110011011011010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity lenetSynthMatlab_hbi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenetSynthMatlab_hbi is
    component lenetSynthMatlab_hbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenetSynthMatlab_hbi_rom_U :  component lenetSynthMatlab_hbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


