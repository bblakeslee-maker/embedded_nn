// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __lenetSynthMatlab_hbi_H__
#define __lenetSynthMatlab_hbi_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct lenetSynthMatlab_hbi_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 120;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(lenetSynthMatlab_hbi_ram) {
        ram[0] = "0b10111001000010111100101010011000";
        ram[1] = "0b10110101111111011010111010101001";
        ram[2] = "0b00111001001000010010110100000010";
        ram[3] = "0b10111000100100010011100001101011";
        ram[4] = "0b00111001111100111110100111010001";
        ram[5] = "0b00111001100001101011111001110111";
        ram[6] = "0b00111000101000001110011010001110";
        ram[7] = "0b10111000111110010101000111110111";
        ram[8] = "0b00111000111101100111011010010011";
        ram[9] = "0b00111000001110100111110101100110";
        ram[10] = "0b00110101001101001000010000000110";
        ram[11] = "0b10111000000000101001010100111001";
        ram[12] = "0b10111000001111001011001000101101";
        ram[13] = "0b10111001110010111011001001101101";
        ram[14] = "0b10101111110100001000000000000111";
        ram[15] = "0b00110111001001011000101011011100";
        ram[16] = "0b10111000100000001110001110100101";
        ram[17] = "0b00111001001000000101101011101000";
        ram[18] = "0b10111000110101110110001010011000";
        ram[19] = "0b10110111011001101111001110010011";
        ram[20] = "0b10111000100100101111010110100111";
        ram[21] = "0b10111000100101111011100111000111";
        ram[22] = "0b00110110110010100000000000100010";
        ram[23] = "0b10111001000001001101101010010010";
        ram[24] = "0b00111001101011010011011111101000";
        ram[25] = "0b00111000010011011000011011000110";
        ram[26] = "0b10111000110101011111010011010111";
        ram[27] = "0b00111001010111010101011010010101";
        ram[28] = "0b00111000011101010101100000101110";
        ram[29] = "0b10111000011011101010110111101101";
        ram[30] = "0b00111001010011111111010011101001";
        ram[31] = "0b00111001100000100100100101111011";
        ram[32] = "0b10111001100101110000001001111000";
        ram[33] = "0b00111001001001011001011000011101";
        ram[34] = "0b10111001000100101010111000111100";
        ram[35] = "0b00111001100010011001100011001100";
        ram[36] = "0b00111000000100101111010110001101";
        ram[37] = "0b00110110101010111111101010111110";
        ram[38] = "0b10111000111111100101100001110100";
        ram[39] = "0b10110100000100000101101001100010";
        ram[40] = "0b00111000101001101001111001000010";
        ram[41] = "0b00111000111011011010011101000111";
        ram[42] = "0b10111001000111011001111110110101";
        ram[43] = "0b00111001000000000111111111000111";
        ram[44] = "0b00111000100011110001011111001001";
        ram[45] = "0b00111010000110010111011111011100";
        ram[46] = "0b10111001010010100001011001001111";
        ram[47] = "0b00111001111110100001111100011001";
        ram[48] = "0b00111001110101110010100100011100";
        ram[49] = "0b10111000001000100110110001000010";
        ram[50] = "0b10111001001100010110101010000101";
        ram[51] = "0b00111000001001111111011011101110";
        ram[52] = "0b00111010010001100001010111000011";
        ram[53] = "0b00111000100010111110010110101101";
        ram[54] = "0b00111001100010110110110011000101";
        ram[55] = "0b10110110100010011010010010101101";
        ram[56] = "0b00111001101100010110010111100000";
        ram[57] = "0b10110111100000010000010111010010";
        ram[58] = "0b00111001110001111001111010000011";
        ram[59] = "0b00111000101010011111100001000001";
        ram[60] = "0b10111001101110010011001101101111";
        ram[61] = "0b10110110101100101000011101010110";
        ram[62] = "0b00111000000001110001111101011111";
        ram[63] = "0b10111001000100100110101101100100";
        ram[64] = "0b00111001101010100001000010000101";
        ram[65] = "0b00110111100111100001100001010101";
        ram[66] = "0b10111001100110111010010010011100";
        ram[67] = "0b00111001100010100110001011100010";
        ram[68] = "0b00111001100101001110011011001001";
        ram[69] = "0b00111000000111001111000111001110";
        ram[70] = "0b10110111000111011000000000100010";
        ram[71] = "0b00111001111010000000110101101001";
        ram[72] = "0b00111010000011001110011011100000";
        ram[73] = "0b10110111011000100000001100110101";
        ram[74] = "0b10110110101100001100100001101101";
        ram[75] = "0b00111000110011010100011110010010";
        ram[76] = "0b10111000110011111011100011100110";
        ram[77] = "0b10111000100100000100110010110101";
        ram[78] = "0b00111000100010110000001101010010";
        ram[79] = "0b00111001000000100110110100000110";
        ram[80] = "0b00111000100110111111101011011110";
        ram[81] = "0b10111000011001111011100011111111";
        ram[82] = "0b00111000100000101101101010000000";
        ram[83] = "0b00111001100100011101001111101010";
        ram[84] = "0b00111001111100111011001111011001";
        ram[85] = "0b00111001111110101010001011001010";
        ram[86] = "0b00111001001001110000100011001010";
        ram[87] = "0b00110110001001010010101010100011";
        ram[88] = "0b00111000100101000110000000111010";
        ram[89] = "0b10110101101101000100101111000101";
        ram[90] = "0b10111000010101000110110001000010";
        ram[91] = "0b00111000000001100011111000110001";
        ram[92] = "0b00111001110000001000101001100100";
        ram[93] = "0b00111000110101010010010000001000";
        ram[94] = "0b10110110100100010110010000101100";
        ram[95] = "0b10111001000110101110111011010100";
        ram[96] = "0b10111000001000000110010110110001";
        ram[97] = "0b00111000111001000100100110111110";
        ram[98] = "0b00110110000010101110101010001010";
        ram[99] = "0b10111001101000100000100000110110";
        ram[100] = "0b00110111110010100110111101011000";
        ram[101] = "0b10111001101010100010001011110111";
        ram[102] = "0b10111001001010010100011111010111";
        ram[103] = "0b10110111001000110000000110000101";
        ram[104] = "0b00111001000010001000100000000011";
        ram[105] = "0b00111000111011011000011110101100";
        ram[106] = "0b10110111111111100001111011001110";
        ram[107] = "0b00111010000000010000001000101101";
        ram[108] = "0b00111000101000110001100000101001";
        ram[109] = "0b10111000001000001101101001010010";
        ram[110] = "0b00111010000100001111001100110100";
        ram[111] = "0b00110111110101110110010000000110";
        ram[112] = "0b10111001100111111100110010100110";
        ram[113] = "0b00111000100100101110011111111010";
        ram[114] = "0b00111001001110001001100100011111";
        ram[115] = "0b00111001110010111110011100101101";
        ram[116] = "0b00111001011110010011100101110010";
        ram[117] = "0b00110101111100000100111110101100";
        ram[118] = "0b10110110110001110111010011111100";
        ram[119] = "0b10111000011111110011011011010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(lenetSynthMatlab_hbi) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 120;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


lenetSynthMatlab_hbi_ram* meminst;


SC_CTOR(lenetSynthMatlab_hbi) {
meminst = new lenetSynthMatlab_hbi_ram("lenetSynthMatlab_hbi_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~lenetSynthMatlab_hbi() {
    delete meminst;
}


};//endmodule
#endif
