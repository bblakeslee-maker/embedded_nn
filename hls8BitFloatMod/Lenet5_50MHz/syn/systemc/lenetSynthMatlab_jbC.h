// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __lenetSynthMatlab_jbC_H__
#define __lenetSynthMatlab_jbC_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct lenetSynthMatlab_jbC_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 84;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(lenetSynthMatlab_jbC_ram) {
        ram[0] = "0b00111010001001001100011111001111";
        ram[1] = "0b00111010001111100010001100110010";
        ram[2] = "0b00111010101010000100100000110110";
        ram[3] = "0b10110110101011111110000011110111";
        ram[4] = "0b10111001101001001010100010000000";
        ram[5] = "0b10111010000011101111101010001010";
        ram[6] = "0b10111000100100011010100110111101";
        ram[7] = "0b10111001110101011011111101010110";
        ram[8] = "0b00111010110010001101010110010010";
        ram[9] = "0b10111010100000011110111100101010";
        ram[10] = "0b10110111100111100000100010010111";
        ram[11] = "0b00111010011000011101100111101111";
        ram[12] = "0b00111010001011111111101101010100";
        ram[13] = "0b10111000100011111011011010010111";
        ram[14] = "0b10111010001011101100101110010010";
        ram[15] = "0b10111010001000111001011100101011";
        ram[16] = "0b00111000100100001001011100011100";
        ram[17] = "0b00111001001100101000100100100001";
        ram[18] = "0b10111010101010000001110010000110";
        ram[19] = "0b00111010010001111010110111001011";
        ram[20] = "0b00111010001101101111000110010110";
        ram[21] = "0b00111010111001111100111000110111";
        ram[22] = "0b00111001010110111100010001011010";
        ram[23] = "0b10111010000000111101010000000000";
        ram[24] = "0b10111010011110100111011100011100";
        ram[25] = "0b00111010000011110111011100010000";
        ram[26] = "0b00111001000010111011111001011011";
        ram[27] = "0b00111001101010010110101001010011";
        ram[28] = "0b00111010011001000011000110010011";
        ram[29] = "0b10111001101101011100110000110000";
        ram[30] = "0b10111010001001000011011111001101";
        ram[31] = "0b00111010100001010001111011110010";
        ram[32] = "0b00111001111100010000101001100101";
        ram[33] = "0b10111001000010000010101010011101";
        ram[34] = "0b00111000100111100101001110011100";
        ram[35] = "0b00111010001011000000100100010000";
        ram[36] = "0b00110110011000111111111010000010";
        ram[37] = "0b10111010000110001110110010110010";
        ram[38] = "0b10111001000011101011001011010010";
        ram[39] = "0b00111010001010111000101100110011";
        ram[40] = "0b10111010011001000000011010011100";
        ram[41] = "0b00111000000101010011011100100100";
        ram[42] = "0b00111001011001011100010010000010";
        ram[43] = "0b10111010000101101110111010100111";
        ram[44] = "0b00111010010001101011010100011010";
        ram[45] = "0b10111010101011110010110111101000";
        ram[46] = "0b10111010010011000100010100101000";
        ram[47] = "0b10111010011001101110111011111001";
        ram[48] = "0b10111010100000100111100101011011";
        ram[49] = "0b10111000100110001100110000001001";
        ram[50] = "0b00111001110110110001111111110000";
        ram[51] = "0b10111010110001011001001101110110";
        ram[52] = "0b00111010101110111010100110101011";
        ram[53] = "0b10111000100000100011101111000101";
        ram[54] = "0b10111001111111100000001110110011";
        ram[55] = "0b00111010011001001010011010111101";
        ram[56] = "0b00111001011000001101010100001101";
        ram[57] = "0b00111001000011101101000011100101";
        ram[58] = "0b10111010101110000011010101000101";
        ram[59] = "0b10111010100110001111010011001011";
        ram[60] = "0b00111000110100111010100011010001";
        ram[61] = "0b10111010011110111100100111001101";
        ram[62] = "0b00111000011111111101010100010110";
        ram[63] = "0b00111001101110101010100011111000";
        ram[64] = "0b00111001100000011010100000101010";
        ram[65] = "0b00111000001001111010001010001000";
        ram[66] = "0b10111000010101000001111100000101";
        ram[67] = "0b00111010011011010000110011101010";
        ram[68] = "0b00111001100100101110011111001001";
        ram[69] = "0b00111010110101100111011001001101";
        ram[70] = "0b10111001001100000000101111010001";
        ram[71] = "0b00111001111010100010000010001000";
        ram[72] = "0b10111010000000111101101010100100";
        ram[73] = "0b00111010010010111111111011111001";
        ram[74] = "0b00111010000111011101001010101111";
        ram[75] = "0b10111001010110000010110001110000";
        ram[76] = "0b10111010100001000111111001100100";
        ram[77] = "0b00111010000100110110010111111000";
        ram[78] = "0b00111001101011110101101000001001";
        ram[79] = "0b10111010011111001000101111101000";
        ram[80] = "0b00111010100000110100001001011011";
        ram[81] = "0b10111010011011011000011100110010";
        ram[82] = "0b00111010010111000001100100001010";
        ram[83] = "0b00111001111100001111000101100111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(lenetSynthMatlab_jbC) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 84;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


lenetSynthMatlab_jbC_ram* meminst;


SC_CTOR(lenetSynthMatlab_jbC) {
meminst = new lenetSynthMatlab_jbC_ram("lenetSynthMatlab_jbC_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~lenetSynthMatlab_jbC() {
    delete meminst;
}


};//endmodule
#endif
