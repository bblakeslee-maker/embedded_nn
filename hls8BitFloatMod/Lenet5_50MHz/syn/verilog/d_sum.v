// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module d_sum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        y_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [2:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] y_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] x_address0;
reg x_ce0;
reg[2:0] y_address0;
reg y_ce0;
reg y_we0;
reg[31:0] y_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] k_27_fu_113_p2;
reg   [2:0] k_27_reg_212;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_119_p1;
reg   [63:0] tmp_reg_217;
wire   [0:0] exitcond2_fu_107_p2;
wire   [2:0] k_28_fu_130_p2;
reg   [2:0] k_28_reg_230;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_s_fu_162_p2;
reg   [5:0] tmp_s_reg_235;
wire   [0:0] exitcond1_fu_124_p2;
wire   [2:0] b_k_12_fu_178_p2;
reg   [2:0] b_k_12_reg_243;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_172_p2;
reg   [2:0] y_addr_4_reg_253;
wire    ap_CS_fsm_state6;
reg   [2:0] k_reg_67;
wire    ap_CS_fsm_state3;
reg   [2:0] k_1_reg_78;
reg   [2:0] b_k_reg_89;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_166_fu_199_p1;
wire   [63:0] tmp_167_fu_204_p1;
wire   [31:0] grp_fu_100_p2;
wire   [1:0] tmp_171_fu_136_p1;
wire   [4:0] p_shl_fu_140_p3;
wire   [2:0] tmp_172_fu_152_p2;
wire   [5:0] p_shl_cast_fu_148_p1;
wire   [5:0] p_shl9_cast_fu_158_p1;
wire   [3:0] b_k_cast_fu_168_p1;
wire   [3:0] tmp1_fu_184_p2;
wire   [5:0] tmp1_cast_fu_190_p1;
wire   [5:0] tmp_165_fu_194_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

lenetSynthMatlab_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenetSynthMatlab_bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_q0),
    .din1(x_q0),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        b_k_reg_89 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        b_k_reg_89 <= b_k_12_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_1_reg_78 <= 3'd0;
    end else if (((exitcond_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_1_reg_78 <= k_28_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_67 <= k_27_reg_212;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_67 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_k_12_reg_243 <= b_k_12_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_27_reg_212 <= k_27_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_28_reg_230 <= k_28_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_217[2 : 0] <= tmp_fu_119_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_s_reg_235[5 : 1] <= tmp_s_fu_162_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_addr_4_reg_253 <= tmp_167_fu_204_p1;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_address0 = tmp_166_fu_199_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address0 = tmp_fu_119_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_address0 = y_addr_4_reg_253;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_address0 = tmp_167_fu_204_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_address0 = tmp_reg_217;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_d0 = grp_fu_100_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        y_d0 = x_q0;
    end else begin
        y_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_k_12_fu_178_p2 = (b_k_reg_89 + 3'd1);

assign b_k_cast_fu_168_p1 = b_k_reg_89;

assign exitcond1_fu_124_p2 = ((k_1_reg_78 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_107_p2 = ((k_reg_67 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_172_p2 = ((b_k_reg_89 == 3'd6) ? 1'b1 : 1'b0);

assign k_27_fu_113_p2 = (k_reg_67 + 3'd1);

assign k_28_fu_130_p2 = (k_1_reg_78 + 3'd1);

assign p_shl9_cast_fu_158_p1 = tmp_172_fu_152_p2;

assign p_shl_cast_fu_148_p1 = p_shl_fu_140_p3;

assign p_shl_fu_140_p3 = {{tmp_171_fu_136_p1}, {3'd0}};

assign tmp1_cast_fu_190_p1 = tmp1_fu_184_p2;

assign tmp1_fu_184_p2 = (b_k_cast_fu_168_p1 + 4'd6);

assign tmp_165_fu_194_p2 = (tmp1_cast_fu_190_p1 + tmp_s_reg_235);

assign tmp_166_fu_199_p1 = tmp_165_fu_194_p2;

assign tmp_167_fu_204_p1 = b_k_reg_89;

assign tmp_171_fu_136_p1 = k_1_reg_78[1:0];

assign tmp_172_fu_152_p2 = k_1_reg_78 << 3'd1;

assign tmp_fu_119_p1 = k_reg_67;

assign tmp_s_fu_162_p2 = (p_shl_cast_fu_148_p1 - p_shl9_cast_fu_158_p1);

always @ (posedge ap_clk) begin
    tmp_reg_217[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_235[0] <= 1'b0;
end

endmodule //d_sum
