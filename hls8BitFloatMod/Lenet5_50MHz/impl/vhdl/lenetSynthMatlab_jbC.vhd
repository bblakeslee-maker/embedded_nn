-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenetSynthMatlab_jbC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenetSynthMatlab_jbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010001001001100011111001111", 
    1 => "00111010001111100010001100110010", 
    2 => "00111010101010000100100000110110", 
    3 => "10110110101011111110000011110111", 
    4 => "10111001101001001010100010000000", 
    5 => "10111010000011101111101010001010", 
    6 => "10111000100100011010100110111101", 
    7 => "10111001110101011011111101010110", 
    8 => "00111010110010001101010110010010", 
    9 => "10111010100000011110111100101010", 
    10 => "10110111100111100000100010010111", 
    11 => "00111010011000011101100111101111", 
    12 => "00111010001011111111101101010100", 
    13 => "10111000100011111011011010010111", 
    14 => "10111010001011101100101110010010", 
    15 => "10111010001000111001011100101011", 
    16 => "00111000100100001001011100011100", 
    17 => "00111001001100101000100100100001", 
    18 => "10111010101010000001110010000110", 
    19 => "00111010010001111010110111001011", 
    20 => "00111010001101101111000110010110", 
    21 => "00111010111001111100111000110111", 
    22 => "00111001010110111100010001011010", 
    23 => "10111010000000111101010000000000", 
    24 => "10111010011110100111011100011100", 
    25 => "00111010000011110111011100010000", 
    26 => "00111001000010111011111001011011", 
    27 => "00111001101010010110101001010011", 
    28 => "00111010011001000011000110010011", 
    29 => "10111001101101011100110000110000", 
    30 => "10111010001001000011011111001101", 
    31 => "00111010100001010001111011110010", 
    32 => "00111001111100010000101001100101", 
    33 => "10111001000010000010101010011101", 
    34 => "00111000100111100101001110011100", 
    35 => "00111010001011000000100100010000", 
    36 => "00110110011000111111111010000010", 
    37 => "10111010000110001110110010110010", 
    38 => "10111001000011101011001011010010", 
    39 => "00111010001010111000101100110011", 
    40 => "10111010011001000000011010011100", 
    41 => "00111000000101010011011100100100", 
    42 => "00111001011001011100010010000010", 
    43 => "10111010000101101110111010100111", 
    44 => "00111010010001101011010100011010", 
    45 => "10111010101011110010110111101000", 
    46 => "10111010010011000100010100101000", 
    47 => "10111010011001101110111011111001", 
    48 => "10111010100000100111100101011011", 
    49 => "10111000100110001100110000001001", 
    50 => "00111001110110110001111111110000", 
    51 => "10111010110001011001001101110110", 
    52 => "00111010101110111010100110101011", 
    53 => "10111000100000100011101111000101", 
    54 => "10111001111111100000001110110011", 
    55 => "00111010011001001010011010111101", 
    56 => "00111001011000001101010100001101", 
    57 => "00111001000011101101000011100101", 
    58 => "10111010101110000011010101000101", 
    59 => "10111010100110001111010011001011", 
    60 => "00111000110100111010100011010001", 
    61 => "10111010011110111100100111001101", 
    62 => "00111000011111111101010100010110", 
    63 => "00111001101110101010100011111000", 
    64 => "00111001100000011010100000101010", 
    65 => "00111000001001111010001010001000", 
    66 => "10111000010101000001111100000101", 
    67 => "00111010011011010000110011101010", 
    68 => "00111001100100101110011111001001", 
    69 => "00111010110101100111011001001101", 
    70 => "10111001001100000000101111010001", 
    71 => "00111001111010100010000010001000", 
    72 => "10111010000000111101101010100100", 
    73 => "00111010010010111111111011111001", 
    74 => "00111010000111011101001010101111", 
    75 => "10111001010110000010110001110000", 
    76 => "10111010100001000111111001100100", 
    77 => "00111010000100110110010111111000", 
    78 => "00111001101011110101101000001001", 
    79 => "10111010011111001000101111101000", 
    80 => "00111010100000110100001001011011", 
    81 => "10111010011011011000011100110010", 
    82 => "00111010010111000001100100001010", 
    83 => "00111001111100001111000101100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity lenetSynthMatlab_jbC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenetSynthMatlab_jbC is
    component lenetSynthMatlab_jbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenetSynthMatlab_jbC_rom_U :  component lenetSynthMatlab_jbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


