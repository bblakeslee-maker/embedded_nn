-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenetSynthMatlab_dEe_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 150
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenetSynthMatlab_dEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001001011010001001010111", 
    1 => "00111011101111011101110001000010", 
    2 => "00111101100010000010011001000010", 
    3 => "10111100101001100011010000111111", 
    4 => "10111100010111010001111100010100", 
    5 => "00111101000111011011011001001111", 
    6 => "00111100001110000000101110110100", 
    7 => "00111011010111110000111100011101", 
    8 => "00111110000000101011100100000011", 
    9 => "00111001101000111011100001011001", 
    10 => "10111100100100011100100000100110", 
    11 => "00111101000100001001111110001001", 
    12 => "00111100100110010111101110000001", 
    13 => "10111100100001100111011001010000", 
    14 => "00111110000010100110110101001011", 
    15 => "10111011011111001010101111100011", 
    16 => "10111100011101000101110011101110", 
    17 => "00111101000000100000000101010000", 
    18 => "00111100100110010110010100111011", 
    19 => "10111011111001110110100000011000", 
    20 => "00111101110011100010101100010010", 
    21 => "10111011100111100001111100000111", 
    22 => "10111100110001010110100111111101", 
    23 => "00111010110000101000010000000101", 
    24 => "00111101011010111111110110000101", 
    25 => "10111100100100001101111101100001", 
    26 => "00111011101001010110100110010101", 
    27 => "00111100100111100011100110011000", 
    28 => "00111011000100110001111001100101", 
    29 => "00111100100000100000111110001010", 
    30 => "10111010110100100011100101111100", 
    31 => "10111011000101101010101100001101", 
    32 => "00111110010110010011111000001111", 
    33 => "10111100100000101011100001110001", 
    34 => "10111100100001010010000101011111", 
    35 => "00111101001000001111100111001001", 
    36 => "10111100100001010011010011011110", 
    37 => "10111100001110110001100110101100", 
    38 => "00111110101100101010010100100110", 
    39 => "00111100010100010010101101111110", 
    40 => "10111010100010110010001000101110", 
    41 => "00111100111010001001001000011101", 
    42 => "00111010111111111001101101001011", 
    43 => "10111010001010001000010101110000", 
    44 => "00111110101101110101110001011111", 
    45 => "00111100010110010101101100010000", 
    46 => "10111100110001100011010101100111", 
    47 => "10111011111001110101010000110001", 
    48 => "00111100111010101001001101010001", 
    49 => "10111100111100000101001000100001", 
    50 => "00111110011010000011000010100000", 
    51 => "10111011011111101101111000010001", 
    52 => "10111100010000010111100001101000", 
    53 => "00111011100111010111111111010101", 
    54 => "00111101100011010101100010010101", 
    55 => "10111100010110010101111101100101", 
    56 => "00111101101000000000001100111110", 
    57 => "10111100000100011100000010110001", 
    58 => "00111100001011111111110011100101", 
    59 => "00111100110011010110100000011110", 
    60 => "10111101000110100100100110101110", 
    61 => "00111011100001110100100111100010", 
    62 => "00111110011011011110011100100001", 
    63 => "00111100110000111010010110101110", 
    64 => "10111011100001011101011001011011", 
    65 => "00111100100110101001111010111010", 
    66 => "10111101000101100100110000110001", 
    67 => "10111011000011001010001100001100", 
    68 => "00111110110011001110000000010100", 
    69 => "10111010100010001011010101001000", 
    70 => "10111101001001100010011100110110", 
    71 => "00111010111110010111011101010000", 
    72 => "10111100101000000110011100010011", 
    73 => "10111011101001010000101010110010", 
    74 => "00111110101010001110110000110100", 
    75 => "10111100001110011000100010001111", 
    76 => "10111100101111100101111101010111", 
    77 => "10111100011101100010111000101110", 
    78 => "00111100101010011001110011010000", 
    79 => "10111011100001100011100111110001", 
    80 => "00111110001100111010010111110110", 
    81 => "10111100100111101011011100000011", 
    82 => "00111100011011011110011001111001", 
    83 => "10111100100000110001001011001101", 
    84 => "00111101100101001001011000111101", 
    85 => "00111100111100010100100110011100", 
    86 => "00111101110100111110101011001010", 
    87 => "10111100011000110110101111000111", 
    88 => "00111100100101011011000111110001", 
    89 => "10111100100101011100101010011100", 
    90 => "10111100110011010101100000000000", 
    91 => "00111100010101100000101111101111", 
    92 => "00111101100101101001101001110001", 
    93 => "00111011011101111100110000101001", 
    94 => "10111100010100100011001100101110", 
    95 => "00111100001010011001110110010001", 
    96 => "10111101001111011110000011000110", 
    97 => "00111011111011110110000100010000", 
    98 => "00111110010001010100101010110100", 
    99 => "00111011001010100110100110100110", 
    100 => "00111010100001101100000000101100", 
    101 => "10111100100111101001001110000011", 
    102 => "10111011010011101010101001110001", 
    103 => "10111011001110000011011000010001", 
    104 => "00111110000000100101101001101111", 
    105 => "00111011101101111101010010011011", 
    106 => "00111100100110101011101111011111", 
    107 => "10111100010011101010010110101100", 
    108 => "00111101001000011110110100010000", 
    109 => "00111100101111000000011100100001", 
    110 => "00111101100101001001010001101111", 
    111 => "10111100001111011101101001110011", 
    112 => "00111100101010100000110100000110", 
    113 => "10111100100010000101011101010001", 
    114 => "00111101100110011010010010001111", 
    115 => "00111101000101101110110011010011", 
    116 => "00111100111100101011000100111011", 
    117 => "10111011110101001100110110101111", 
    118 => "00111100111111001000010110101111", 
    119 => "10111011111010001111010010101001", 
    120 => "10111100111101011010011001010001", 
    121 => "00111011011111100111101000000011", 
    122 => "10111101000111101011101101100101", 
    123 => "10111011101010011001000011000000", 
    124 => "00111100110011101111101111101101", 
    125 => "10111011111101110000010010001110", 
    126 => "10111100010111111011011011101000", 
    127 => "10111100010110101111100000101100", 
    128 => "10111100000110010001000011010101", 
    129 => "00111100000101100000111001001111", 
    130 => "00111101001000000000101000101110", 
    131 => "10111100110110001101001010110001", 
    132 => "00111001110001100001111011111110", 
    133 => "00111100001001011001001111101101", 
    134 => "00111100100010010000011011111001", 
    135 => "00111100100101011110110100000101", 
    136 => "00111101000000110000010100000110", 
    137 => "10111100011100100110100111010111", 
    138 => "00111101010010001011010111101111", 
    139 => "00111101001000100100100001111110", 
    140 => "10111101001000010111011110011100", 
    141 => "00111100001110101011110110011010", 
    142 => "00111101000010100111001000100101", 
    143 => "10111011100000001000110000110010", 
    144 => "00111101010001110101100100111100", 
    145 => "00111010100001000101101101111001", 
    146 => "10111101001110011000110100000010", 
    147 => "00111100100100101110101111001010", 
    148 => "00111100010110011100100011111010", 
    149 => "10111100000100100001101010000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity lenetSynthMatlab_dEe is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenetSynthMatlab_dEe is
    component lenetSynthMatlab_dEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenetSynthMatlab_dEe_rom_U :  component lenetSynthMatlab_dEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


