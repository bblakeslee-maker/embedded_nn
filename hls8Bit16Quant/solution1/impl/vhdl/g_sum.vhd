-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity g_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    Y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_we0 : OUT STD_LOGIC;
    Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of g_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_FFFFFFE000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111110000000000000000000000000000000000000";
    constant ap_const_lv32_7FFFFFEF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_FFFFFFC1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000001";
    constant ap_const_lv16_CD : STD_LOGIC_VECTOR (15 downto 0) := "0000000011001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvars_iv_next2_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next2_reg_470 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_212_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_475 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ix_4_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ix_4_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal ixstart_cast_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal s_5_fu_254_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ix_5_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ix_5_reg_503 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_b6_phi_fu_174_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next_fu_318_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ixstart_10_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ixstart_9_cast_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal s_2_fu_459_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal indvars_iv1_reg_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_103 : STD_LOGIC_VECTOR (6 downto 0);
    signal iy_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_reg_127 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_1_reg_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal ixstart9_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixstart_4_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_1_reg_160 : STD_LOGIC_VECTOR (6 downto 0);
    signal b6_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_4_fu_232_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_52_fu_236_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_3_fu_244_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ixstart_7_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_8_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul4_fu_333_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul4_fu_333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_339_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_324_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_349_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ixstart_6_fu_353_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_378_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_363_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ixstart_fu_392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_419_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_59_fu_415_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_58_fu_411_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_57_fu_407_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal s_6_cast_fu_435_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal s_6_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_8_fu_429_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_61_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_7_fu_449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_8_cast_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_195_ap_start : STD_LOGIC;
    signal grp_fu_195_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal mul4_fu_333_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_fu_372_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component lenetSynthMatlab_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    lenetSynthMatlab_g8j_U38 : component lenetSynthMatlab_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_195_ap_start,
        done => grp_fu_195_ap_done,
        din0 => grp_fu_195_p0,
        din1 => grp_fu_195_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b6_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                b6_reg_169 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                b6_reg_169 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv1_reg_92 <= ap_const_lv5_0;
            elsif (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv1_reg_92 <= indvars_iv_next2_reg_470;
            end if; 
        end if;
    end process;

    indvars_iv_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_reg_103 <= ap_const_lv7_4;
            elsif (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv_reg_103 <= indvars_iv_next_fu_318_p2;
            end if; 
        end if;
    end process;

    ix_1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                ix_1_reg_160 <= ix_5_reg_503;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ix_1_reg_160 <= ixstart_cast_fu_227_p2;
            end if; 
        end if;
    end process;

    ix_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_reg_127 <= ap_const_lv8_FF;
            elsif (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ix_reg_127 <= ix_4_reg_485;
            end if; 
        end if;
    end process;

    ixstart9_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                ixstart9_reg_149 <= ixstart_4_reg_182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ixstart9_reg_149 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ixstart_4_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_b6_phi_fu_174_p4 = ap_const_lv1_0) and (exitcond_fu_262_p2 = ap_const_lv1_0) and (tmp_36_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ixstart_4_reg_182 <= p_s_fu_299_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                ixstart_4_reg_182 <= ixstart_10_cast_fu_359_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                ixstart_4_reg_182 <= ixstart_9_cast_fu_398_p1;
            end if; 
        end if;
    end process;

    iy_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iy_reg_115 <= ap_const_lv5_0;
            elsif (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                iy_reg_115 <= i_fu_312_p2;
            end if; 
        end if;
    end process;

    s_1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                s_1_reg_138 <= s_2_fu_459_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                s_1_reg_138 <= s_5_fu_254_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvars_iv_next2_reg_470 <= indvars_iv_next2_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ix_4_reg_485 <= ix_4_fu_221_p2;
                tmp_reg_475 <= tmp_fu_212_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ix_5_reg_503 <= ix_5_fu_268_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_200_p2, ap_CS_fsm_state4, exitcond_fu_262_p2, ap_phi_mux_b6_phi_fu_174_p4, tmp_36_fu_275_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_phi_mux_b6_phi_fu_174_p4 = ap_const_lv1_0) and (exitcond_fu_262_p2 = ap_const_lv1_0) and (tmp_36_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_phi_mux_b6_phi_fu_174_p4 = ap_const_lv1_0) and (exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_36_fu_275_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state25, tmp_s_fu_216_p1, tmp_39_fu_402_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            X_address0 <= tmp_39_fu_402_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_address0 <= tmp_s_fu_216_p1(7 - 1 downto 0);
        else 
            X_address0 <= "XXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_address0 <= tmp_34_fu_307_p1(4 - 1 downto 0);

    Y_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_d0 <= s_1_reg_138;

    Y_we0_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_262_p2)
    begin
        if (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Y_we0 <= ap_const_logic_1;
        else 
            Y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_200_p2)
    begin
        if ((((exitcond1_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_b6_phi_fu_174_p4 <= b6_reg_169;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_200_p2)
    begin
        if (((exitcond1_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_200_p2 <= "1" when (iy_reg_115 = ap_const_lv5_10) else "0";
    exitcond_fu_262_p2 <= "1" when (ix_1_reg_160 = indvars_iv_reg_103) else "0";

    grp_fu_195_ap_start_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_262_p2, ap_phi_mux_b6_phi_fu_174_p4, tmp_36_fu_275_p2)
    begin
        if ((((ap_phi_mux_b6_phi_fu_174_p4 = ap_const_lv1_0) and (exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_36_fu_275_p2 = ap_const_lv1_1)) or ((ap_phi_mux_b6_phi_fu_174_p4 = ap_const_lv1_1) and (exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_195_ap_start <= ap_const_logic_1;
        else 
            grp_fu_195_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_195_p0 <= std_logic_vector(unsigned(ix_1_reg_160) + unsigned(ap_const_lv7_1));
    grp_fu_195_p1 <= ap_const_lv7_5(4 - 1 downto 0);
    i_fu_312_p2 <= std_logic_vector(unsigned(iy_reg_115) + unsigned(ap_const_lv5_1));
    indvars_iv_next2_fu_206_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_92) + unsigned(ap_const_lv5_1));
    indvars_iv_next_fu_318_p2 <= std_logic_vector(unsigned(indvars_iv_reg_103) + unsigned(ap_const_lv7_5));
    ix_4_fu_221_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(ix_reg_127));
    ix_5_fu_268_p2 <= std_logic_vector(unsigned(ix_1_reg_160) + unsigned(ap_const_lv7_1));
    ixstart_10_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ixstart_6_fu_353_p2),32));
    ixstart_6_fu_353_p2 <= std_logic_vector(unsigned(tmp_55_fu_324_p2) + unsigned(tmp_29_fu_349_p1));
    ixstart_7_fu_281_p2 <= std_logic_vector(unsigned(ixstart9_reg_149) + unsigned(ap_const_lv32_10));
    ixstart_8_fu_293_p2 <= std_logic_vector(unsigned(ixstart9_reg_149) + unsigned(ap_const_lv32_FFFFFFC1));
    ixstart_9_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ixstart_fu_392_p2),32));
    ixstart_cast_fu_227_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp_reg_475));
    ixstart_fu_392_p2 <= std_logic_vector(unsigned(tmp_53_fu_363_p2) + unsigned(tmp_28_fu_388_p1));
    mul4_fu_333_p1 <= mul4_fu_333_p10(7 - 1 downto 0);
    mul4_fu_333_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_5_reg_503),16));
    mul4_fu_333_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_CD) * unsigned(mul4_fu_333_p1), 16));
    mul_fu_372_p1 <= mul_fu_372_p10(7 - 1 downto 0);
    mul_fu_372_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_5_reg_503),16));
    mul_fu_372_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_CD) * unsigned(mul_fu_372_p1), 16));
    p_s_fu_299_p3 <= 
        ixstart_8_fu_293_p2 when (tmp_38_fu_287_p2(0) = '1') else 
        ixstart_7_fu_281_p2;
    s_2_fu_459_p3 <= 
        s_7_fu_449_p2 when (tmp_61_fu_441_p3(0) = '1') else 
        s_8_cast_fu_455_p1;
    s_3_fu_244_p2 <= (ap_const_lv64_FFFFFFE000000000 or X_q0);
    s_4_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_4_fu_232_p1),64));
    s_4_fu_232_p1 <= X_q0(37 - 1 downto 0);
    s_5_fu_254_p3 <= 
        s_3_fu_244_p2 when (tmp_52_fu_236_p3(0) = '1') else 
        s_4_cast_fu_250_p1;
    s_6_cast_fu_435_p2 <= std_logic_vector(unsigned(tmp_58_fu_411_p1) + unsigned(tmp_57_fu_407_p1));
    s_6_fu_423_p2 <= std_logic_vector(unsigned(s_1_reg_138) + unsigned(X_q0));
    s_7_fu_449_p2 <= (s_6_fu_423_p2 or ap_const_lv64_FFFFFFE000000000);
    s_8_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_8_fu_429_p2),64));
    s_8_fu_429_p2 <= std_logic_vector(unsigned(tmp_60_fu_419_p1) + unsigned(tmp_59_fu_415_p1));
        tmp_28_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_fu_378_p4),7));

        tmp_29_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_339_p4),7));

    tmp_34_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iy_reg_115),64));
    tmp_36_fu_275_p2 <= "1" when (signed(ixstart9_reg_149) > signed(ap_const_lv32_7FFFFFEF)) else "0";
    tmp_38_fu_287_p2 <= "1" when (signed(ixstart_7_fu_281_p2) > signed(ap_const_lv32_4F)) else "0";
        tmp_39_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ixstart_4_reg_182),64));

    tmp_52_fu_236_p3 <= X_q0(37 downto 37);
    tmp_53_fu_363_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_195_p2),to_integer(unsigned('0' & ap_const_lv7_4(7-1 downto 0)))));
    tmp_54_fu_378_p4 <= mul_fu_372_p2(15 downto 10);
    tmp_55_fu_324_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_195_p2),to_integer(unsigned('0' & ap_const_lv7_4(7-1 downto 0)))));
    tmp_56_fu_339_p4 <= mul4_fu_333_p2(15 downto 10);
    tmp_57_fu_407_p1 <= s_1_reg_138(38 - 1 downto 0);
    tmp_58_fu_411_p1 <= X_q0(38 - 1 downto 0);
    tmp_59_fu_415_p1 <= s_1_reg_138(37 - 1 downto 0);
    tmp_60_fu_419_p1 <= X_q0(37 - 1 downto 0);
    tmp_61_fu_441_p3 <= s_6_cast_fu_435_p2(37 downto 37);
    tmp_fu_212_p1 <= ix_reg_127(7 - 1 downto 0);
    tmp_s_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv1_reg_92),64));
end behav;
