-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity f_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    Y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_we0 : OUT STD_LOGIC;
    Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of f_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (59 downto 0) := "000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (59 downto 0) := "000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (59 downto 0) := "000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (59 downto 0) := "000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (59 downto 0) := "000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (59 downto 0) := "000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (59 downto 0) := "000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (59 downto 0) := "000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (59 downto 0) := "000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (59 downto 0) := "001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (59 downto 0) := "010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (59 downto 0) := "100000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7FFFFFAF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111110101111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_FFFFFED0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111011010000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_FFFFFE81 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111010000001";
    constant ap_const_lv32_7FFFFFEF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFC1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_FFFFFFFC00000000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111110000000000000000000000000000000000";
    constant ap_const_lv16_CD : STD_LOGIC_VECTOR (15 downto 0) := "0000000011001101";
    constant ap_const_lv20_290 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001010010000";
    constant ap_const_lv20_334 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001100110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvars_iv_next2_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_next2_reg_826 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_831 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ix_6_fu_296_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_6_reg_836 : STD_LOGIC_VECTOR (9 downto 0);
    signal ixstart_cast_fu_302_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ixstart_cast_reg_841 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mul_fu_780_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_reg_847 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal s11_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ix_7_fu_350_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ix_7_reg_865 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_b5_phi_fu_231_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_11_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal b4_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_cast_reg_894 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_89_reg_899 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_494_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_reg_904 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_37_cast_reg_914 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_83_reg_919 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_603_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_reg_924 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal s_2_fu_665_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_fu_763_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_934 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal indvars_iv_next_fu_769_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next_reg_939 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv1_reg_134 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal indvars_iv_reg_146 : STD_LOGIC_VECTOR (8 downto 0);
    signal iy_reg_158 : STD_LOGIC_VECTOR (6 downto 0);
    signal ix_reg_184 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_1_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal ixstart_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixstart_5_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_1_reg_217 : STD_LOGIC_VECTOR (8 downto 0);
    signal b5_reg_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_14_cast_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ixstart_5_phi_fu_244_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixstart_15_cast_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i7_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_3_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i23_1_cast_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i23_cast_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_76_fu_316_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_310_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_99_cast_fu_325_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_329_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ixstart_12_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_13_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i23_2_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i23_3_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_fu_786_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul9_fu_793_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_459_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_87_fu_468_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_88_fu_480_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_86_fu_464_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_fu_484_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_44_fu_472_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_cast_fu_490_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_507_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_500_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ixstart_10_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_528_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_fu_521_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ixstart_9_fu_531_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul6_fu_800_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul4_fu_807_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_568_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_81_fu_577_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_568_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_82_fu_589_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_80_fu_573_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_593_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_36_fu_581_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_cast_fu_599_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_fu_625_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_63_fu_621_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_90_fu_617_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_62_fu_613_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal s_12_cast_fu_641_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal s_9_fu_629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_10_fu_635_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_92_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_3_fu_655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_14_cast_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul2_fu_683_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul2_fu_683_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_689_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_673_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_fu_699_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i23_1_fu_703_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul1_fu_728_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul1_fu_728_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_79_fu_734_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_78_fu_718_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_744_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i23_fu_748_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_780_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_780_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul3_fu_786_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul3_fu_786_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext4_cast_fu_438_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul9_fu_793_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul9_fu_793_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul6_fu_800_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul6_fu_800_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext5_cast_fu_547_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul4_fu_807_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul4_fu_807_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_255_ap_start : STD_LOGIC;
    signal grp_fu_255_ap_done : STD_LOGIC;
    signal grp_fu_263_ap_start : STD_LOGIC;
    signal grp_fu_263_ap_done : STD_LOGIC;
    signal grp_fu_290_ap_start : STD_LOGIC;
    signal grp_fu_290_ap_done : STD_LOGIC;
    signal grp_fu_459_ap_start : STD_LOGIC;
    signal grp_fu_459_ap_done : STD_LOGIC;
    signal grp_fu_568_ap_start : STD_LOGIC;
    signal grp_fu_568_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (59 downto 0);
    signal mul1_fu_728_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul2_fu_683_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_fu_780_p10 : STD_LOGIC_VECTOR (19 downto 0);

    component lenetSynthMatlab_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component lenetSynthMatlab_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component lenetSynthMatlab_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component lenetSynthMatlab_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    lenetSynthMatlab_fYi_U22 : component lenetSynthMatlab_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_255_ap_start,
        done => grp_fu_255_ap_done,
        din0 => grp_fu_255_p0,
        din1 => grp_fu_255_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    lenetSynthMatlab_g8j_U23 : component lenetSynthMatlab_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_263_ap_start,
        done => grp_fu_263_ap_done,
        din0 => iy_reg_158,
        din1 => grp_fu_263_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p2);

    lenetSynthMatlab_g8j_U24 : component lenetSynthMatlab_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_290_ap_start,
        done => grp_fu_290_ap_done,
        din0 => indvars_iv1_reg_134,
        din1 => grp_fu_290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    lenetSynthMatlab_hbi_U25 : component lenetSynthMatlab_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_459_ap_start,
        done => grp_fu_459_ap_done,
        din0 => tmp_45_cast_reg_894,
        din1 => grp_fu_459_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p2);

    lenetSynthMatlab_hbi_U26 : component lenetSynthMatlab_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_568_ap_start,
        done => grp_fu_568_ap_done,
        din0 => tmp_37_cast_reg_914,
        din1 => grp_fu_568_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_568_p2);

    lenetSynthMatlab_ibs_U27 : component lenetSynthMatlab_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul_fu_780_p0,
        din1 => mul_fu_780_p1,
        dout => mul_fu_780_p2);

    lenetSynthMatlab_ibs_U28 : component lenetSynthMatlab_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul3_fu_786_p0,
        din1 => mul3_fu_786_p1,
        dout => mul3_fu_786_p2);

    lenetSynthMatlab_ibs_U29 : component lenetSynthMatlab_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul9_fu_793_p0,
        din1 => mul9_fu_793_p1,
        dout => mul9_fu_793_p2);

    lenetSynthMatlab_ibs_U30 : component lenetSynthMatlab_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul6_fu_800_p0,
        din1 => mul6_fu_800_p1,
        dout => mul6_fu_800_p2);

    lenetSynthMatlab_ibs_U31 : component lenetSynthMatlab_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul4_fu_807_p0,
        din1 => mul4_fu_807_p1,
        dout => mul4_fu_807_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b4_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b4_reg_170 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                b4_reg_170 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    b5_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                b5_reg_226 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                b5_reg_226 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i7_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (b4_reg_170 = ap_const_lv1_1))) then 
                i7_fu_96 <= i23_cast_fu_754_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (tmp_45_reg_890 = ap_const_lv1_1) and (b4_reg_170 = ap_const_lv1_0))) then 
                i7_fu_96 <= i23_1_cast_fu_709_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_344_p2 = ap_const_lv1_1) and (b4_reg_170 = ap_const_lv1_0) and (tmp_45_fu_401_p2 = ap_const_lv1_0))) then 
                i7_fu_96 <= p_3_fu_425_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i7_fu_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv1_reg_134 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                indvars_iv1_reg_134 <= indvars_iv_next2_reg_826;
            end if; 
        end if;
    end process;

    indvars_iv_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_reg_146 <= ap_const_lv9_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                indvars_iv_reg_146 <= indvars_iv_next_reg_939;
            end if; 
        end if;
    end process;

    ix_1_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                ix_1_reg_217 <= ix_7_reg_865;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ix_1_reg_217 <= ixstart_cast_reg_841;
            end if; 
        end if;
    end process;

    ix_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_reg_184 <= ap_const_lv10_3FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                ix_reg_184 <= ix_6_reg_836;
            end if; 
        end if;
    end process;

    ixstart_5_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_57_fu_369_p2 = ap_const_lv1_0) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_0) and (tmp_51_fu_357_p2 = ap_const_lv1_0) and (exitcond_fu_344_p2 = ap_const_lv1_0))) then 
                ixstart_5_reg_240 <= ixstart_11_fu_363_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_57_fu_369_p2 = ap_const_lv1_1) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_0) and (tmp_51_fu_357_p2 = ap_const_lv1_0) and (exitcond_fu_344_p2 = ap_const_lv1_0))) then 
                ixstart_5_reg_240 <= p_s_fu_393_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_51_reg_873 = ap_const_lv1_1) and (b5_reg_226 = ap_const_lv1_0))) then 
                ixstart_5_reg_240 <= ixstart_15_cast_fu_516_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (b5_reg_226 = ap_const_lv1_1))) then 
                ixstart_5_reg_240 <= ixstart_14_cast_fu_537_p1;
            end if; 
        end if;
    end process;

    ixstart_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                ixstart_reg_206 <= ixstart_5_reg_240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ixstart_reg_206 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    iy_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iy_reg_158 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                iy_reg_158 <= i_reg_934;
            end if; 
        end if;
    end process;

    s_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                s_1_reg_195 <= s_2_fu_665_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                s_1_reg_195 <= s11_cast_fu_340_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_reg_934 <= i_fu_763_p2;
                indvars_iv_next_reg_939 <= indvars_iv_next_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvars_iv_next2_reg_826 <= indvars_iv_next2_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_274_p2 = ap_const_lv1_0))) then
                ix_6_reg_836 <= ix_6_fu_296_p2;
                tmp_reg_831 <= tmp_fu_286_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_344_p2 = ap_const_lv1_0))) then
                ix_7_reg_865 <= ix_7_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                ixstart_cast_reg_841 <= ixstart_cast_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_reg_847 <= mul_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_37_cast_reg_914 <= mul6_fu_800_p2(18 downto 12);
                tmp_83_reg_919 <= mul4_fu_807_p2(19 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_45_cast_reg_894 <= mul3_fu_786_p2(18 downto 12);
                tmp_89_reg_899 <= mul9_fu_793_p2(19 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_344_p2 = ap_const_lv1_1) and (b4_reg_170 = ap_const_lv1_0))) then
                tmp_45_reg_890 <= tmp_45_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_48_reg_924 <= tmp_48_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_0) and (exitcond_fu_344_p2 = ap_const_lv1_0))) then
                tmp_51_reg_873 <= tmp_51_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_55_reg_904 <= tmp_55_fu_494_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_274_p2, ap_CS_fsm_state14, exitcond_fu_344_p2, tmp_51_fu_357_p2, ap_phi_mux_b5_phi_fu_231_p4, tmp_45_fu_401_p2, b4_reg_170)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_344_p2 = ap_const_lv1_1) and (b4_reg_170 = ap_const_lv1_0) and (tmp_45_fu_401_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_45_fu_401_p2 = ap_const_lv1_1) and (exitcond_fu_344_p2 = ap_const_lv1_1) and (b4_reg_170 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (b4_reg_170 = ap_const_lv1_1) and (exitcond_fu_344_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_0) and (tmp_51_fu_357_p2 = ap_const_lv1_0) and (exitcond_fu_344_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_51_fu_357_p2 = ap_const_lv1_1) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_0) and (exitcond_fu_344_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state27, tmp_40_fu_335_p1, tmp_60_fu_542_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            X_address0 <= tmp_60_fu_542_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            X_address0 <= tmp_40_fu_335_p1(9 - 1 downto 0);
        else 
            X_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_address0 <= tmp_58_fu_775_p1(7 - 1 downto 0);

    Y_ce0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_d0 <= s_1_reg_195;

    Y_we0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            Y_we0 <= ap_const_logic_1;
        else 
            Y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_274_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_274_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_b5_phi_fu_231_p4 <= b5_reg_226;

    ap_phi_mux_ixstart_5_phi_fu_244_p8_assign_proc : process(tmp_51_reg_873, ap_CS_fsm_state27, ixstart_5_reg_240, b5_reg_226, ixstart_14_cast_fu_537_p1, ixstart_15_cast_fu_516_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
            if (((tmp_51_reg_873 = ap_const_lv1_1) and (b5_reg_226 = ap_const_lv1_0))) then 
                ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_15_cast_fu_516_p1;
            elsif ((b5_reg_226 = ap_const_lv1_1)) then 
                ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_14_cast_fu_537_p1;
            else 
                ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_5_reg_240;
            end if;
        else 
            ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_5_reg_240;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_274_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_274_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_274_p2 <= "1" when (iy_reg_158 = ap_const_lv7_50) else "0";
    exitcond_fu_344_p2 <= "1" when (ix_1_reg_217 = indvars_iv_reg_146) else "0";

    grp_fu_255_ap_start_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_344_p2, tmp_51_fu_357_p2, ap_phi_mux_b5_phi_fu_231_p4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_1) and (exitcond_fu_344_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_51_fu_357_p2 = ap_const_lv1_1) and (ap_phi_mux_b5_phi_fu_231_p4 = ap_const_lv1_0) and (exitcond_fu_344_p2 = ap_const_lv1_0)))) then 
            grp_fu_255_ap_start <= ap_const_logic_1;
        else 
            grp_fu_255_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_255_p0 <= std_logic_vector(unsigned(ix_1_reg_217) + unsigned(ap_const_lv9_1));
    grp_fu_255_p1 <= ap_const_lv9_5(4 - 1 downto 0);

    grp_fu_263_ap_start_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_344_p2, tmp_45_fu_401_p2, b4_reg_170)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (b4_reg_170 = ap_const_lv1_1) and (exitcond_fu_344_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_45_fu_401_p2 = ap_const_lv1_1) and (exitcond_fu_344_p2 = ap_const_lv1_1) and (b4_reg_170 = ap_const_lv1_0)))) then 
            grp_fu_263_ap_start <= ap_const_logic_1;
        else 
            grp_fu_263_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p1 <= ap_const_lv7_5(4 - 1 downto 0);

    grp_fu_290_ap_start_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_274_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_274_p2 = ap_const_lv1_0))) then 
            grp_fu_290_ap_start <= ap_const_logic_1;
        else 
            grp_fu_290_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_290_p1 <= ap_const_lv7_5(4 - 1 downto 0);

    grp_fu_459_ap_start_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_459_ap_start <= ap_const_logic_1;
        else 
            grp_fu_459_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_459_p1 <= ap_const_lv7_5(4 - 1 downto 0);

    grp_fu_568_ap_start_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_568_ap_start <= ap_const_logic_1;
        else 
            grp_fu_568_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_568_p1 <= ap_const_lv7_5(4 - 1 downto 0);
    i23_1_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i23_1_fu_703_p2),32));
    i23_1_fu_703_p2 <= std_logic_vector(unsigned(tmp_84_fu_673_p2) + unsigned(tmp_42_fu_699_p1));
    i23_2_fu_407_p2 <= std_logic_vector(unsigned(i7_fu_96) + unsigned(ap_const_lv32_10));
    i23_3_fu_419_p2 <= std_logic_vector(unsigned(i7_fu_96) + unsigned(ap_const_lv32_FFFFFFC1));
    i23_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i23_fu_748_p2),32));
    i23_fu_748_p2 <= std_logic_vector(unsigned(tmp_78_fu_718_p2) + unsigned(tmp_34_fu_744_p1));
    i_fu_763_p2 <= std_logic_vector(unsigned(iy_reg_158) + unsigned(ap_const_lv7_1));
    indvars_iv_next2_fu_280_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_134) + unsigned(ap_const_lv7_1));
    indvars_iv_next_fu_769_p2 <= std_logic_vector(unsigned(indvars_iv_reg_146) + unsigned(ap_const_lv9_5));
    ix_6_fu_296_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(ix_reg_184));
    ix_7_fu_350_p2 <= std_logic_vector(unsigned(ix_1_reg_217) + unsigned(ap_const_lv9_1));
    ixstart_10_fu_510_p2 <= std_logic_vector(signed(tmp_49_fu_507_p1) + signed(tmp_56_fu_500_p3));
    ixstart_11_fu_363_p2 <= std_logic_vector(unsigned(ixstart_reg_206) + unsigned(ap_const_lv32_50));
    ixstart_12_fu_375_p2 <= std_logic_vector(unsigned(ixstart_reg_206) + unsigned(ap_const_lv32_FFFFFED0));
    ixstart_13_fu_387_p2 <= std_logic_vector(unsigned(ixstart_reg_206) + unsigned(ap_const_lv32_FFFFFE81));
    ixstart_14_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ixstart_9_fu_531_p2),32));
    ixstart_15_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ixstart_10_fu_510_p2),32));
    ixstart_9_fu_531_p2 <= std_logic_vector(signed(tmp_41_fu_528_p1) + signed(tmp_50_fu_521_p3));
    ixstart_cast_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp_reg_831));
    mul1_fu_728_p1 <= mul1_fu_728_p10(7 - 1 downto 0);
    mul1_fu_728_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iy_reg_158),16));
    mul1_fu_728_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_CD) * unsigned(mul1_fu_728_p1), 16));
    mul2_fu_683_p1 <= mul2_fu_683_p10(7 - 1 downto 0);
    mul2_fu_683_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iy_reg_158),16));
    mul2_fu_683_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv16_CD) * unsigned(mul2_fu_683_p1), 16));
    mul3_fu_786_p0 <= ap_const_lv20_334(11 - 1 downto 0);
    mul3_fu_786_p1 <= zext4_cast_fu_438_p1(9 - 1 downto 0);
    mul4_fu_807_p0 <= ap_const_lv20_290(11 - 1 downto 0);
    mul4_fu_807_p1 <= zext5_cast_fu_547_p1(9 - 1 downto 0);
    mul6_fu_800_p0 <= ap_const_lv20_334(11 - 1 downto 0);
    mul6_fu_800_p1 <= zext5_cast_fu_547_p1(9 - 1 downto 0);
    mul9_fu_793_p0 <= ap_const_lv20_290(11 - 1 downto 0);
    mul9_fu_793_p1 <= zext4_cast_fu_438_p1(9 - 1 downto 0);
    mul_fu_780_p0 <= ap_const_lv20_290(11 - 1 downto 0);
    mul_fu_780_p1 <= mul_fu_780_p10(9 - 1 downto 0);
    mul_fu_780_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ixstart_cast_reg_841),20));
    p_3_fu_425_p3 <= 
        i23_3_fu_419_p2 when (tmp_53_fu_413_p2(0) = '1') else 
        i23_2_fu_407_p2;
    p_s_fu_393_p3 <= 
        ixstart_13_fu_387_p2 when (tmp_59_fu_381_p2(0) = '1') else 
        ixstart_12_fu_375_p2;
    s11_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),64));
    s_10_fu_635_p2 <= std_logic_vector(unsigned(tmp_91_fu_625_p1) + unsigned(tmp_63_fu_621_p1));
    s_12_cast_fu_641_p2 <= std_logic_vector(unsigned(tmp_90_fu_617_p1) + unsigned(tmp_62_fu_613_p1));
    s_14_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_10_fu_635_p2),64));
    s_2_fu_665_p3 <= 
        s_3_fu_655_p2 when (tmp_92_fu_647_p3(0) = '1') else 
        s_14_cast_fu_661_p1;
    s_3_fu_655_p2 <= (s_9_fu_629_p2 or ap_const_lv64_FFFFFFFC00000000);
    s_9_fu_629_p2 <= std_logic_vector(unsigned(tmp_61_fu_609_p1) + unsigned(s_1_reg_195));
    tmp1_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_593_p2),5));
    tmp1_fu_593_p2 <= std_logic_vector(unsigned(tmp_82_fu_589_p1) + unsigned(tmp_80_fu_573_p1));
    tmp2_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_484_p2),5));
    tmp2_fu_484_p2 <= std_logic_vector(unsigned(tmp_88_fu_480_p1) + unsigned(tmp_86_fu_464_p1));
        tmp_34_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_79_fu_734_p4),7));

    tmp_36_fu_581_p3 <= (tmp_81_fu_577_p1 & ap_const_lv2_0);
    tmp_40_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_329_p2),64));
        tmp_41_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_83_reg_919),9));

        tmp_42_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_85_fu_689_p4),7));

    tmp_44_fu_472_p3 <= (tmp_87_fu_468_p1 & ap_const_lv2_0);
    tmp_45_fu_401_p2 <= "1" when (signed(i7_fu_96) > signed(ap_const_lv32_7FFFFFEF)) else "0";
    tmp_48_fu_603_p2 <= std_logic_vector(unsigned(tmp_36_fu_581_p3) + unsigned(tmp1_cast_fu_599_p1));
        tmp_49_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_89_reg_899),9));

    tmp_50_fu_521_p3 <= (tmp_48_reg_924 & ap_const_lv4_0);
    tmp_51_fu_357_p2 <= "1" when (signed(ixstart_reg_206) > signed(ap_const_lv32_7FFFFFAF)) else "0";
    tmp_53_fu_413_p2 <= "1" when (signed(i23_2_fu_407_p2) > signed(ap_const_lv32_4F)) else "0";
    tmp_55_fu_494_p2 <= std_logic_vector(unsigned(tmp_44_fu_472_p3) + unsigned(tmp2_cast_fu_490_p1));
    tmp_56_fu_500_p3 <= (tmp_55_reg_904 & ap_const_lv4_0);
    tmp_57_fu_369_p2 <= "1" when (signed(ixstart_11_fu_363_p2) > signed(ap_const_lv32_18F)) else "0";
        tmp_58_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i7_fu_96),64));

    tmp_59_fu_381_p2 <= "1" when (signed(ixstart_12_fu_375_p2) > signed(ap_const_lv32_4F)) else "0";
        tmp_60_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_ixstart_5_phi_fu_244_p8),64));

    tmp_61_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),64));
    tmp_62_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),35));
    tmp_63_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),34));
    tmp_65_fu_310_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_290_p2),to_integer(unsigned('0' & ap_const_lv7_4(7-1 downto 0)))));
    tmp_76_fu_316_p4 <= mul_reg_847(19 downto 14);
    tmp_78_fu_718_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_263_p2),to_integer(unsigned('0' & ap_const_lv7_4(7-1 downto 0)))));
    tmp_79_fu_734_p4 <= mul1_fu_728_p2(15 downto 10);
    tmp_80_fu_573_p1 <= grp_fu_255_p2(4 - 1 downto 0);
    tmp_81_fu_577_p1 <= grp_fu_255_p2(3 - 1 downto 0);
    tmp_82_fu_589_p1 <= grp_fu_568_p2(4 - 1 downto 0);
    tmp_84_fu_673_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_263_p2),to_integer(unsigned('0' & ap_const_lv7_4(7-1 downto 0)))));
    tmp_85_fu_689_p4 <= mul2_fu_683_p2(15 downto 10);
    tmp_86_fu_464_p1 <= grp_fu_255_p2(4 - 1 downto 0);
    tmp_87_fu_468_p1 <= grp_fu_255_p2(3 - 1 downto 0);
    tmp_88_fu_480_p1 <= grp_fu_459_p2(4 - 1 downto 0);
    tmp_90_fu_617_p1 <= s_1_reg_195(35 - 1 downto 0);
    tmp_91_fu_625_p1 <= s_1_reg_195(34 - 1 downto 0);
    tmp_92_fu_647_p3 <= s_12_cast_fu_641_p2(34 downto 34);
        tmp_99_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_76_fu_316_p4),7));

    tmp_fu_286_p1 <= ix_reg_184(9 - 1 downto 0);
    tmp_s_fu_329_p2 <= std_logic_vector(unsigned(tmp_65_fu_310_p2) + unsigned(tmp_99_cast_fu_325_p1));
    zext4_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_7_reg_865),20));
    zext5_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_7_reg_865),20));
end behav;
