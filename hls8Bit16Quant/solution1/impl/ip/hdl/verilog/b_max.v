// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module b_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_y0_address0,
        b_y0_ce0,
        b_y0_q0,
        maxval_address0,
        maxval_ce0,
        maxval_we0,
        maxval_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] b_y0_address0;
output   b_y0_ce0;
input  [15:0] b_y0_q0;
output  [12:0] maxval_address0;
output   maxval_ce0;
output   maxval_we0;
output  [15:0] maxval_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_y0_ce0;
reg maxval_ce0;
reg maxval_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] phi_mul_cast_fu_106_p1;
reg   [13:0] phi_mul_cast_reg_222;
wire    ap_CS_fsm_state2;
wire   [12:0] next_mul_fu_110_p2;
reg   [12:0] next_mul_reg_227;
wire   [4:0] k_4_fu_122_p2;
reg   [4:0] k_4_reg_235;
wire   [4:0] b_k_2_fu_134_p2;
reg   [4:0] b_k_2_reg_243;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_s_fu_164_p2;
reg   [8:0] tmp_s_reg_248;
wire   [0:0] exitcond1_fu_128_p2;
wire   [2:0] c_k_2_fu_180_p2;
reg   [2:0] c_k_2_reg_256;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_98_fu_204_p1;
reg   [63:0] tmp_98_reg_261;
wire   [0:0] exitcond_fu_174_p2;
reg   [15:0] b_y0_load_reg_271;
wire    ap_CS_fsm_state5;
reg   [4:0] k_reg_62;
reg   [12:0] phi_mul_reg_73;
reg   [4:0] b_k_reg_84;
wire   [0:0] exitcond2_fu_116_p2;
reg   [2:0] c_k_reg_95;
wire    ap_CS_fsm_state6;
wire   [7:0] p_shl_fu_140_p3;
wire   [5:0] p_shl7_fu_152_p3;
wire   [8:0] p_shl_cast_fu_148_p1;
wire   [8:0] p_shl7_cast_fu_160_p1;
wire   [8:0] c_k_cast2_fu_170_p1;
wire   [8:0] tmp1_fu_186_p2;
wire  signed [13:0] tmp1_cast_fu_191_p1;
wire   [13:0] tmp_97_fu_195_p2;
wire  signed [31:0] tmp_192_cast_fu_200_p1;
wire   [0:0] tmp_99_fu_209_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_k_reg_84 <= 5'd0;
    end else if (((exitcond_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        b_k_reg_84 <= b_k_2_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_k_reg_95 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_k_reg_95 <= c_k_2_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_62 <= k_4_reg_235;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_62 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_73 <= next_mul_reg_227;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_73 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_k_2_reg_243 <= b_k_2_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_y0_load_reg_271 <= b_y0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_k_2_reg_256 <= c_k_2_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_4_reg_235 <= k_4_fu_122_p2;
        next_mul_reg_227 <= next_mul_fu_110_p2;
        phi_mul_cast_reg_222[12 : 0] <= phi_mul_cast_fu_106_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_98_reg_261[31 : 0] <= tmp_98_fu_204_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_s_reg_248[8 : 1] <= tmp_s_fu_164_p2[8 : 1];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_y0_ce0 = 1'b1;
    end else begin
        b_y0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        maxval_ce0 = 1'b1;
    end else begin
        maxval_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        maxval_we0 = 1'b1;
    end else begin
        maxval_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_k_2_fu_134_p2 = (b_k_reg_84 + 5'd1);

assign b_y0_address0 = tmp_98_fu_204_p1;

assign c_k_2_fu_180_p2 = (c_k_reg_95 + 3'd1);

assign c_k_cast2_fu_170_p1 = c_k_reg_95;

assign exitcond1_fu_128_p2 = ((b_k_reg_84 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond2_fu_116_p2 = ((k_reg_62 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_fu_174_p2 = ((c_k_reg_95 == 3'd6) ? 1'b1 : 1'b0);

assign k_4_fu_122_p2 = (k_reg_62 + 5'd1);

assign maxval_address0 = tmp_98_reg_261;

assign maxval_d0 = ((tmp_99_fu_209_p2[0:0] === 1'b1) ? b_y0_load_reg_271 : 16'd0);

assign next_mul_fu_110_p2 = (phi_mul_reg_73 + 13'd168);

assign p_shl7_cast_fu_160_p1 = p_shl7_fu_152_p3;

assign p_shl7_fu_152_p3 = {{b_k_reg_84}, {1'd0}};

assign p_shl_cast_fu_148_p1 = p_shl_fu_140_p3;

assign p_shl_fu_140_p3 = {{b_k_reg_84}, {3'd0}};

assign phi_mul_cast_fu_106_p1 = phi_mul_reg_73;

assign tmp1_cast_fu_191_p1 = $signed(tmp1_fu_186_p2);

assign tmp1_fu_186_p2 = (tmp_s_reg_248 + c_k_cast2_fu_170_p1);

assign tmp_192_cast_fu_200_p1 = $signed(tmp_97_fu_195_p2);

assign tmp_97_fu_195_p2 = ($signed(tmp1_cast_fu_191_p1) + $signed(phi_mul_cast_reg_222));

assign tmp_98_fu_204_p1 = $unsigned(tmp_192_cast_fu_200_p1);

assign tmp_99_fu_209_p2 = (($signed(b_y0_load_reg_271) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_164_p2 = (p_shl_cast_fu_148_p1 - p_shl7_cast_fu_160_p1);

always @ (posedge ap_clk) begin
    phi_mul_cast_reg_222[13] <= 1'b0;
    tmp_s_reg_248[0] <= 1'b0;
    tmp_98_reg_261[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //b_max
