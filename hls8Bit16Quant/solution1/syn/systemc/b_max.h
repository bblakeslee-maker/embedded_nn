// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _b_max_HH_
#define _b_max_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct b_max : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > b_y0_address0;
    sc_out< sc_logic > b_y0_ce0;
    sc_in< sc_lv<16> > b_y0_q0;
    sc_out< sc_lv<13> > maxval_address0;
    sc_out< sc_logic > maxval_ce0;
    sc_out< sc_logic > maxval_we0;
    sc_out< sc_lv<16> > maxval_d0;


    // Module declarations
    b_max(sc_module_name name);
    SC_HAS_PROCESS(b_max);

    ~b_max();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > phi_mul_cast_fu_106_p1;
    sc_signal< sc_lv<14> > phi_mul_cast_reg_222;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<13> > next_mul_fu_110_p2;
    sc_signal< sc_lv<13> > next_mul_reg_227;
    sc_signal< sc_lv<5> > k_4_fu_122_p2;
    sc_signal< sc_lv<5> > k_4_reg_235;
    sc_signal< sc_lv<5> > b_k_2_fu_134_p2;
    sc_signal< sc_lv<5> > b_k_2_reg_243;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > tmp_s_fu_164_p2;
    sc_signal< sc_lv<9> > tmp_s_reg_248;
    sc_signal< sc_lv<1> > exitcond1_fu_128_p2;
    sc_signal< sc_lv<3> > c_k_2_fu_180_p2;
    sc_signal< sc_lv<3> > c_k_2_reg_256;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_98_fu_204_p1;
    sc_signal< sc_lv<64> > tmp_98_reg_261;
    sc_signal< sc_lv<1> > exitcond_fu_174_p2;
    sc_signal< sc_lv<16> > b_y0_load_reg_271;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<5> > k_reg_62;
    sc_signal< sc_lv<13> > phi_mul_reg_73;
    sc_signal< sc_lv<5> > b_k_reg_84;
    sc_signal< sc_lv<1> > exitcond2_fu_116_p2;
    sc_signal< sc_lv<3> > c_k_reg_95;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > p_shl_fu_140_p3;
    sc_signal< sc_lv<6> > p_shl7_fu_152_p3;
    sc_signal< sc_lv<9> > p_shl_cast_fu_148_p1;
    sc_signal< sc_lv<9> > p_shl7_cast_fu_160_p1;
    sc_signal< sc_lv<9> > c_k_cast2_fu_170_p1;
    sc_signal< sc_lv<9> > tmp1_fu_186_p2;
    sc_signal< sc_lv<14> > tmp1_cast_fu_191_p1;
    sc_signal< sc_lv<14> > tmp_97_fu_195_p2;
    sc_signal< sc_lv<32> > tmp_192_cast_fu_200_p1;
    sc_signal< sc_lv<1> > tmp_99_fu_209_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<13> ap_const_lv13_A8;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_k_2_fu_134_p2();
    void thread_b_y0_address0();
    void thread_b_y0_ce0();
    void thread_c_k_2_fu_180_p2();
    void thread_c_k_cast2_fu_170_p1();
    void thread_exitcond1_fu_128_p2();
    void thread_exitcond2_fu_116_p2();
    void thread_exitcond_fu_174_p2();
    void thread_k_4_fu_122_p2();
    void thread_maxval_address0();
    void thread_maxval_ce0();
    void thread_maxval_d0();
    void thread_maxval_we0();
    void thread_next_mul_fu_110_p2();
    void thread_p_shl7_cast_fu_160_p1();
    void thread_p_shl7_fu_152_p3();
    void thread_p_shl_cast_fu_148_p1();
    void thread_p_shl_fu_140_p3();
    void thread_phi_mul_cast_fu_106_p1();
    void thread_tmp1_cast_fu_191_p1();
    void thread_tmp1_fu_186_p2();
    void thread_tmp_192_cast_fu_200_p1();
    void thread_tmp_97_fu_195_p2();
    void thread_tmp_98_fu_204_p1();
    void thread_tmp_99_fu_209_p2();
    void thread_tmp_s_fu_164_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
