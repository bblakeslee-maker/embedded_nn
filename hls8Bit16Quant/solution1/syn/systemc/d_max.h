// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _d_max_HH_
#define _d_max_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct d_max : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > b_y0_address0;
    sc_out< sc_logic > b_y0_ce0;
    sc_in< sc_lv<16> > b_y0_q0;
    sc_out< sc_lv<11> > maxval_address0;
    sc_out< sc_logic > maxval_ce0;
    sc_out< sc_logic > maxval_we0;
    sc_out< sc_lv<16> > maxval_d0;


    // Module declarations
    d_max(sc_module_name name);
    SC_HAS_PROCESS(d_max);

    ~d_max();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > k_3_fu_99_p2;
    sc_signal< sc_lv<4> > k_3_reg_202;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > tmp1_fu_125_p2;
    sc_signal< sc_lv<11> > tmp1_reg_207;
    sc_signal< sc_lv<1> > exitcond2_fu_93_p2;
    sc_signal< sc_lv<4> > b_k_1_fu_137_p2;
    sc_signal< sc_lv<4> > b_k_1_reg_215;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > tmp_s_fu_143_p3;
    sc_signal< sc_lv<8> > tmp_s_reg_220;
    sc_signal< sc_lv<1> > exitcond1_fu_131_p2;
    sc_signal< sc_lv<5> > c_k_1_fu_161_p2;
    sc_signal< sc_lv<5> > c_k_1_reg_228;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_73_fu_181_p1;
    sc_signal< sc_lv<64> > tmp_73_reg_233;
    sc_signal< sc_lv<1> > exitcond_fu_155_p2;
    sc_signal< sc_lv<16> > b_y0_load_reg_243;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > k_reg_60;
    sc_signal< sc_lv<4> > b_k_reg_71;
    sc_signal< sc_lv<5> > c_k_reg_82;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<9> > p_shl7_fu_113_p3;
    sc_signal< sc_lv<11> > p_shl7_cast_fu_121_p1;
    sc_signal< sc_lv<11> > p_shl_fu_105_p3;
    sc_signal< sc_lv<8> > c_k_cast3_fu_151_p1;
    sc_signal< sc_lv<8> > tmp2_fu_167_p2;
    sc_signal< sc_lv<11> > tmp2_cast_fu_172_p1;
    sc_signal< sc_lv<11> > tmp_72_fu_176_p2;
    sc_signal< sc_lv<1> > tmp_74_fu_186_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_k_1_fu_137_p2();
    void thread_b_y0_address0();
    void thread_b_y0_ce0();
    void thread_c_k_1_fu_161_p2();
    void thread_c_k_cast3_fu_151_p1();
    void thread_exitcond1_fu_131_p2();
    void thread_exitcond2_fu_93_p2();
    void thread_exitcond_fu_155_p2();
    void thread_k_3_fu_99_p2();
    void thread_maxval_address0();
    void thread_maxval_ce0();
    void thread_maxval_d0();
    void thread_maxval_we0();
    void thread_p_shl7_cast_fu_121_p1();
    void thread_p_shl7_fu_113_p3();
    void thread_p_shl_fu_105_p3();
    void thread_tmp1_fu_125_p2();
    void thread_tmp2_cast_fu_172_p1();
    void thread_tmp2_fu_167_p2();
    void thread_tmp_72_fu_176_p2();
    void thread_tmp_73_fu_181_p1();
    void thread_tmp_74_fu_186_p2();
    void thread_tmp_s_fu_143_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
