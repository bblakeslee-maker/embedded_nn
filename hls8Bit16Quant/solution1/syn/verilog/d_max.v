// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module d_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_y0_address0,
        b_y0_ce0,
        b_y0_q0,
        maxval_address0,
        maxval_ce0,
        maxval_we0,
        maxval_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] b_y0_address0;
output   b_y0_ce0;
input  [15:0] b_y0_q0;
output  [10:0] maxval_address0;
output   maxval_ce0;
output   maxval_we0;
output  [15:0] maxval_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_y0_ce0;
reg maxval_ce0;
reg maxval_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] k_3_fu_99_p2;
reg   [3:0] k_3_reg_202;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp1_fu_125_p2;
reg   [10:0] tmp1_reg_207;
wire   [0:0] exitcond2_fu_93_p2;
wire   [3:0] b_k_1_fu_137_p2;
reg   [3:0] b_k_1_reg_215;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_s_fu_143_p3;
reg   [7:0] tmp_s_reg_220;
wire   [0:0] exitcond1_fu_131_p2;
wire   [4:0] c_k_1_fu_161_p2;
reg   [4:0] c_k_1_reg_228;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_73_fu_181_p1;
reg   [63:0] tmp_73_reg_233;
wire   [0:0] exitcond_fu_155_p2;
reg   [15:0] b_y0_load_reg_243;
wire    ap_CS_fsm_state5;
reg   [3:0] k_reg_60;
reg   [3:0] b_k_reg_71;
reg   [4:0] c_k_reg_82;
wire    ap_CS_fsm_state6;
wire   [8:0] p_shl7_fu_113_p3;
wire   [10:0] p_shl7_cast_fu_121_p1;
wire   [10:0] p_shl_fu_105_p3;
wire   [7:0] c_k_cast3_fu_151_p1;
wire   [7:0] tmp2_fu_167_p2;
wire   [10:0] tmp2_cast_fu_172_p1;
wire   [10:0] tmp_72_fu_176_p2;
wire   [0:0] tmp_74_fu_186_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        b_k_reg_71 <= b_k_1_reg_215;
    end else if (((exitcond2_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_k_reg_71 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_k_reg_82 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c_k_reg_82 <= c_k_1_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_60 <= k_3_reg_202;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_60 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_k_1_reg_215 <= b_k_1_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_y0_load_reg_243 <= b_y0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_k_1_reg_228 <= c_k_1_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_3_reg_202 <= k_3_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp1_reg_207[10 : 5] <= tmp1_fu_125_p2[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_73_reg_233[10 : 0] <= tmp_73_fu_181_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_s_reg_220[7 : 4] <= tmp_s_fu_143_p3[7 : 4];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_y0_ce0 = 1'b1;
    end else begin
        b_y0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        maxval_ce0 = 1'b1;
    end else begin
        maxval_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        maxval_we0 = 1'b1;
    end else begin
        maxval_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_k_1_fu_137_p2 = (b_k_reg_71 + 4'd1);

assign b_y0_address0 = tmp_73_fu_181_p1;

assign c_k_1_fu_161_p2 = (c_k_reg_82 + 5'd1);

assign c_k_cast3_fu_151_p1 = c_k_reg_82;

assign exitcond1_fu_131_p2 = ((b_k_reg_71 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_93_p2 = ((k_reg_60 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_155_p2 = ((c_k_reg_82 == 5'd16) ? 1'b1 : 1'b0);

assign k_3_fu_99_p2 = (k_reg_60 + 4'd1);

assign maxval_address0 = tmp_73_reg_233;

assign maxval_d0 = ((tmp_74_fu_186_p2[0:0] === 1'b1) ? b_y0_load_reg_243 : 16'd0);

assign p_shl7_cast_fu_121_p1 = p_shl7_fu_113_p3;

assign p_shl7_fu_113_p3 = {{k_reg_60}, {5'd0}};

assign p_shl_fu_105_p3 = {{k_reg_60}, {7'd0}};

assign tmp1_fu_125_p2 = (p_shl7_cast_fu_121_p1 + p_shl_fu_105_p3);

assign tmp2_cast_fu_172_p1 = tmp2_fu_167_p2;

assign tmp2_fu_167_p2 = (tmp_s_reg_220 + c_k_cast3_fu_151_p1);

assign tmp_72_fu_176_p2 = (tmp2_cast_fu_172_p1 + tmp1_reg_207);

assign tmp_73_fu_181_p1 = tmp_72_fu_176_p2;

assign tmp_74_fu_186_p2 = (($signed(b_y0_load_reg_243) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_143_p3 = {{b_k_reg_71}, {4'd0}};

always @ (posedge ap_clk) begin
    tmp1_reg_207[4:0] <= 5'b00000;
    tmp_s_reg_220[3:0] <= 4'b0000;
    tmp_73_reg_233[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //d_max
