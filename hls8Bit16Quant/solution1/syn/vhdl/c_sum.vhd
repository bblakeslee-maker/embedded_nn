-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity c_sum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    Y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Y_ce0 : OUT STD_LOGIC;
    Y_we0 : OUT STD_LOGIC;
    Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of c_sum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv18_148 : STD_LOGIC_VECTOR (17 downto 0) := "000000000101001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7FFFFFE1 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_FFFFFF8E : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_FFFFFF71 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111101110001";
    constant ap_const_lv32_7FFFFFF9 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_FFFFFFE9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101001";
    constant ap_const_lv18_19A : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_FFFFFFFC00000000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111110000000000000000000000000000000000";
    constant ap_const_lv12_34 : STD_LOGIC_VECTOR (11 downto 0) := "000000110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvars_iv_next2_fu_280_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next2_reg_972 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_286_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ix_10_fu_296_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ix_10_reg_982 : STD_LOGIC_VECTOR (8 downto 0);
    signal ixstart_cast_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ixstart_cast_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_75_fu_364_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_75_reg_993 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal s23_cast_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ix_11_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ix_11_reg_1011 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_b2_phi_fu_231_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_20_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal b1_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_132_reg_1045 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_88_fu_547_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_88_reg_1050 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_126_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_81_fu_721_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_81_reg_1071 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal s_2_fu_783_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_128_reg_1082 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_fu_923_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1087 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal indvars_iv_next_fu_929_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next_reg_1092 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_reg_1097 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal indvars_iv1_reg_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal indvars_iv_reg_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal iy_reg_158 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_reg_184 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_1_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal ixstart_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixstart_5_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_1_reg_217 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_reg_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_25_cast_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ixstart_5_phi_fu_244_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixstart_26_cast_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i9_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_3_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i21_1_cast_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i21_cast_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_105_fu_307_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_311_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_fu_323_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_319_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_331_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_344_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_120_fu_350_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_156_cast_fu_360_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_157_cast_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ixstart_21_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ixstart_22_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i21_2_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i21_3_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext9_cast_fu_476_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul8_fu_479_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_495_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul9_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul9_fu_501_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_130_fu_521_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_131_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_129_fu_517_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_fu_537_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl20_fu_525_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_cast_fu_543_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl18_fu_564_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_fu_560_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl18_cast_fu_571_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_65_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_cast_fu_584_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_fu_575_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ixstart_19_fu_588_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl11_fu_599_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_fu_610_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl11_cast_fu_606_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl12_cast_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_fu_627_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_cast_fu_630_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_82_fu_621_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ixstart_18_fu_634_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul6_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext5_cast_fu_650_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul6_fu_653_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_669_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul4_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul4_fu_675_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_124_fu_695_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_125_fu_707_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_123_fu_691_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_711_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl15_fu_699_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_cast_fu_717_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_94_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_fu_743_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_96_fu_739_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_133_fu_735_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_95_fu_731_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal s_24_cast_fu_759_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal s_15_fu_747_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_6_fu_753_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_135_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_16_fu_773_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_26_cast_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul7_fu_795_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul7_fu_795_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_127_fu_811_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl16_fu_815_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_fu_827_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl20_cast_fu_823_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl22_cast_fu_835_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_62_fu_845_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_176_cast_fu_848_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_839_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i21_1_fu_852_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_121_fu_867_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl13_fu_871_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl14_fu_883_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl16_cast_fu_879_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl19_cast_fu_891_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_fu_901_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_166_cast_fu_904_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_78_fu_895_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i21_fu_908_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul5_fu_939_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul5_fu_939_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_255_ap_start : STD_LOGIC;
    signal grp_fu_255_ap_done : STD_LOGIC;
    signal grp_fu_263_ap_start : STD_LOGIC;
    signal grp_fu_263_ap_done : STD_LOGIC;
    signal grp_fu_290_ap_start : STD_LOGIC;
    signal grp_fu_290_ap_done : STD_LOGIC;
    signal grp_fu_495_ap_start : STD_LOGIC;
    signal grp_fu_495_ap_done : STD_LOGIC;
    signal grp_fu_669_ap_start : STD_LOGIC;
    signal grp_fu_669_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal mul5_fu_939_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul7_fu_795_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_fu_344_p10 : STD_LOGIC_VECTOR (17 downto 0);

    component lenetSynthMatlab_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component lenetSynthMatlab_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component lenetSynthMatlab_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    lenetSynthMatlab_cud_U7 : component lenetSynthMatlab_cud
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_255_ap_start,
        done => grp_fu_255_ap_done,
        din0 => grp_fu_255_p0,
        din1 => grp_fu_255_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_255_p2);

    lenetSynthMatlab_dEe_U8 : component lenetSynthMatlab_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_263_ap_start,
        done => grp_fu_263_ap_done,
        din0 => iy_reg_158,
        din1 => grp_fu_263_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p2);

    lenetSynthMatlab_dEe_U9 : component lenetSynthMatlab_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_290_ap_start,
        done => grp_fu_290_ap_done,
        din0 => indvars_iv1_reg_134,
        din1 => grp_fu_290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    lenetSynthMatlab_eOg_U10 : component lenetSynthMatlab_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_495_ap_start,
        done => grp_fu_495_ap_done,
        din0 => grp_fu_495_p0,
        din1 => grp_fu_495_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    lenetSynthMatlab_eOg_U11 : component lenetSynthMatlab_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_669_ap_start,
        done => grp_fu_669_ap_done,
        din0 => grp_fu_669_p0,
        din1 => grp_fu_669_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                b1_reg_170 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                b1_reg_170 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    b2_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                b2_reg_226 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                b2_reg_226 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i9_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (b1_reg_170 = ap_const_lv1_1))) then 
                i9_fu_96 <= i21_cast_fu_914_p1;
            elsif (((b1_reg_170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_79_reg_1036 = ap_const_lv1_1))) then 
                i9_fu_96 <= i21_1_cast_fu_858_p1;
            elsif (((b1_reg_170 = ap_const_lv1_0) and (tmp_79_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then 
                i9_fu_96 <= p_3_fu_463_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i9_fu_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv1_reg_134 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                indvars_iv1_reg_134 <= indvars_iv_next2_reg_972;
            end if; 
        end if;
    end process;

    indvars_iv_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_reg_146 <= ap_const_lv8_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                indvars_iv_reg_146 <= indvars_iv_next_reg_1092;
            end if; 
        end if;
    end process;

    ix_1_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                ix_1_reg_217 <= ix_11_reg_1011;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ix_1_reg_217 <= ixstart_cast_reg_987;
            end if; 
        end if;
    end process;

    ix_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_reg_184 <= ap_const_lv9_1FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                ix_reg_184 <= ix_10_reg_982;
            end if; 
        end if;
    end process;

    ixstart_5_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_90_fu_407_p2 = ap_const_lv1_0) and (ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_0) and (tmp_83_fu_395_p2 = ap_const_lv1_0) and (exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ixstart_5_reg_240 <= ixstart_20_fu_401_p2;
            elsif (((ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_0) and (tmp_83_fu_395_p2 = ap_const_lv1_0) and (exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_90_fu_407_p2 = ap_const_lv1_1))) then 
                ixstart_5_reg_240 <= p_s_fu_431_p3;
            elsif (((b2_reg_226 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_83_reg_1019 = ap_const_lv1_1))) then 
                ixstart_5_reg_240 <= ixstart_26_cast_fu_594_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (b2_reg_226 = ap_const_lv1_1))) then 
                ixstart_5_reg_240 <= ixstart_25_cast_fu_640_p1;
            end if; 
        end if;
    end process;

    ixstart_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                ixstart_reg_206 <= ixstart_5_reg_240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ixstart_reg_206 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    iy_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iy_reg_158 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                iy_reg_158 <= i_reg_1087;
            end if; 
        end if;
    end process;

    s_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                s_1_reg_195 <= s_2_fu_783_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                s_1_reg_195 <= s23_cast_fu_378_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_reg_1087 <= i_fu_923_p2;
                indvars_iv_next_reg_1092 <= indvars_iv_next_fu_929_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvars_iv_next2_reg_972 <= indvars_iv_next2_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ix_10_reg_982 <= ix_10_fu_296_p2;
                tmp_reg_977 <= tmp_fu_286_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                ix_11_reg_1011 <= ix_11_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ixstart_cast_reg_987 <= ixstart_cast_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                tmp_122_reg_1097 <= mul5_fu_939_p2(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_126_reg_1066 <= mul4_fu_675_p2(17 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_128_reg_1082 <= mul7_fu_795_p2(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_132_reg_1045 <= mul9_fu_501_p2(17 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_75_reg_993 <= tmp_75_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((b1_reg_170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then
                tmp_79_reg_1036 <= tmp_79_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_81_reg_1071 <= tmp_81_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_0) and (exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_83_reg_1019 <= tmp_83_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_88_reg_1050 <= tmp_88_fu_547_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_274_p2, ap_CS_fsm_state13, exitcond_fu_382_p2, tmp_83_fu_395_p2, ap_phi_mux_b2_phi_fu_231_p4, tmp_79_fu_439_p2, b1_reg_170)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((b1_reg_170 = ap_const_lv1_0) and (tmp_79_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                elsif (((b1_reg_170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_79_fu_439_p2 = ap_const_lv1_1) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (b1_reg_170 = ap_const_lv1_1) and (exitcond_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                elsif (((ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_0) and (tmp_83_fu_395_p2 = ap_const_lv1_0) and (exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_0) and (exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_83_fu_395_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state25, tmp_76_fu_373_p1, tmp_93_fu_645_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            X_address0 <= tmp_93_fu_645_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            X_address0 <= tmp_76_fu_373_p1(8 - 1 downto 0);
        else 
            X_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_address0 <= tmp_91_fu_955_p1(5 - 1 downto 0);

    Y_ce0_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            Y_ce0 <= ap_const_logic_1;
        else 
            Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_d0 <= s_1_reg_195;

    Y_we0_assign_proc : process(ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            Y_we0 <= ap_const_logic_1;
        else 
            Y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_274_p2)
    begin
        if ((((exitcond1_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_b2_phi_fu_231_p4 <= b2_reg_226;

    ap_phi_mux_ixstart_5_phi_fu_244_p8_assign_proc : process(tmp_83_reg_1019, ap_CS_fsm_state25, ixstart_5_reg_240, b2_reg_226, ixstart_25_cast_fu_640_p1, ixstart_26_cast_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
            if (((b2_reg_226 = ap_const_lv1_0) and (tmp_83_reg_1019 = ap_const_lv1_1))) then 
                ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_26_cast_fu_594_p1;
            elsif ((b2_reg_226 = ap_const_lv1_1)) then 
                ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_25_cast_fu_640_p1;
            else 
                ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_5_reg_240;
            end if;
        else 
            ap_phi_mux_ixstart_5_phi_fu_244_p8 <= ixstart_5_reg_240;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_274_p2)
    begin
        if (((exitcond1_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_274_p2 <= "1" when (iy_reg_158 = ap_const_lv5_1E) else "0";
    exitcond_fu_382_p2 <= "1" when (ix_1_reg_217 = indvars_iv_reg_146) else "0";

    grp_fu_255_ap_start_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_382_p2, tmp_83_fu_395_p2, ap_phi_mux_b2_phi_fu_231_p4)
    begin
        if ((((exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_1)) or ((ap_phi_mux_b2_phi_fu_231_p4 = ap_const_lv1_0) and (exitcond_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_83_fu_395_p2 = ap_const_lv1_1)))) then 
            grp_fu_255_ap_start <= ap_const_logic_1;
        else 
            grp_fu_255_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_255_p0 <= std_logic_vector(unsigned(ix_1_reg_217) + unsigned(ap_const_lv8_1));
    grp_fu_255_p1 <= ap_const_lv8_5(4 - 1 downto 0);

    grp_fu_263_ap_start_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_382_p2, tmp_79_fu_439_p2, b1_reg_170)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (b1_reg_170 = ap_const_lv1_1) and (exitcond_fu_382_p2 = ap_const_lv1_1)) or ((b1_reg_170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_79_fu_439_p2 = ap_const_lv1_1) and (exitcond_fu_382_p2 = ap_const_lv1_1)))) then 
            grp_fu_263_ap_start <= ap_const_logic_1;
        else 
            grp_fu_263_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p1 <= ap_const_lv5_5(4 - 1 downto 0);

    grp_fu_290_ap_start_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_274_p2)
    begin
        if (((exitcond1_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_290_ap_start <= ap_const_logic_1;
        else 
            grp_fu_290_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_290_p1 <= ap_const_lv5_5(4 - 1 downto 0);

    grp_fu_495_ap_start_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_495_ap_start <= ap_const_logic_1;
        else 
            grp_fu_495_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_495_p0 <= mul8_fu_479_p2(15 downto 11);
    grp_fu_495_p1 <= ap_const_lv5_5(4 - 1 downto 0);

    grp_fu_669_ap_start_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_669_ap_start <= ap_const_logic_1;
        else 
            grp_fu_669_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_669_p0 <= mul6_fu_653_p2(15 downto 11);
    grp_fu_669_p1 <= ap_const_lv5_5(4 - 1 downto 0);
        i21_1_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i21_1_fu_852_p2),32));

    i21_1_fu_852_p2 <= std_logic_vector(unsigned(tmp_176_cast_fu_848_p1) + unsigned(tmp_85_fu_839_p2));
    i21_2_fu_445_p2 <= std_logic_vector(unsigned(i9_fu_96) + unsigned(ap_const_lv32_6));
    i21_3_fu_457_p2 <= std_logic_vector(unsigned(i9_fu_96) + unsigned(ap_const_lv32_FFFFFFE9));
        i21_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i21_fu_908_p2),32));

    i21_fu_908_p2 <= std_logic_vector(unsigned(tmp_166_cast_fu_904_p1) + unsigned(tmp_78_fu_895_p2));
    i_fu_923_p2 <= std_logic_vector(unsigned(iy_reg_158) + unsigned(ap_const_lv5_1));
    indvars_iv_next2_fu_280_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_134) + unsigned(ap_const_lv5_1));
    indvars_iv_next_fu_929_p2 <= std_logic_vector(unsigned(indvars_iv_reg_146) + unsigned(ap_const_lv8_5));
    ix_10_fu_296_p2 <= std_logic_vector(unsigned(ap_const_lv9_5) + unsigned(ix_reg_184));
    ix_11_fu_388_p2 <= std_logic_vector(unsigned(ix_1_reg_217) + unsigned(ap_const_lv8_1));
    ixstart_18_fu_634_p2 <= std_logic_vector(unsigned(tmp_61_cast_fu_630_p1) + unsigned(tmp_82_fu_621_p2));
    ixstart_19_fu_588_p2 <= std_logic_vector(unsigned(tmp_65_cast_fu_584_p1) + unsigned(tmp_89_fu_575_p2));
    ixstart_20_fu_401_p2 <= std_logic_vector(unsigned(ixstart_reg_206) + unsigned(ap_const_lv32_1E));
    ixstart_21_fu_413_p2 <= std_logic_vector(unsigned(ixstart_reg_206) + unsigned(ap_const_lv32_FFFFFF8E));
    ixstart_22_fu_425_p2 <= std_logic_vector(unsigned(ixstart_reg_206) + unsigned(ap_const_lv32_FFFFFF71));
        ixstart_25_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ixstart_18_fu_634_p2),32));

        ixstart_26_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ixstart_19_fu_588_p2),32));

    ixstart_cast_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_reg_977));
    mul4_fu_675_p1 <= zext5_cast_fu_650_p1(8 - 1 downto 0);
    mul4_fu_675_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_148) * unsigned(mul4_fu_675_p1), 18));
    mul5_fu_939_p1 <= mul5_fu_939_p10(5 - 1 downto 0);
    mul5_fu_939_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iy_reg_158),12));
    mul5_fu_939_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_34) * unsigned(mul5_fu_939_p1), 12));
    mul6_fu_653_p1 <= zext5_cast_fu_650_p1(8 - 1 downto 0);
    mul6_fu_653_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_19A) * unsigned(mul6_fu_653_p1), 18));
    mul7_fu_795_p1 <= mul7_fu_795_p10(5 - 1 downto 0);
    mul7_fu_795_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iy_reg_158),12));
    mul7_fu_795_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_34) * unsigned(mul7_fu_795_p1), 12));
    mul8_fu_479_p1 <= zext9_cast_fu_476_p1(8 - 1 downto 0);
    mul8_fu_479_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_19A) * unsigned(mul8_fu_479_p1), 18));
    mul9_fu_501_p1 <= zext9_cast_fu_476_p1(8 - 1 downto 0);
    mul9_fu_501_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_148) * unsigned(mul9_fu_501_p1), 18));
    mul_fu_344_p1 <= mul_fu_344_p10(8 - 1 downto 0);
    mul_fu_344_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ixstart_cast_reg_987),18));
    mul_fu_344_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_148) * unsigned(mul_fu_344_p1), 18));
    p_3_fu_463_p3 <= 
        i21_3_fu_457_p2 when (tmp_86_fu_451_p2(0) = '1') else 
        i21_2_fu_445_p2;
    p_s_fu_431_p3 <= 
        ixstart_22_fu_425_p2 when (tmp_92_fu_419_p2(0) = '1') else 
        ixstart_21_fu_413_p2;
    p_shl11_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl11_fu_599_p3),9));
    p_shl11_fu_599_p3 <= (tmp_81_reg_1071 & ap_const_lv3_0);
    p_shl12_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl12_fu_610_p3),9));
    p_shl12_fu_610_p3 <= (tmp_81_reg_1071 & ap_const_lv1_0);
    p_shl13_fu_871_p3 <= (tmp_121_fu_867_p1 & ap_const_lv3_0);
    p_shl14_fu_883_p3 <= (tmp_121_fu_867_p1 & ap_const_lv1_0);
    p_shl15_fu_699_p3 <= (tmp_124_fu_695_p1 & ap_const_lv2_0);
    p_shl16_cast_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_fu_871_p3),7));
    p_shl16_fu_815_p3 <= (tmp_127_fu_811_p1 & ap_const_lv3_0);
    p_shl17_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_fu_553_p3),9));
    p_shl17_fu_553_p3 <= (tmp_88_reg_1050 & ap_const_lv3_0);
    p_shl18_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_fu_564_p3),9));
    p_shl18_fu_564_p3 <= (tmp_88_reg_1050 & ap_const_lv1_0);
    p_shl19_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_fu_883_p3),7));
    p_shl19_fu_827_p3 <= (tmp_127_fu_811_p1 & ap_const_lv1_0);
    p_shl20_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_fu_815_p3),7));
    p_shl20_fu_525_p3 <= (tmp_130_fu_521_p1 & ap_const_lv2_0);
    p_shl22_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_fu_827_p3),7));
    p_shl7_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_323_p3),7));
    p_shl7_fu_323_p3 <= (tmp_105_fu_307_p1 & ap_const_lv1_0);
    p_shl_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_311_p3),7));
    p_shl_fu_311_p3 <= (tmp_105_fu_307_p1 & ap_const_lv3_0);
    s23_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),64));
    s_15_fu_747_p2 <= std_logic_vector(unsigned(tmp_94_fu_727_p1) + unsigned(s_1_reg_195));
    s_16_fu_773_p2 <= (s_15_fu_747_p2 or ap_const_lv64_FFFFFFFC00000000);
    s_24_cast_fu_759_p2 <= std_logic_vector(unsigned(tmp_133_fu_735_p1) + unsigned(tmp_95_fu_731_p1));
    s_26_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_6_fu_753_p2),64));
    s_2_fu_783_p3 <= 
        s_16_fu_773_p2 when (tmp_135_fu_765_p3(0) = '1') else 
        s_26_cast_fu_779_p1;
    s_6_fu_753_p2 <= std_logic_vector(unsigned(tmp_134_fu_743_p1) + unsigned(tmp_96_fu_739_p1));
    tmp1_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_711_p2),5));
    tmp1_fu_711_p2 <= std_logic_vector(unsigned(tmp_125_fu_707_p1) + unsigned(tmp_123_fu_691_p1));
    tmp2_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_537_p2),5));
    tmp2_fu_537_p2 <= std_logic_vector(unsigned(tmp_131_fu_533_p1) + unsigned(tmp_129_fu_517_p1));
    tmp_105_fu_307_p1 <= grp_fu_290_p2(3 - 1 downto 0);
    tmp_120_fu_350_p4 <= mul_fu_344_p2(17 downto 13);
    tmp_121_fu_867_p1 <= grp_fu_263_p2(3 - 1 downto 0);
    tmp_123_fu_691_p1 <= grp_fu_255_p2(4 - 1 downto 0);
    tmp_124_fu_695_p1 <= grp_fu_255_p2(3 - 1 downto 0);
    tmp_125_fu_707_p1 <= grp_fu_669_p2(4 - 1 downto 0);
    tmp_127_fu_811_p1 <= grp_fu_263_p2(3 - 1 downto 0);
    tmp_129_fu_517_p1 <= grp_fu_255_p2(4 - 1 downto 0);
    tmp_130_fu_521_p1 <= grp_fu_255_p2(3 - 1 downto 0);
    tmp_131_fu_533_p1 <= grp_fu_495_p2(4 - 1 downto 0);
    tmp_133_fu_735_p1 <= s_1_reg_195(35 - 1 downto 0);
    tmp_134_fu_743_p1 <= s_1_reg_195(34 - 1 downto 0);
    tmp_135_fu_765_p3 <= s_24_cast_fu_759_p2(34 downto 34);
        tmp_156_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_120_fu_350_p4),7));

        tmp_157_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_75_reg_993),32));

    tmp_166_cast_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_901_p1),7));
    tmp_176_cast_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_845_p1),7));
        tmp_58_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_122_reg_1097),5));

    tmp_61_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_627_p1),9));
        tmp_61_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_126_reg_1066),8));

        tmp_62_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_reg_1082),5));

    tmp_65_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_581_p1),9));
        tmp_65_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_reg_1045),8));

    tmp_75_fu_364_p2 <= std_logic_vector(signed(tmp_156_cast_fu_360_p1) + signed(tmp_s_fu_335_p2));
    tmp_76_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_cast_fu_370_p1),64));
    tmp_78_fu_895_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_879_p1) - unsigned(p_shl19_cast_fu_891_p1));
    tmp_79_fu_439_p2 <= "1" when (signed(i9_fu_96) > signed(ap_const_lv32_7FFFFFF9)) else "0";
    tmp_81_fu_721_p2 <= std_logic_vector(unsigned(p_shl15_fu_699_p3) + unsigned(tmp1_cast_fu_717_p1));
    tmp_82_fu_621_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_606_p1) - unsigned(p_shl12_cast_fu_617_p1));
    tmp_83_fu_395_p2 <= "1" when (signed(ixstart_reg_206) > signed(ap_const_lv32_7FFFFFE1)) else "0";
    tmp_85_fu_839_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_823_p1) - unsigned(p_shl22_cast_fu_835_p1));
    tmp_86_fu_451_p2 <= "1" when (signed(i21_2_fu_445_p2) > signed(ap_const_lv32_1D)) else "0";
    tmp_88_fu_547_p2 <= std_logic_vector(unsigned(p_shl20_fu_525_p3) + unsigned(tmp2_cast_fu_543_p1));
    tmp_89_fu_575_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_560_p1) - unsigned(p_shl18_cast_fu_571_p1));
    tmp_90_fu_407_p2 <= "1" when (signed(ixstart_20_fu_401_p2) > signed(ap_const_lv32_95)) else "0";
        tmp_91_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i9_fu_96),64));

    tmp_92_fu_419_p2 <= "1" when (signed(ixstart_21_fu_413_p2) > signed(ap_const_lv32_1D)) else "0";
        tmp_93_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_ixstart_5_phi_fu_244_p8),64));

    tmp_94_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),64));
    tmp_95_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),35));
    tmp_96_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_q0),34));
    tmp_fu_286_p1 <= ix_reg_184(8 - 1 downto 0);
    tmp_s_fu_335_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_319_p1) - unsigned(p_shl7_cast_fu_331_p1));
    zext5_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_11_reg_1011),18));
    zext9_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_11_reg_1011),18));
end behav;
