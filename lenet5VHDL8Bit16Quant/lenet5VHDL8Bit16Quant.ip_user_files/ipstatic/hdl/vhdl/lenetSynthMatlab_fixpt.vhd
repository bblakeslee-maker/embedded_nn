-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenetSynthMatlab_fixpt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImg_ce0 : OUT STD_LOGIC;
    inputImg_we0 : OUT STD_LOGIC;
    inputImg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputImg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    inputImg_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImg_ce1 : OUT STD_LOGIC;
    inputImg_we1 : OUT STD_LOGIC;
    inputImg_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputImg_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    netScores_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    netScores_ce0 : OUT STD_LOGIC;
    netScores_we0 : OUT STD_LOGIC;
    netScores_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of lenetSynthMatlab_fixpt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenetSynthMatlab_fixpt,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.360500,HLS_SYN_LAT=5125414,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=5,HLS_SYN_FF=3412,HLS_SYN_LUT=8953,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv13_A8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010101000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E0000000 : STD_LOGIC_VECTOR (31 downto 0) := "11100000000000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_FFFFFF0000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111110000000000000000000000000000000000000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv64_FFFFFFC000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111100000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_cast_fu_660_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_cast_reg_1490 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal f_1_fu_670_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_1_reg_1498 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_cast_fu_676_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul_cast_reg_1503 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal next_mul_fu_680_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_1508 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_1_fu_692_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_1_reg_1516 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_fu_704_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_reg_1524 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i3_cast_fu_710_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i3_cast_reg_1529 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i0_1_fu_720_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i0_1_reg_1537 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl6_fu_726_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_reg_1542 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond11_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_1_fu_744_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Y_2_fu_787_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal k_fu_801_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1563 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_i_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_851_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_16_reg_1573 : STD_LOGIC_VECTOR (13 downto 0);
    signal Y_5_fu_908_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_b_max_fu_648_ap_idle : STD_LOGIC;
    signal grp_b_max_fu_648_ap_ready : STD_LOGIC;
    signal grp_b_max_fu_648_ap_done : STD_LOGIC;
    signal f_2_cast_fu_935_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_2_cast_reg_1588 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal f_3_fu_945_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_3_reg_1596 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_3_fu_957_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_3_reg_1604 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp4_fu_983_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_reg_1609 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond8_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_3_fu_995_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_3_reg_1617 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i0_2_fu_1007_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i0_2_reg_1625 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_13_fu_1037_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_reg_1630 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond12_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_5_fu_1049_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_5_reg_1638 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_31_fu_1079_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_reg_1643 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond14_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1095_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal Y_7_fu_1146_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond_i2_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_i_fu_1165_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal phitmp_i_reg_1669 : STD_LOGIC_VECTOR (2 downto 0);
    signal Y_11_fu_1261_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal f_5_fu_1275_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_5_reg_1682 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i0_fu_1287_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i0_reg_1690 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp6_fu_1313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_reg_1695 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_3_fu_1325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_3_reg_1703 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_s_fu_1331_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_1708 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal l_fu_1380_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal l_reg_1724 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal k_1_fu_1392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal l_1_fu_1404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_1_reg_1740 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal c_assign_1_addr_reg_1745 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i1_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_1421_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal storemerge_i1_fu_1449_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i6_fu_1415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1463_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1766 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_20_fu_1469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_1771 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1ActivationMap_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1ActivationMap_ce0 : STD_LOGIC;
    signal conv1ActivationMap_we0 : STD_LOGIC;
    signal conv1ActivationMap_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1ActivationMap_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal iv11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iv11_ce0 : STD_LOGIC;
    signal iv11_we0 : STD_LOGIC;
    signal iv11_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal iv12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal iv12_ce0 : STD_LOGIC;
    signal iv12_we0 : STD_LOGIC;
    signal iv12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2ActivationMap_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2ActivationMap_ce0 : STD_LOGIC;
    signal conv2ActivationMap_we0 : STD_LOGIC;
    signal conv2ActivationMap_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2ActivationMap_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal iv14_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal iv14_ce0 : STD_LOGIC;
    signal iv14_we0 : STD_LOGIC;
    signal iv14_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal iv15_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal iv15_ce0 : STD_LOGIC;
    signal iv15_we0 : STD_LOGIC;
    signal iv15_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal iv16_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal iv16_ce0 : STD_LOGIC;
    signal iv16_we0 : STD_LOGIC;
    signal iv16_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_pool2ActivationMap_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_pool2ActivationMap_ce0 : STD_LOGIC;
    signal b_pool2ActivationMap_we0 : STD_LOGIC;
    signal b_pool2ActivationMap_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal iv17_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal iv17_ce0 : STD_LOGIC;
    signal iv17_we0 : STD_LOGIC;
    signal iv17_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_assign_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_assign_1_ce0 : STD_LOGIC;
    signal c_assign_1_we0 : STD_LOGIC;
    signal c_assign_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_c_sum_fu_618_ap_start : STD_LOGIC;
    signal grp_c_sum_fu_618_ap_done : STD_LOGIC;
    signal grp_c_sum_fu_618_ap_idle : STD_LOGIC;
    signal grp_c_sum_fu_618_ap_ready : STD_LOGIC;
    signal grp_c_sum_fu_618_X_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_c_sum_fu_618_X_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_618_Y_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_c_sum_fu_618_Y_ce0 : STD_LOGIC;
    signal grp_c_sum_fu_618_Y_we0 : STD_LOGIC;
    signal grp_c_sum_fu_618_Y_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_f_sum_fu_624_ap_start : STD_LOGIC;
    signal grp_f_sum_fu_624_ap_done : STD_LOGIC;
    signal grp_f_sum_fu_624_ap_idle : STD_LOGIC;
    signal grp_f_sum_fu_624_ap_ready : STD_LOGIC;
    signal grp_f_sum_fu_624_X_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_f_sum_fu_624_X_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_624_Y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_f_sum_fu_624_Y_ce0 : STD_LOGIC;
    signal grp_f_sum_fu_624_Y_we0 : STD_LOGIC;
    signal grp_f_sum_fu_624_Y_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_g_sum_fu_630_ap_start : STD_LOGIC;
    signal grp_g_sum_fu_630_ap_done : STD_LOGIC;
    signal grp_g_sum_fu_630_ap_idle : STD_LOGIC;
    signal grp_g_sum_fu_630_ap_ready : STD_LOGIC;
    signal grp_g_sum_fu_630_X_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_g_sum_fu_630_X_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_630_Y_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_g_sum_fu_630_Y_ce0 : STD_LOGIC;
    signal grp_g_sum_fu_630_Y_we0 : STD_LOGIC;
    signal grp_g_sum_fu_630_Y_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_sum_fu_636_ap_start : STD_LOGIC;
    signal grp_d_sum_fu_636_ap_done : STD_LOGIC;
    signal grp_d_sum_fu_636_ap_idle : STD_LOGIC;
    signal grp_d_sum_fu_636_ap_ready : STD_LOGIC;
    signal grp_d_sum_fu_636_X_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_d_sum_fu_636_X_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_636_Y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_d_sum_fu_636_Y_ce0 : STD_LOGIC;
    signal grp_d_sum_fu_636_Y_we0 : STD_LOGIC;
    signal grp_d_sum_fu_636_Y_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sum_fu_642_ap_start : STD_LOGIC;
    signal grp_sum_fu_642_ap_done : STD_LOGIC;
    signal grp_sum_fu_642_ap_idle : STD_LOGIC;
    signal grp_sum_fu_642_ap_ready : STD_LOGIC;
    signal grp_sum_fu_642_X_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sum_fu_642_X_ce0 : STD_LOGIC;
    signal grp_sum_fu_642_Y_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sum_fu_642_Y_ce0 : STD_LOGIC;
    signal grp_sum_fu_642_Y_we0 : STD_LOGIC;
    signal grp_sum_fu_642_Y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_b_max_fu_648_ap_start : STD_LOGIC;
    signal grp_b_max_fu_648_b_y0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_b_max_fu_648_b_y0_ce0 : STD_LOGIC;
    signal grp_b_max_fu_648_maxval_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_b_max_fu_648_maxval_ce0 : STD_LOGIC;
    signal grp_b_max_fu_648_maxval_we0 : STD_LOGIC;
    signal grp_b_max_fu_648_maxval_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_d_max_fu_654_ap_start : STD_LOGIC;
    signal grp_d_max_fu_654_ap_done : STD_LOGIC;
    signal grp_d_max_fu_654_ap_idle : STD_LOGIC;
    signal grp_d_max_fu_654_ap_ready : STD_LOGIC;
    signal grp_d_max_fu_654_b_y0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_d_max_fu_654_b_y0_ce0 : STD_LOGIC;
    signal grp_d_max_fu_654_maxval_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_d_max_fu_654_maxval_ce0 : STD_LOGIC;
    signal grp_d_max_fu_654_maxval_we0 : STD_LOGIC;
    signal grp_d_max_fu_654_maxval_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_reg_331 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond7_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_reg_342 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_353 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i3_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond15_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_387 : STD_LOGIC_VECTOR (2 downto 0);
    signal Y_1_i_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_reg_408 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_2_reg_419 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_2_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond10_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_reg_441 : STD_LOGIC_VECTOR (3 downto 0);
    signal i0_3_reg_453 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_2_reg_464 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond13_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i9_reg_475 : STD_LOGIC_VECTOR (2 downto 0);
    signal ix_reg_486 : STD_LOGIC_VECTOR (2 downto 0);
    signal Y_1_i1_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_4_reg_507 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i0_6_reg_518 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond6_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_4_reg_529 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_540 : STD_LOGIC_VECTOR (4 downto 0);
    signal l_i_reg_551 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_i4_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i1_reg_562 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_i_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_i1_reg_573 : STD_LOGIC_VECTOR (3 downto 0);
    signal i26_reg_584 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_i2_reg_596 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_607 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_c_sum_fu_618_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_f_sum_fu_624_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_g_sum_fu_630_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_d_sum_fu_636_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_sum_fu_642_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_b_max_fu_648_ap_start_reg : STD_LOGIC := '0';
    signal grp_d_max_fu_654_ap_start_reg : STD_LOGIC := '0';
    signal tmp_19_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_247_i_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_1119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_189_i_fu_1160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_1369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_1410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i1_cast_fu_734_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_750_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_755_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Y_1_fu_765_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_21_fu_769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_1_cast_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_812_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_824_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_820_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_832_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_836_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_cast_fu_842_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_fu_846_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_868_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_34_fu_864_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_23_fu_860_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_856_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal i20_1_cast_fu_884_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal i20_1_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_8_fu_878_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_36_fu_890_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y_3_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_4_cast_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_927_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_971_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_979_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_fu_963_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_fu_1013_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_1025_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl9_cast_fu_1021_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_1033_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_fu_1055_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_fu_1067_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl8_cast_fu_1063_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl10_cast_fu_1075_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i9_cast_fu_1085_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_1101_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_cast_fu_1106_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_fu_1110_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_cast_fu_1115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_6_fu_1124_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_22_fu_1128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y_4_fu_1136_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_7_cast_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1182_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_fu_1190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_cast_fu_1195_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_1199_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_1221_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_44_fu_1217_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_43_fu_1213_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_42_fu_1209_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal i22_1_cast_fu_1237_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal i22_1_fu_1225_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_10_fu_1231_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_46_fu_1243_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Y_9_fu_1251_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Y_10_cast_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl7_fu_1301_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_cast_fu_1309_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_1293_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_cast_fu_1339_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_fu_1355_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_cast_fu_1360_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_1364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_1427_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_41_fu_1431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_259_i_fu_1439_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_260_i_cast_fu_1445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component c_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        Y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_we0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component f_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        Y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_we0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component g_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        Y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_we0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component d_sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        Y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_we0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        X_ce0 : OUT STD_LOGIC;
        X_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        Y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        Y_ce0 : OUT STD_LOGIC;
        Y_we0 : OUT STD_LOGIC;
        Y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component b_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_y0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        b_y0_ce0 : OUT STD_LOGIC;
        b_y0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        maxval_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        maxval_ce0 : OUT STD_LOGIC;
        maxval_we0 : OUT STD_LOGIC;
        maxval_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component d_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_y0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        b_y0_ce0 : OUT STD_LOGIC;
        b_y0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        maxval_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        maxval_ce0 : OUT STD_LOGIC;
        maxval_we0 : OUT STD_LOGIC;
        maxval_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenetSynthMatlab_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenetSynthMatlab_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenetSynthMatlab_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenetSynthMatlab_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenetSynthMatlab_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenetSynthMatlab_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenetSynthMatlab_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenetSynthMatlab_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_rcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_sc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenetSynthMatlab_tde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_udo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenetSynthMatlab_vdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    conv1ActivationMap_U : component lenetSynthMatlab_jbC
    generic map (
        DataWidth => 16,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1ActivationMap_address0,
        ce0 => conv1ActivationMap_ce0,
        we0 => conv1ActivationMap_we0,
        d0 => conv1ActivationMap_d0,
        q0 => conv1ActivationMap_q0);

    iv10_U : component lenetSynthMatlab_kbM
    generic map (
        DataWidth => 16,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_b_max_fu_648_maxval_address0,
        ce0 => grp_b_max_fu_648_maxval_ce0,
        we0 => grp_b_max_fu_648_maxval_we0,
        d0 => grp_b_max_fu_648_maxval_d0);

    iv11_U : component lenetSynthMatlab_lbW
    generic map (
        DataWidth => 1,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => iv11_address0,
        ce0 => iv11_ce0,
        we0 => iv11_we0,
        d0 => ap_const_lv1_0,
        q0 => iv11_q0);

    iv12_U : component lenetSynthMatlab_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => iv12_address0,
        ce0 => iv12_ce0,
        we0 => iv12_we0,
        d0 => grp_sum_fu_642_Y_d0,
        q0 => iv12_q0);

    conv2ActivationMap_U : component lenetSynthMatlab_ncg
    generic map (
        DataWidth => 16,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2ActivationMap_address0,
        ce0 => conv2ActivationMap_ce0,
        we0 => conv2ActivationMap_we0,
        d0 => conv2ActivationMap_d0,
        q0 => conv2ActivationMap_q0);

    iv13_U : component lenetSynthMatlab_ocq
    generic map (
        DataWidth => 16,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_d_max_fu_654_maxval_address0,
        ce0 => grp_d_max_fu_654_maxval_ce0,
        we0 => grp_d_max_fu_654_maxval_we0,
        d0 => grp_d_max_fu_654_maxval_d0);

    iv14_U : component lenetSynthMatlab_pcA
    generic map (
        DataWidth => 1,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => iv14_address0,
        ce0 => iv14_ce0,
        we0 => iv14_we0,
        d0 => ap_const_lv1_0,
        q0 => iv14_q0);

    iv15_U : component lenetSynthMatlab_qcK
    generic map (
        DataWidth => 64,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => iv15_address0,
        ce0 => iv15_ce0,
        we0 => iv15_we0,
        d0 => grp_c_sum_fu_618_Y_d0,
        q0 => iv15_q0);

    iv16_U : component lenetSynthMatlab_rcU
    generic map (
        DataWidth => 64,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => iv16_address0,
        ce0 => iv16_ce0,
        we0 => iv16_we0,
        d0 => grp_d_sum_fu_636_Y_d0,
        q0 => iv16_q0);

    b_pool2ActivationMap_U : component lenetSynthMatlab_sc4
    generic map (
        DataWidth => 1,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_pool2ActivationMap_address0,
        ce0 => b_pool2ActivationMap_ce0,
        we0 => b_pool2ActivationMap_we0,
        d0 => ap_const_lv1_0,
        q0 => b_pool2ActivationMap_q0);

    iv17_U : component lenetSynthMatlab_tde
    generic map (
        DataWidth => 64,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => iv17_address0,
        ce0 => iv17_ce0,
        we0 => iv17_we0,
        d0 => grp_f_sum_fu_624_Y_d0,
        q0 => iv17_q0);

    iv18_U : component lenetSynthMatlab_udo
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_g_sum_fu_630_Y_address0,
        ce0 => grp_g_sum_fu_630_Y_ce0,
        we0 => grp_g_sum_fu_630_Y_we0,
        d0 => grp_g_sum_fu_630_Y_d0);

    c_assign_1_U : component lenetSynthMatlab_vdy
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_assign_1_address0,
        ce0 => c_assign_1_ce0,
        we0 => c_assign_1_we0,
        d0 => i26_reg_584,
        q0 => c_assign_1_q0);

    grp_c_sum_fu_618 : component c_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_c_sum_fu_618_ap_start,
        ap_done => grp_c_sum_fu_618_ap_done,
        ap_idle => grp_c_sum_fu_618_ap_idle,
        ap_ready => grp_c_sum_fu_618_ap_ready,
        X_address0 => grp_c_sum_fu_618_X_address0,
        X_ce0 => grp_c_sum_fu_618_X_ce0,
        X_q0 => iv14_q0,
        Y_address0 => grp_c_sum_fu_618_Y_address0,
        Y_ce0 => grp_c_sum_fu_618_Y_ce0,
        Y_we0 => grp_c_sum_fu_618_Y_we0,
        Y_d0 => grp_c_sum_fu_618_Y_d0);

    grp_f_sum_fu_624 : component f_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_f_sum_fu_624_ap_start,
        ap_done => grp_f_sum_fu_624_ap_done,
        ap_idle => grp_f_sum_fu_624_ap_idle,
        ap_ready => grp_f_sum_fu_624_ap_ready,
        X_address0 => grp_f_sum_fu_624_X_address0,
        X_ce0 => grp_f_sum_fu_624_X_ce0,
        X_q0 => b_pool2ActivationMap_q0,
        Y_address0 => grp_f_sum_fu_624_Y_address0,
        Y_ce0 => grp_f_sum_fu_624_Y_ce0,
        Y_we0 => grp_f_sum_fu_624_Y_we0,
        Y_d0 => grp_f_sum_fu_624_Y_d0);

    grp_g_sum_fu_630 : component g_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_g_sum_fu_630_ap_start,
        ap_done => grp_g_sum_fu_630_ap_done,
        ap_idle => grp_g_sum_fu_630_ap_idle,
        ap_ready => grp_g_sum_fu_630_ap_ready,
        X_address0 => grp_g_sum_fu_630_X_address0,
        X_ce0 => grp_g_sum_fu_630_X_ce0,
        X_q0 => iv17_q0,
        Y_address0 => grp_g_sum_fu_630_Y_address0,
        Y_ce0 => grp_g_sum_fu_630_Y_ce0,
        Y_we0 => grp_g_sum_fu_630_Y_we0,
        Y_d0 => grp_g_sum_fu_630_Y_d0);

    grp_d_sum_fu_636 : component d_sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_d_sum_fu_636_ap_start,
        ap_done => grp_d_sum_fu_636_ap_done,
        ap_idle => grp_d_sum_fu_636_ap_idle,
        ap_ready => grp_d_sum_fu_636_ap_ready,
        X_address0 => grp_d_sum_fu_636_X_address0,
        X_ce0 => grp_d_sum_fu_636_X_ce0,
        X_q0 => iv15_q0,
        Y_address0 => grp_d_sum_fu_636_Y_address0,
        Y_ce0 => grp_d_sum_fu_636_Y_ce0,
        Y_we0 => grp_d_sum_fu_636_Y_we0,
        Y_d0 => grp_d_sum_fu_636_Y_d0);

    grp_sum_fu_642 : component sum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sum_fu_642_ap_start,
        ap_done => grp_sum_fu_642_ap_done,
        ap_idle => grp_sum_fu_642_ap_idle,
        ap_ready => grp_sum_fu_642_ap_ready,
        X_address0 => grp_sum_fu_642_X_address0,
        X_ce0 => grp_sum_fu_642_X_ce0,
        X_q0 => iv11_q0,
        Y_address0 => grp_sum_fu_642_Y_address0,
        Y_ce0 => grp_sum_fu_642_Y_ce0,
        Y_we0 => grp_sum_fu_642_Y_we0,
        Y_d0 => grp_sum_fu_642_Y_d0);

    grp_b_max_fu_648 : component b_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_b_max_fu_648_ap_start,
        ap_done => grp_b_max_fu_648_ap_done,
        ap_idle => grp_b_max_fu_648_ap_idle,
        ap_ready => grp_b_max_fu_648_ap_ready,
        b_y0_address0 => grp_b_max_fu_648_b_y0_address0,
        b_y0_ce0 => grp_b_max_fu_648_b_y0_ce0,
        b_y0_q0 => conv1ActivationMap_q0,
        maxval_address0 => grp_b_max_fu_648_maxval_address0,
        maxval_ce0 => grp_b_max_fu_648_maxval_ce0,
        maxval_we0 => grp_b_max_fu_648_maxval_we0,
        maxval_d0 => grp_b_max_fu_648_maxval_d0);

    grp_d_max_fu_654 : component d_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_d_max_fu_654_ap_start,
        ap_done => grp_d_max_fu_654_ap_done,
        ap_idle => grp_d_max_fu_654_ap_idle,
        ap_ready => grp_d_max_fu_654_ap_ready,
        b_y0_address0 => grp_d_max_fu_654_b_y0_address0,
        b_y0_ce0 => grp_d_max_fu_654_b_y0_ce0,
        b_y0_q0 => conv2ActivationMap_q0,
        maxval_address0 => grp_d_max_fu_654_maxval_address0,
        maxval_ce0 => grp_d_max_fu_654_maxval_ce0,
        maxval_we0 => grp_d_max_fu_654_maxval_we0,
        maxval_d0 => grp_d_max_fu_654_maxval_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_b_max_fu_648_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_b_max_fu_648_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_664_p2 = ap_const_lv1_1))) then 
                    grp_b_max_fu_648_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_b_max_fu_648_ap_ready = ap_const_logic_1)) then 
                    grp_b_max_fu_648_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_c_sum_fu_618_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_c_sum_fu_618_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond12_fu_1001_p2 = ap_const_lv1_1))) then 
                    grp_c_sum_fu_618_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_c_sum_fu_618_ap_ready = ap_const_logic_1)) then 
                    grp_c_sum_fu_618_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_d_max_fu_654_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_d_max_fu_654_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond2_fu_939_p2 = ap_const_lv1_1))) then 
                    grp_d_max_fu_654_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_d_max_fu_654_ap_ready = ap_const_logic_1)) then 
                    grp_d_max_fu_654_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_d_sum_fu_636_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_d_sum_fu_636_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_d_sum_fu_636_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_d_sum_fu_636_ap_ready = ap_const_logic_1)) then 
                    grp_d_sum_fu_636_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_f_sum_fu_624_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_f_sum_fu_624_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond5_fu_1281_p2 = ap_const_lv1_1))) then 
                    grp_f_sum_fu_624_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_f_sum_fu_624_ap_ready = ap_const_logic_1)) then 
                    grp_f_sum_fu_624_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_g_sum_fu_630_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_g_sum_fu_630_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_g_sum_fu_630_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_g_sum_fu_630_ap_ready = ap_const_logic_1)) then 
                    grp_g_sum_fu_630_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sum_fu_642_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sum_fu_642_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond11_fu_714_p2 = ap_const_lv1_1))) then 
                    grp_sum_fu_642_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sum_fu_642_ap_ready = ap_const_logic_1)) then 
                    grp_sum_fu_642_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Y_1_i1_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                Y_1_i1_reg_497 <= Y_11_fu_1261_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                Y_1_i1_reg_497 <= Y_7_fu_1146_p3;
            end if; 
        end if;
    end process;

    Y_1_i_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                Y_1_i_reg_398 <= Y_5_fu_908_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                Y_1_i_reg_398 <= Y_2_fu_787_p3;
            end if; 
        end if;
    end process;

    c_2_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond8_fu_951_p2 = ap_const_lv1_0))) then 
                c_2_reg_441 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i2_fu_1154_p2 = ap_const_lv1_1))) then 
                c_2_reg_441 <= c_3_reg_1617;
            end if; 
        end if;
    end process;

    c_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_686_p2 = ap_const_lv1_0))) then 
                c_reg_364 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                c_reg_364 <= c_1_reg_1524;
            end if; 
        end if;
    end process;

    f_2_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond8_fu_951_p2 = ap_const_lv1_1))) then 
                f_2_reg_419 <= f_3_reg_1596;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_b_max_fu_648_ap_done = ap_const_logic_1))) then 
                f_2_reg_419 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_4_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_d_max_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                f_4_reg_507 <= ap_const_lv7_0;
            elsif (((grp_g_sum_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                f_4_reg_507 <= f_5_reg_1682;
            end if; 
        end if;
    end process;

    f_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_686_p2 = ap_const_lv1_1))) then 
                f_reg_331 <= f_1_reg_1498;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_reg_331 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i0_3_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond10_fu_989_p2 = ap_const_lv1_0))) then 
                i0_3_reg_453 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond14_fu_1043_p2 = ap_const_lv1_1))) then 
                i0_3_reg_453 <= i0_2_reg_1625;
            end if; 
        end if;
    end process;

    i0_6_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond6_fu_1269_p2 = ap_const_lv1_0))) then 
                i0_6_reg_518 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond4_fu_1319_p2 = ap_const_lv1_1))) then 
                i0_6_reg_518 <= i0_reg_1690;
            end if; 
        end if;
    end process;

    i1_2_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond13_fu_1089_p2 = ap_const_lv1_1))) then 
                i1_2_reg_464 <= i1_5_reg_1638;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond12_fu_1001_p2 = ap_const_lv1_0))) then 
                i1_2_reg_464 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i1_4_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond3_fu_1343_p2 = ap_const_lv1_1))) then 
                i1_4_reg_529 <= i1_3_reg_1703;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond5_fu_1281_p2 = ap_const_lv1_0))) then 
                i1_4_reg_529 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond11_fu_714_p2 = ap_const_lv1_0))) then 
                i1_reg_387 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond15_fu_738_p2 = ap_const_lv1_0))) then 
                i1_reg_387 <= i1_1_fu_744_p2;
            end if; 
        end if;
    end process;

    i26_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i6_fu_1415_p2 = ap_const_lv1_0))) then 
                i26_reg_584 <= storemerge_i1_fu_1449_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond1_i1_fu_1398_p2 = ap_const_lv1_0))) then 
                i26_reg_584 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i3_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_698_p2 = ap_const_lv1_0))) then 
                i3_reg_376 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond15_fu_738_p2 = ap_const_lv1_1))) then 
                i3_reg_376 <= i0_1_reg_1537;
            end if; 
        end if;
    end process;

    i9_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond14_fu_1043_p2 = ap_const_lv1_0))) then 
                i9_reg_475 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond13_fu_1089_p2 = ap_const_lv1_0))) then 
                i9_reg_475 <= i_3_fu_1095_p2;
            end if; 
        end if;
    end process;

    i_1_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond4_fu_1319_p2 = ap_const_lv1_0))) then 
                i_1_reg_540 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond3_fu_1343_p2 = ap_const_lv1_0))) then 
                i_1_reg_540 <= i_2_fu_1349_p2;
            end if; 
        end if;
    end process;

    i_4_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond1_i1_fu_1398_p2 = ap_const_lv1_1))) then 
                i_4_reg_607 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_4_reg_607 <= i_reg_1766;
            end if; 
        end if;
    end process;

    ix_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                ix_reg_486 <= phitmp_i_reg_1669;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                ix_reg_486 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    k_i1_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (exitcond1_i_fu_1374_p2 = ap_const_lv1_0))) then 
                k_i1_reg_562 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_i4_fu_1386_p2 = ap_const_lv1_0))) then 
                k_i1_reg_562 <= k_1_fu_1392_p2;
            end if; 
        end if;
    end process;

    k_i2_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i6_fu_1415_p2 = ap_const_lv1_0))) then 
                k_i2_reg_596 <= k_2_fu_1421_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond1_i1_fu_1398_p2 = ap_const_lv1_0))) then 
                k_i2_reg_596 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_i_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_i_reg_408 <= k_reg_1563;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_i_reg_408 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l_i1_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (exitcond1_i_fu_1374_p2 = ap_const_lv1_1))) then 
                l_i1_reg_573 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i6_fu_1415_p2 = ap_const_lv1_1))) then 
                l_i1_reg_573 <= l_1_reg_1740;
            end if; 
        end if;
    end process;

    l_i_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond6_fu_1269_p2 = ap_const_lv1_1))) then 
                l_i_reg_551 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_i4_fu_1386_p2 = ap_const_lv1_1))) then 
                l_i_reg_551 <= l_reg_1724;
            end if; 
        end if;
    end process;

    phi_mul_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_664_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_353 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_698_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_353 <= next_mul_reg_1508;
            end if; 
        end if;
    end process;

    r_2_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond2_fu_939_p2 = ap_const_lv1_0))) then 
                r_2_reg_430 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond10_fu_989_p2 = ap_const_lv1_1))) then 
                r_2_reg_430 <= r_3_reg_1604;
            end if; 
        end if;
    end process;

    r_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_664_p2 = ap_const_lv1_0))) then 
                r_reg_342 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_698_p2 = ap_const_lv1_1))) then 
                r_reg_342 <= r_1_reg_1516;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_1_reg_1524 <= c_1_fu_704_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                c_3_reg_1617 <= c_3_fu_995_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond1_i1_fu_1398_p2 = ap_const_lv1_0))) then
                c_assign_1_addr_reg_1745 <= tmp_i4_fu_1410_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_1_reg_1498 <= f_1_fu_670_p2;
                    f_cast_reg_1490(2 downto 0) <= f_cast_fu_660_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    f_2_cast_reg_1588(4 downto 0) <= f_2_cast_fu_935_p1(4 downto 0);
                f_3_reg_1596 <= f_3_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                f_5_reg_1682 <= f_5_fu_1275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i0_1_reg_1537 <= i0_1_fu_720_p2;
                    i3_cast_reg_1529(2 downto 0) <= i3_cast_fu_710_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i0_2_reg_1625 <= i0_2_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i0_reg_1690 <= i0_fu_1287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i1_3_reg_1703 <= i1_3_fu_1325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i1_5_reg_1638 <= i1_5_fu_1049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_reg_1766 <= i_fu_1463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                k_reg_1563 <= k_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                l_1_reg_1740 <= l_1_fu_1404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                l_reg_1724 <= l_fu_1380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                next_mul_reg_1508 <= next_mul_fu_680_p2;
                    phi_mul_cast_reg_1503(12 downto 0) <= phi_mul_cast_fu_676_p1(12 downto 0);
                r_1_reg_1516 <= r_1_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond11_fu_714_p2 = ap_const_lv1_0))) then
                    p_shl6_reg_1542(4 downto 2) <= p_shl6_fu_726_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i2_fu_1154_p2 = ap_const_lv1_0))) then
                phitmp_i_reg_1669 <= phitmp_i_fu_1165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                r_3_reg_1604 <= r_3_fu_957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond8_fu_951_p2 = ap_const_lv1_0))) then
                    tmp4_reg_1609(10 downto 5) <= tmp4_fu_983_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond5_fu_1281_p2 = ap_const_lv1_0))) then
                    tmp6_reg_1695(8 downto 4) <= tmp6_fu_1313_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond12_fu_1001_p2 = ap_const_lv1_0))) then
                    tmp_13_reg_1630(8 downto 1) <= tmp_13_fu_1037_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_i_fu_795_p2 = ap_const_lv1_1))) then
                tmp_16_reg_1573 <= tmp_16_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_1457_p2 = ap_const_lv1_0))) then
                    tmp_20_reg_1771(3 downto 0) <= tmp_20_fu_1469_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond14_fu_1043_p2 = ap_const_lv1_0))) then
                    tmp_31_reg_1643(6 downto 1) <= tmp_31_fu_1079_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond4_fu_1319_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_1708(6 downto 4) <= tmp_s_fu_1331_p3(6 downto 4);
            end if;
        end if;
    end process;
    f_cast_reg_1490(13 downto 3) <= "00000000000";
    phi_mul_cast_reg_1503(13) <= '0';
    i3_cast_reg_1529(4 downto 3) <= "00";
    p_shl6_reg_1542(1 downto 0) <= "00";
    f_2_cast_reg_1588(7 downto 5) <= "000";
    tmp4_reg_1609(4 downto 0) <= "00000";
    tmp_13_reg_1630(0) <= '0';
    tmp_31_reg_1643(0) <= '0';
    tmp6_reg_1695(3 downto 0) <= "0000";
    tmp_s_reg_1708(3 downto 0) <= "0000";
    tmp_20_reg_1771(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond11_fu_714_p2, ap_CS_fsm_state6, ap_CS_fsm_state10, exitcond_i_fu_795_p2, ap_CS_fsm_state13, grp_b_max_fu_648_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond8_fu_951_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, exitcond12_fu_1001_p2, ap_CS_fsm_state18, exitcond14_fu_1043_p2, ap_CS_fsm_state19, ap_CS_fsm_state25, exitcond_i2_fu_1154_p2, ap_CS_fsm_state28, ap_CS_fsm_state29, exitcond5_fu_1281_p2, ap_CS_fsm_state30, exitcond4_fu_1319_p2, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, exitcond1_i1_fu_1398_p2, ap_CS_fsm_state38, exitcond_i6_fu_1415_p2, ap_CS_fsm_state39, exitcond_fu_1457_p2, grp_c_sum_fu_618_ap_done, grp_f_sum_fu_624_ap_done, grp_g_sum_fu_630_ap_done, grp_d_sum_fu_636_ap_done, grp_sum_fu_642_ap_done, grp_d_max_fu_654_ap_done, exitcond7_fu_686_p2, exitcond9_fu_698_p2, exitcond1_fu_664_p2, exitcond15_fu_738_p2, exitcond10_fu_989_p2, exitcond2_fu_939_p2, exitcond13_fu_1089_p2, ap_CS_fsm_state34, ap_CS_fsm_state27, exitcond6_fu_1269_p2, exitcond3_fu_1343_p2, exitcond_i4_fu_1386_p2, exitcond1_i_fu_1374_p2, ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_664_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond7_fu_686_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_698_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond11_fu_714_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond15_fu_738_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_sum_fu_642_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_i_fu_795_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_b_max_fu_648_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond2_fu_939_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond8_fu_951_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond10_fu_989_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond12_fu_1001_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond14_fu_1043_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond13_fu_1089_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((grp_c_sum_fu_618_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_d_sum_fu_636_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i2_fu_1154_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                if (((grp_d_max_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond6_fu_1269_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond5_fu_1281_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond4_fu_1319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond3_fu_1343_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((grp_f_sum_fu_624_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_g_sum_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (exitcond1_i_fu_1374_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_i4_fu_1386_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond1_i1_fu_1398_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond_i6_fu_1415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_1457_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Y_10_cast_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_10_fu_1231_p2),64));
    Y_10_fu_1231_p2 <= std_logic_vector(unsigned(tmp_45_fu_1221_p1) + unsigned(tmp_44_fu_1217_p1));
    Y_11_fu_1261_p3 <= 
        Y_9_fu_1251_p2 when (tmp_46_fu_1243_p3(0) = '1') else 
        Y_10_cast_fu_1257_p1;
    Y_1_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_1_fu_765_p1),32));
    Y_1_fu_765_p1 <= iv12_q0(29 - 1 downto 0);
    Y_2_fu_787_p3 <= 
        Y_fu_777_p2 when (tmp_21_fu_769_p3(0) = '1') else 
        Y_1_cast_fu_783_p1;
    Y_3_fu_898_p2 <= (i20_1_fu_872_p2 or ap_const_lv32_E0000000);
    Y_4_cast_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_8_fu_878_p2),32));
    Y_4_fu_1136_p2 <= (iv16_q0 or ap_const_lv64_FFFFFF0000000000);
    Y_5_fu_908_p3 <= 
        Y_3_fu_898_p2 when (tmp_36_fu_890_p3(0) = '1') else 
        Y_4_cast_fu_904_p1;
    Y_6_fu_1124_p1 <= iv16_q0(40 - 1 downto 0);
    Y_7_cast_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Y_6_fu_1124_p1),64));
    Y_7_fu_1146_p3 <= 
        Y_4_fu_1136_p2 when (tmp_22_fu_1128_p3(0) = '1') else 
        Y_7_cast_fu_1142_p1;
    Y_8_fu_878_p2 <= std_logic_vector(unsigned(tmp_35_fu_868_p1) + unsigned(tmp_34_fu_864_p1));
    Y_9_fu_1251_p2 <= (i22_1_fu_1225_p2 or ap_const_lv64_FFFFFF0000000000);
    Y_fu_777_p2 <= (iv12_q0 or ap_const_lv32_E0000000);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state39, exitcond_fu_1457_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_1457_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state39, exitcond_fu_1457_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_1457_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_pool2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state31, grp_f_sum_fu_624_X_address0, ap_CS_fsm_state32, tmp_26_fu_1369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            b_pool2ActivationMap_address0 <= tmp_26_fu_1369_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            b_pool2ActivationMap_address0 <= grp_f_sum_fu_624_X_address0;
        else 
            b_pool2ActivationMap_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_pool2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state31, grp_f_sum_fu_624_X_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            b_pool2ActivationMap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            b_pool2ActivationMap_ce0 <= grp_f_sum_fu_624_X_ce0;
        else 
            b_pool2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_pool2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state31, exitcond3_fu_1343_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond3_fu_1343_p2 = ap_const_lv1_0))) then 
            b_pool2ActivationMap_we0 <= ap_const_logic_1;
        else 
            b_pool2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_704_p2 <= std_logic_vector(unsigned(c_reg_364) + unsigned(ap_const_lv5_1));
    c_3_fu_995_p2 <= std_logic_vector(unsigned(c_2_reg_441) + unsigned(ap_const_lv4_1));

    c_assign_1_address0_assign_proc : process(c_assign_1_addr_reg_1745, ap_CS_fsm_state38, ap_CS_fsm_state39, tmp_20_fu_1469_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            c_assign_1_address0 <= tmp_20_fu_1469_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            c_assign_1_address0 <= c_assign_1_addr_reg_1745;
        else 
            c_assign_1_address0 <= "XXXX";
        end if; 
    end process;


    c_assign_1_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            c_assign_1_ce0 <= ap_const_logic_1;
        else 
            c_assign_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_assign_1_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            c_assign_1_we0 <= ap_const_logic_1;
        else 
            c_assign_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1ActivationMap_address0_assign_proc : process(ap_CS_fsm_state13, grp_b_max_fu_648_b_y0_address0, ap_CS_fsm_state12, tmp_17_fu_930_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1ActivationMap_address0 <= tmp_17_fu_930_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv1ActivationMap_address0 <= grp_b_max_fu_648_b_y0_address0;
        else 
            conv1ActivationMap_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state13, grp_b_max_fu_648_b_y0_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1ActivationMap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv1ActivationMap_ce0 <= grp_b_max_fu_648_b_y0_ce0;
        else 
            conv1ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1ActivationMap_d0 <= Y_1_i_reg_398(26 downto 11);

    conv1ActivationMap_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv1ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2ActivationMap_address0_assign_proc : process(ap_CS_fsm_state25, grp_d_max_fu_654_b_y0_address0, ap_CS_fsm_state27, tmp_30_fu_1204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2ActivationMap_address0 <= tmp_30_fu_1204_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv2ActivationMap_address0 <= grp_d_max_fu_654_b_y0_address0;
        else 
            conv2ActivationMap_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2ActivationMap_ce0_assign_proc : process(ap_CS_fsm_state25, grp_d_max_fu_654_b_y0_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2ActivationMap_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv2ActivationMap_ce0 <= grp_d_max_fu_654_b_y0_ce0;
        else 
            conv2ActivationMap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2ActivationMap_d0 <= Y_1_i1_reg_497(33 downto 18);

    conv2ActivationMap_we0_assign_proc : process(ap_CS_fsm_state25, exitcond_i2_fu_1154_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i2_fu_1154_p2 = ap_const_lv1_1))) then 
            conv2ActivationMap_we0 <= ap_const_logic_1;
        else 
            conv2ActivationMap_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_989_p2 <= "1" when (c_2_reg_441 = ap_const_lv4_A) else "0";
    exitcond11_fu_714_p2 <= "1" when (i3_reg_376 = ap_const_lv3_5) else "0";
    exitcond12_fu_1001_p2 <= "1" when (i0_3_reg_453 = ap_const_lv3_5) else "0";
    exitcond13_fu_1089_p2 <= "1" when (i9_reg_475 = ap_const_lv3_6) else "0";
    exitcond14_fu_1043_p2 <= "1" when (i1_2_reg_464 = ap_const_lv3_5) else "0";
    exitcond15_fu_738_p2 <= "1" when (i1_reg_387 = ap_const_lv3_5) else "0";
    exitcond1_fu_664_p2 <= "1" when (f_reg_331 = ap_const_lv3_6) else "0";
    exitcond1_i1_fu_1398_p2 <= "1" when (l_i1_reg_573 = ap_const_lv4_A) else "0";
    exitcond1_i_fu_1374_p2 <= "1" when (l_i_reg_551 = ap_const_lv7_54) else "0";
    exitcond2_fu_939_p2 <= "1" when (f_2_reg_419 = ap_const_lv5_10) else "0";
    exitcond3_fu_1343_p2 <= "1" when (i_1_reg_540 = ap_const_lv5_10) else "0";
    exitcond4_fu_1319_p2 <= "1" when (i1_4_reg_529 = ap_const_lv3_5) else "0";
    exitcond5_fu_1281_p2 <= "1" when (i0_6_reg_518 = ap_const_lv3_5) else "0";
    exitcond6_fu_1269_p2 <= "1" when (f_4_reg_507 = ap_const_lv7_78) else "0";
    exitcond7_fu_686_p2 <= "1" when (r_reg_342 = ap_const_lv5_1C) else "0";
    exitcond8_fu_951_p2 <= "1" when (r_2_reg_430 = ap_const_lv4_A) else "0";
    exitcond9_fu_698_p2 <= "1" when (c_reg_364 = ap_const_lv5_1C) else "0";
    exitcond_fu_1457_p2 <= "1" when (i_4_reg_607 = ap_const_lv4_A) else "0";
    exitcond_i2_fu_1154_p2 <= "1" when (ix_reg_486 = ap_const_lv3_6) else "0";
    exitcond_i4_fu_1386_p2 <= "1" when (k_i1_reg_562 = ap_const_lv7_78) else "0";
    exitcond_i6_fu_1415_p2 <= "1" when (k_i2_reg_596 = ap_const_lv7_54) else "0";
    exitcond_i_fu_795_p2 <= "1" when (k_i_reg_408 = ap_const_lv3_4) else "0";
    f_1_fu_670_p2 <= std_logic_vector(unsigned(f_reg_331) + unsigned(ap_const_lv3_1));
    f_2_cast_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_2_reg_419),8));
    f_3_fu_945_p2 <= std_logic_vector(unsigned(f_2_reg_419) + unsigned(ap_const_lv5_1));
    f_5_fu_1275_p2 <= std_logic_vector(unsigned(f_4_reg_507) + unsigned(ap_const_lv7_1));
    f_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_331),14));
    grp_b_max_fu_648_ap_start <= grp_b_max_fu_648_ap_start_reg;
    grp_c_sum_fu_618_ap_start <= grp_c_sum_fu_618_ap_start_reg;
    grp_d_max_fu_654_ap_start <= grp_d_max_fu_654_ap_start_reg;
    grp_d_sum_fu_636_ap_start <= grp_d_sum_fu_636_ap_start_reg;
    grp_f_sum_fu_624_ap_start <= grp_f_sum_fu_624_ap_start_reg;
    grp_g_sum_fu_630_ap_start <= grp_g_sum_fu_630_ap_start_reg;
    grp_sum_fu_642_ap_start <= grp_sum_fu_642_ap_start_reg;
    i0_1_fu_720_p2 <= std_logic_vector(unsigned(i3_reg_376) + unsigned(ap_const_lv3_1));
    i0_2_fu_1007_p2 <= std_logic_vector(unsigned(i0_3_reg_453) + unsigned(ap_const_lv3_1));
    i0_fu_1287_p2 <= std_logic_vector(unsigned(i0_6_reg_518) + unsigned(ap_const_lv3_1));
    i1_1_fu_744_p2 <= std_logic_vector(unsigned(i1_reg_387) + unsigned(ap_const_lv3_1));
    i1_3_fu_1325_p2 <= std_logic_vector(unsigned(i1_4_reg_529) + unsigned(ap_const_lv3_1));
    i1_5_fu_1049_p2 <= std_logic_vector(unsigned(i1_2_reg_464) + unsigned(ap_const_lv3_1));
    i1_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_387),5));
    i20_1_cast_fu_884_p2 <= std_logic_vector(unsigned(tmp_23_fu_860_p1) + unsigned(tmp_fu_856_p1));
    i20_1_fu_872_p2 <= std_logic_vector(unsigned(Y_1_i_reg_398) + unsigned(iv12_q0));
    i22_1_cast_fu_1237_p2 <= std_logic_vector(unsigned(tmp_43_fu_1213_p1) + unsigned(tmp_42_fu_1209_p1));
    i22_1_fu_1225_p2 <= std_logic_vector(unsigned(Y_1_i1_reg_497) + unsigned(iv16_q0));
    i3_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_376),5));
    i9_cast_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i9_reg_475),7));
    i_1_cast_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_540),7));
    i_2_fu_1349_p2 <= std_logic_vector(unsigned(i_1_reg_540) + unsigned(ap_const_lv5_1));
    i_3_fu_1095_p2 <= std_logic_vector(unsigned(i9_reg_475) + unsigned(ap_const_lv3_1));
    i_fu_1463_p2 <= std_logic_vector(unsigned(i_4_reg_607) + unsigned(ap_const_lv4_1));
    inputImg_address0 <= ap_const_lv10_0;
    inputImg_address1 <= ap_const_lv10_0;
    inputImg_ce0 <= ap_const_logic_0;
    inputImg_ce1 <= ap_const_logic_0;
    inputImg_d0 <= ap_const_lv8_0;
    inputImg_d1 <= ap_const_lv8_0;
    inputImg_we0 <= ap_const_logic_0;
    inputImg_we1 <= ap_const_logic_0;

    iv11_address0_assign_proc : process(ap_CS_fsm_state6, grp_sum_fu_642_X_address0, ap_CS_fsm_state7, tmp_19_fu_760_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            iv11_address0 <= tmp_19_fu_760_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            iv11_address0 <= grp_sum_fu_642_X_address0;
        else 
            iv11_address0 <= "XXXXX";
        end if; 
    end process;


    iv11_ce0_assign_proc : process(ap_CS_fsm_state6, grp_sum_fu_642_X_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            iv11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            iv11_ce0 <= grp_sum_fu_642_X_ce0;
        else 
            iv11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv11_we0_assign_proc : process(ap_CS_fsm_state6, exitcond15_fu_738_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond15_fu_738_p2 = ap_const_lv1_0))) then 
            iv11_we0 <= ap_const_logic_1;
        else 
            iv11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iv12_address0_assign_proc : process(ap_CS_fsm_state10, grp_sum_fu_642_Y_address0, ap_CS_fsm_state7, tmp_247_i_fu_807_p1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            iv12_address0 <= tmp_247_i_fu_807_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            iv12_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            iv12_address0 <= grp_sum_fu_642_Y_address0;
        else 
            iv12_address0 <= "XXX";
        end if; 
    end process;


    iv12_ce0_assign_proc : process(ap_CS_fsm_state10, grp_sum_fu_642_Y_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            iv12_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            iv12_ce0 <= grp_sum_fu_642_Y_ce0;
        else 
            iv12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv12_we0_assign_proc : process(grp_sum_fu_642_Y_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            iv12_we0 <= grp_sum_fu_642_Y_we0;
        else 
            iv12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iv14_address0_assign_proc : process(ap_CS_fsm_state19, grp_c_sum_fu_618_X_address0, ap_CS_fsm_state20, tmp_33_fu_1119_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            iv14_address0 <= tmp_33_fu_1119_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            iv14_address0 <= grp_c_sum_fu_618_X_address0;
        else 
            iv14_address0 <= "XXXXXXXX";
        end if; 
    end process;


    iv14_ce0_assign_proc : process(ap_CS_fsm_state19, grp_c_sum_fu_618_X_ce0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            iv14_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            iv14_ce0 <= grp_c_sum_fu_618_X_ce0;
        else 
            iv14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv14_we0_assign_proc : process(ap_CS_fsm_state19, exitcond13_fu_1089_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond13_fu_1089_p2 = ap_const_lv1_0))) then 
            iv14_we0 <= ap_const_logic_1;
        else 
            iv14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iv15_address0_assign_proc : process(grp_c_sum_fu_618_Y_address0, grp_d_sum_fu_636_X_address0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            iv15_address0 <= grp_d_sum_fu_636_X_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            iv15_address0 <= grp_c_sum_fu_618_Y_address0;
        else 
            iv15_address0 <= "XXXXX";
        end if; 
    end process;


    iv15_ce0_assign_proc : process(grp_c_sum_fu_618_Y_ce0, grp_d_sum_fu_636_X_ce0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            iv15_ce0 <= grp_d_sum_fu_636_X_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            iv15_ce0 <= grp_c_sum_fu_618_Y_ce0;
        else 
            iv15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv15_we0_assign_proc : process(grp_c_sum_fu_618_Y_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            iv15_we0 <= grp_c_sum_fu_618_Y_we0;
        else 
            iv15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iv16_address0_assign_proc : process(ap_CS_fsm_state25, grp_d_sum_fu_636_Y_address0, ap_CS_fsm_state22, tmp_189_i_fu_1160_p1, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            iv16_address0 <= tmp_189_i_fu_1160_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            iv16_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            iv16_address0 <= grp_d_sum_fu_636_Y_address0;
        else 
            iv16_address0 <= "XXX";
        end if; 
    end process;


    iv16_ce0_assign_proc : process(ap_CS_fsm_state25, grp_d_sum_fu_636_Y_ce0, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            iv16_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            iv16_ce0 <= grp_d_sum_fu_636_Y_ce0;
        else 
            iv16_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv16_we0_assign_proc : process(grp_d_sum_fu_636_Y_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            iv16_we0 <= grp_d_sum_fu_636_Y_we0;
        else 
            iv16_we0 <= ap_const_logic_0;
        end if; 
    end process;


    iv17_address0_assign_proc : process(grp_f_sum_fu_624_Y_address0, grp_g_sum_fu_630_X_address0, ap_CS_fsm_state34, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            iv17_address0 <= grp_g_sum_fu_630_X_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            iv17_address0 <= grp_f_sum_fu_624_Y_address0;
        else 
            iv17_address0 <= "XXXXXXX";
        end if; 
    end process;


    iv17_ce0_assign_proc : process(grp_f_sum_fu_624_Y_ce0, grp_g_sum_fu_630_X_ce0, ap_CS_fsm_state34, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            iv17_ce0 <= grp_g_sum_fu_630_X_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            iv17_ce0 <= grp_f_sum_fu_624_Y_ce0;
        else 
            iv17_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    iv17_we0_assign_proc : process(grp_f_sum_fu_624_Y_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            iv17_we0 <= grp_f_sum_fu_624_Y_we0;
        else 
            iv17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    k_1_fu_1392_p2 <= std_logic_vector(unsigned(k_i1_reg_562) + unsigned(ap_const_lv7_1));
    k_2_fu_1421_p2 <= std_logic_vector(unsigned(k_i2_reg_596) + unsigned(ap_const_lv7_1));
    k_fu_801_p2 <= std_logic_vector(unsigned(k_i_reg_408) + unsigned(ap_const_lv3_1));
    l_1_fu_1404_p2 <= std_logic_vector(unsigned(l_i1_reg_573) + unsigned(ap_const_lv4_1));
    l_fu_1380_p2 <= std_logic_vector(unsigned(l_i_reg_551) + unsigned(ap_const_lv7_1));
    netScores_address0 <= tmp_20_reg_1771(4 - 1 downto 0);

    netScores_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            netScores_ce0 <= ap_const_logic_1;
        else 
            netScores_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    netScores_d0 <= c_assign_1_q0(32 downto 17);

    netScores_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            netScores_we0 <= ap_const_logic_1;
        else 
            netScores_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_680_p2 <= std_logic_vector(unsigned(phi_mul_reg_353) + unsigned(ap_const_lv13_A8));
    p_shl10_cast_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_1067_p3),7));
    p_shl10_fu_1067_p3 <= (i1_2_reg_464 & ap_const_lv1_0);
    p_shl12_cast_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_1301_p3),9));
    p_shl1_cast_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_824_p3),9));
    p_shl1_fu_824_p3 <= (c_reg_364 & ap_const_lv1_0);
    p_shl2_fu_963_p3 <= (r_2_reg_430 & ap_const_lv7_0);
    p_shl3_cast_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_971_p3),11));
    p_shl3_fu_971_p3 <= (r_2_reg_430 & ap_const_lv5_0);
    p_shl4_cast_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_1025_p3),9));
    p_shl4_fu_1025_p3 <= (i0_3_reg_453 & ap_const_lv1_0);
    p_shl5_fu_1293_p3 <= (i0_6_reg_518 & ap_const_lv6_0);
    p_shl6_fu_726_p3 <= (i3_reg_376 & ap_const_lv2_0);
    p_shl7_fu_1301_p3 <= (i0_6_reg_518 & ap_const_lv4_0);
    p_shl8_cast_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_1055_p3),7));
    p_shl8_fu_1055_p3 <= (i1_2_reg_464 & ap_const_lv3_0);
    p_shl9_cast_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_1013_p3),9));
    p_shl9_fu_1013_p3 <= (i0_3_reg_453 & ap_const_lv5_0);
    p_shl_cast_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_812_p3),9));
    p_shl_fu_812_p3 <= (c_reg_364 & ap_const_lv3_0);
    phi_mul_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_353),14));
    phitmp_i_fu_1165_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ix_reg_486));
    r_1_fu_692_p2 <= std_logic_vector(unsigned(r_reg_342) + unsigned(ap_const_lv5_1));
    r_3_fu_957_p2 <= std_logic_vector(unsigned(r_2_reg_430) + unsigned(ap_const_lv4_1));
    storemerge_i1_fu_1449_p3 <= 
        tmp_259_i_fu_1439_p2 when (tmp_41_fu_1431_p3(0) = '1') else 
        tmp_260_i_cast_fu_1445_p1;
    tmp1_fu_750_p2 <= std_logic_vector(unsigned(p_shl6_reg_1542) + unsigned(i1_cast_fu_734_p1));
    tmp2_fu_846_p2 <= std_logic_vector(signed(tmp_31_cast_fu_842_p1) + signed(phi_mul_cast_reg_1503));
        tmp3_cast_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_1101_p2),9));

    tmp3_fu_1101_p2 <= std_logic_vector(unsigned(tmp_31_reg_1643) + unsigned(i9_cast_fu_1085_p1));
    tmp4_fu_983_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_979_p1) + unsigned(p_shl2_fu_963_p3));
    tmp5_cast_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_1190_p2),11));
    tmp5_fu_1190_p2 <= std_logic_vector(unsigned(tmp_28_fu_1182_p3) + unsigned(f_2_cast_reg_1588));
    tmp6_fu_1313_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_1309_p1) + unsigned(p_shl5_fu_1293_p3));
    tmp7_cast_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_1355_p2),9));
    tmp7_fu_1355_p2 <= std_logic_vector(unsigned(tmp_s_reg_1708) + unsigned(i_1_cast_fu_1339_p1));
    tmp_13_fu_1037_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1021_p1) - unsigned(p_shl4_cast_fu_1033_p1));
    tmp_15_fu_836_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_820_p1) - unsigned(p_shl1_cast_fu_832_p1));
    tmp_16_fu_851_p2 <= std_logic_vector(unsigned(f_cast_reg_1490) + unsigned(tmp2_fu_846_p2));
    tmp_17_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_cast_fu_927_p1),64));
    tmp_189_i_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_reg_486),64));
    tmp_18_fu_755_p2 <= std_logic_vector(unsigned(tmp1_fu_750_p2) + unsigned(i3_cast_reg_1529));
    tmp_19_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_755_p2),64));
    tmp_20_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_607),64));
    tmp_21_fu_769_p3 <= iv12_q0(29 downto 29);
    tmp_22_fu_1128_p3 <= iv16_q0(40 downto 40);
    tmp_23_fu_860_p1 <= iv12_q0(30 - 1 downto 0);
    tmp_247_i_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_801_p2),64));
    tmp_259_i_fu_1439_p2 <= (i26_reg_584 or ap_const_lv64_FFFFFFC000000000);
    tmp_25_fu_1364_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_1360_p1) + unsigned(tmp6_reg_1695));
    tmp_260_i_cast_fu_1445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1427_p1),64));
    tmp_26_fu_1369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_1364_p2),64));
    tmp_28_fu_1182_p3 <= (c_2_reg_441 & ap_const_lv4_0);
    tmp_29_fu_1199_p2 <= std_logic_vector(unsigned(tmp4_reg_1609) + unsigned(tmp5_cast_fu_1195_p1));
    tmp_30_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_1199_p2),64));
        tmp_31_cast_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_836_p2),14));

    tmp_31_fu_1079_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1063_p1) - unsigned(p_shl10_cast_fu_1075_p1));
        tmp_32_cast_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_1573),32));

    tmp_32_fu_1110_p2 <= std_logic_vector(signed(tmp3_cast_fu_1106_p1) + signed(tmp_13_reg_1630));
    tmp_33_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_cast_fu_1115_p1),64));
    tmp_34_fu_864_p1 <= Y_1_i_reg_398(29 - 1 downto 0);
    tmp_35_fu_868_p1 <= iv12_q0(29 - 1 downto 0);
    tmp_36_fu_890_p3 <= i20_1_cast_fu_884_p2(29 downto 29);
    tmp_37_fu_1427_p1 <= i26_reg_584(38 - 1 downto 0);
    tmp_41_fu_1431_p3 <= i26_reg_584(38 downto 38);
    tmp_42_fu_1209_p1 <= Y_1_i1_reg_497(41 - 1 downto 0);
    tmp_43_fu_1213_p1 <= iv16_q0(41 - 1 downto 0);
    tmp_44_fu_1217_p1 <= Y_1_i1_reg_497(40 - 1 downto 0);
    tmp_45_fu_1221_p1 <= iv16_q0(40 - 1 downto 0);
    tmp_46_fu_1243_p3 <= i22_1_cast_fu_1237_p2(40 downto 40);
        tmp_58_cast_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_1110_p2),32));

    tmp_fu_856_p1 <= Y_1_i_reg_398(30 - 1 downto 0);
    tmp_i4_fu_1410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_i1_reg_573),64));
    tmp_s_fu_1331_p3 <= (i1_4_reg_529 & ap_const_lv4_0);
end behav;
